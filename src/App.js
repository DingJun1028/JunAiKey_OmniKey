var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Auth from './pages/Auth';\nimport Dashboard from './pages/Dashboard';\nimport Chat from './pages/Chat';\nimport KnowledgeBase from './pages/KnowledgeBase';\nimport Scripts from './pages/Scripts';\nimport Agents from './pages/Agents';\nimport Analytics from './pages/Analytics';\nimport Goals from './pages/Goals';\nimport Settings from './pages/Settings';\nimport CodexPalace from './pages/CodexPalace'; // Import CodexPalace\nimport SecurityAudit from './pages/SecurityAudit'; // Import SecurityAudit\nimport Files from './pages/Files'; // Import Files\nimport Repositories from './pages/Repositories'; // Import Repositories\nimport Glossary from './pages/Glossary'; // Import Glossary\nimport KnowledgeCollections from './pages/KnowledgeCollections'; // Import KnowledgeCollections\nimport CollectionDetail from './pages/CollectionDetail'; // Import CollectionDetail\nimport AgenticFlows from './pages/AgenticFlows'; // Import AgenticFlows\nimport AgenticFlowDetail from './pages/AgenticFlowDetail'; // Import AgenticFlowDetail\nimport AgenticFlowEditor from './pages/AgenticFlowEditor'; // Import AgenticFlowEditor\nimport Calendar from './pages/Calendar'; // Import Calendar\nimport Templates from './pages/Templates'; // Import Templates\nimport Marketplace from './pages/Marketplace'; // Import Marketplace\nimport Journal from './pages/Journal'; // Import Journal\nimport Insights from './pages/Insights'; // Import Insights\nimport Sync from './pages/Sync'; // Import Sync\nimport Users from './pages/Users'; // Import Users\n\n\nimport Navbar from './components/Navbar'; // Import Navbar\nimport { SystemContext, User } from './interfaces'; // Import User type\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst systemContext: SystemContext = window.systemContext; // Access the system context\n\n// ProtectedRoute component to guard routes that require authentication\nconst ProtectedRoute: React.FC<{ children: JSX.Element }> = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(systemContext?.currentUser);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  useEffect(() => {\n    // Subscribe to auth state changes\n    let unsubscribe: (() => void) | undefined;\n    if (systemContext?.securityService) {\n      unsubscribe = systemContext.securityService.onAuthStateChange((user: User | null) => {\n        setCurrentUser(user);\n        setLoading(false); // Set loading to false after initial check\n      });\n    } else {\n        // If securityService is not available, assume not logged in and stop loading\n        setLoading(false);\n    }\n\n    // Initial check if securityService was already initialized and user is available\n    if (systemContext?.securityService && systemContext.currentUser !== undefined) {\n         setCurrentUser(systemContext.currentUser);\n         setLoading(false);\n    }\n\n\n    return () => {\n      // Unsubscribe on component unmount\n      unsubscribe?.();\n    };\n  }, [systemContext?.securityService]); // Re-run effect if securityService changes\n\n  if (loading) {\n      // Optionally render a loading spinner or message while checking auth state\n      return <div className=\"flex justify-center items-center h-screen text-neutral-400\">Loading...</div>;\n  }\n\n\n  // If user is not logged in, redirect to the auth page\n  if (!currentUser) {\n    return <Navigate to=\"/auth\" replace />;\n  }\n\n  // If user is logged in, render the children (the protected route component)\n  return children;\n};\n\n\nfunction App() {\n  // State to track the current user (derived from systemContext)\n  // This state is updated by the ProtectedRoute component's listener\n  const [currentUser, setCurrentUser] = useState<User | null>(systemContext?.currentUser);\n\n  useEffect(() => {\n      // Subscribe to auth state changes from the global systemContext\n      // This ensures the App component re-renders when the user logs in or out\n      let unsubscribe: (() => void) | undefined;\n      if (systemContext?.securityService) {\n          unsubscribe = systemContext.securityService.onAuthStateChange((user: User | null) => {\n              setCurrentUser(user);\n          });\n      }\n\n      return () => {\n          // Unsubscribe on component unmount\n          unsubscribe?.();\n      };\n  }, [systemContext?.securityService]); // Re-run effect if securityService changes\n\n\n  return (\n    <Router>\n      <div className=\"min-h-screen bg-neutral-900 text-neutral-100\"> {/* Basic dark mode background */}\n        {/* Render Navbar only if user is logged in */}\n        {currentUser && <Navbar />}\n\n        <main className=\"pt-16\"> {/* Add padding-top to account for fixed navbar */}\n          <Routes>\n            {/* Public route for authentication */}\n            <Route path=\"/auth\" element={<Auth />} />\n\n            {/* Protected routes */}\n            <Route\n              path=\"/\"\n              element={\n                <ProtectedRoute>\n                  <Dashboard />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/dashboard\"\n              element={\n                <ProtectedRoute>\n                  <Dashboard />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/chat\"\n              element={\n                <ProtectedRoute>\n                  <Chat />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/knowledge\"\n              element={\n                <ProtectedRoute>\n                  <KnowledgeBase />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/collections\"\n              element={\n                <ProtectedRoute>\n                  <KnowledgeCollections />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/collections/:collectionId\"\n              element={\n                <ProtectedRoute>\n                  <CollectionDetail />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/scripts\"\n              element={\n                <ProtectedRoute>\n                  <Scripts />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/agents\"\n              element={\n                <ProtectedRoute>\n                  <Agents />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/analytics\"\n              element={\n                <ProtectedRoute>\n                  <Analytics />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/goals\"\n              element={\n                <ProtectedRoute>\n                  <Goals />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/settings\"\n              element={\n                <ProtectedRoute>\n                  <Settings />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/codexpalace\"\n              element={\n                <ProtectedRoute>\n                  <CodexPalace />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/securityaudit\"\n              element={\n                <ProtectedRoute>\n                  <SecurityAudit />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/files\"\n              element={\n                <ProtectedRoute>\n                  <Files />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/repositories\"\n              element={\n                <ProtectedRoute>\n                  <Repositories />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/glossary\"\n              element={\n                <ProtectedRoute>\n                  <Glossary />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/flows\"\n              element={\n                <ProtectedRoute>\n                  <AgenticFlows />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/flows/:flowId\"\n              element={\n                <ProtectedRoute>\n                  <AgenticFlowDetail />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/flows/:flowId/edit\"\n              element={\n                <ProtectedRoute>\n                  <AgenticFlowEditor />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/calendar\"\n              element={\n                <ProtectedRoute>\n                  <Calendar />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/templates\"\n              element={\n                <ProtectedRoute>\n                  <Templates />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/marketplace\"\n              element={\n                <ProtectedRoute>\n                  <Marketplace />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/journal\"\n              element={\n                <ProtectedRoute>\n                  <Journal />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/insights\"\n              element={\n                <ProtectedRoute>\n                  <Insights />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/sync\"\n              element={\n                <ProtectedRoute>\n                  <Sync />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/users\"\n              element={\n                <ProtectedRoute>\n                  <Users />\n                </ProtectedRoute>\n              }\n            />\n\n\n            {/* Redirect any other path to the dashboard if logged in, or auth if not */}\n            <Route\n              path=\"*\"\n              element={currentUser ? <Navigate to=\"/dashboard\" replace /> : <Navigate to=\"/auth\" replace />}\n            />\n          </Routes>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"], ["typescript\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Auth from './pages/Auth';\nimport Dashboard from './pages/Dashboard';\nimport Chat from './pages/Chat';\nimport KnowledgeBase from './pages/KnowledgeBase';\nimport Scripts from './pages/Scripts';\nimport Agents from './pages/Agents';\nimport Analytics from './pages/Analytics';\nimport Goals from './pages/Goals';\nimport Settings from './pages/Settings';\nimport CodexPalace from './pages/CodexPalace'; // Import CodexPalace\nimport SecurityAudit from './pages/SecurityAudit'; // Import SecurityAudit\nimport Files from './pages/Files'; // Import Files\nimport Repositories from './pages/Repositories'; // Import Repositories\nimport Glossary from './pages/Glossary'; // Import Glossary\nimport KnowledgeCollections from './pages/KnowledgeCollections'; // Import KnowledgeCollections\nimport CollectionDetail from './pages/CollectionDetail'; // Import CollectionDetail\nimport AgenticFlows from './pages/AgenticFlows'; // Import AgenticFlows\nimport AgenticFlowDetail from './pages/AgenticFlowDetail'; // Import AgenticFlowDetail\nimport AgenticFlowEditor from './pages/AgenticFlowEditor'; // Import AgenticFlowEditor\nimport Calendar from './pages/Calendar'; // Import Calendar\nimport Templates from './pages/Templates'; // Import Templates\nimport Marketplace from './pages/Marketplace'; // Import Marketplace\nimport Journal from './pages/Journal'; // Import Journal\nimport Insights from './pages/Insights'; // Import Insights\nimport Sync from './pages/Sync'; // Import Sync\nimport Users from './pages/Users'; // Import Users\n\n\nimport Navbar from './components/Navbar'; // Import Navbar\nimport { SystemContext, User } from './interfaces'; // Import User type\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst systemContext: SystemContext = window.systemContext; // Access the system context\n\n// ProtectedRoute component to guard routes that require authentication\nconst ProtectedRoute: React.FC<{ children: JSX.Element }> = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(systemContext?.currentUser);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  useEffect(() => {\n    // Subscribe to auth state changes\n    let unsubscribe: (() => void) | undefined;\n    if (systemContext?.securityService) {\n      unsubscribe = systemContext.securityService.onAuthStateChange((user: User | null) => {\n        setCurrentUser(user);\n        setLoading(false); // Set loading to false after initial check\n      });\n    } else {\n        // If securityService is not available, assume not logged in and stop loading\n        setLoading(false);\n    }\n\n    // Initial check if securityService was already initialized and user is available\n    if (systemContext?.securityService && systemContext.currentUser !== undefined) {\n         setCurrentUser(systemContext.currentUser);\n         setLoading(false);\n    }\n\n\n    return () => {\n      // Unsubscribe on component unmount\n      unsubscribe?.();\n    };\n  }, [systemContext?.securityService]); // Re-run effect if securityService changes\n\n  if (loading) {\n      // Optionally render a loading spinner or message while checking auth state\n      return <div className=\"flex justify-center items-center h-screen text-neutral-400\">Loading...</div>;\n  }\n\n\n  // If user is not logged in, redirect to the auth page\n  if (!currentUser) {\n    return <Navigate to=\"/auth\" replace />;\n  }\n\n  // If user is logged in, render the children (the protected route component)\n  return children;\n};\n\n\nfunction App() {\n  // State to track the current user (derived from systemContext)\n  // This state is updated by the ProtectedRoute component's listener\n  const [currentUser, setCurrentUser] = useState<User | null>(systemContext?.currentUser);\n\n  useEffect(() => {\n      // Subscribe to auth state changes from the global systemContext\n      // This ensures the App component re-renders when the user logs in or out\n      let unsubscribe: (() => void) | undefined;\n      if (systemContext?.securityService) {\n          unsubscribe = systemContext.securityService.onAuthStateChange((user: User | null) => {\n              setCurrentUser(user);\n          });\n      }\n\n      return () => {\n          // Unsubscribe on component unmount\n          unsubscribe?.();\n      };\n  }, [systemContext?.securityService]); // Re-run effect if securityService changes\n\n\n  return (\n    <Router>\n      <div className=\"min-h-screen bg-neutral-900 text-neutral-100\"> {/* Basic dark mode background */}\n        {/* Render Navbar only if user is logged in */}\n        {currentUser && <Navbar />}\n\n        <main className=\"pt-16\"> {/* Add padding-top to account for fixed navbar */}\n          <Routes>\n            {/* Public route for authentication */}\n            <Route path=\"/auth\" element={<Auth />} />\n\n            {/* Protected routes */}\n            <Route\n              path=\"/\"\n              element={\n                <ProtectedRoute>\n                  <Dashboard />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/dashboard\"\n              element={\n                <ProtectedRoute>\n                  <Dashboard />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/chat\"\n              element={\n                <ProtectedRoute>\n                  <Chat />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/knowledge\"\n              element={\n                <ProtectedRoute>\n                  <KnowledgeBase />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/collections\"\n              element={\n                <ProtectedRoute>\n                  <KnowledgeCollections />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/collections/:collectionId\"\n              element={\n                <ProtectedRoute>\n                  <CollectionDetail />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/scripts\"\n              element={\n                <ProtectedRoute>\n                  <Scripts />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/agents\"\n              element={\n                <ProtectedRoute>\n                  <Agents />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/analytics\"\n              element={\n                <ProtectedRoute>\n                  <Analytics />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/goals\"\n              element={\n                <ProtectedRoute>\n                  <Goals />\n                </ProtectedRoute>\n              }\n            />\n            <Route\n              path=\"/settings\"\n              element={\n                <ProtectedRoute>\n                  <Settings />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/codexpalace\"\n              element={\n                <ProtectedRoute>\n                  <CodexPalace />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/securityaudit\"\n              element={\n                <ProtectedRoute>\n                  <SecurityAudit />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/files\"\n              element={\n                <ProtectedRoute>\n                  <Files />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/repositories\"\n              element={\n                <ProtectedRoute>\n                  <Repositories />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/glossary\"\n              element={\n                <ProtectedRoute>\n                  <Glossary />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/flows\"\n              element={\n                <ProtectedRoute>\n                  <AgenticFlows />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/flows/:flowId\"\n              element={\n                <ProtectedRoute>\n                  <AgenticFlowDetail />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/flows/:flowId/edit\"\n              element={\n                <ProtectedRoute>\n                  <AgenticFlowEditor />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/calendar\"\n              element={\n                <ProtectedRoute>\n                  <Calendar />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/templates\"\n              element={\n                <ProtectedRoute>\n                  <Templates />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/marketplace\"\n              element={\n                <ProtectedRoute>\n                  <Marketplace />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/journal\"\n              element={\n                <ProtectedRoute>\n                  <Journal />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/insights\"\n              element={\n                <ProtectedRoute>\n                  <Insights />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/sync\"\n              element={\n                <ProtectedRoute>\n                  <Sync />\n                </ProtectedRoute>\n              }\n            />\n             <Route\n              path=\"/users\"\n              element={\n                <ProtectedRoute>\n                  <Users />\n                </ProtectedRoute>\n              }\n            />\n\n\n            {/* Redirect any other path to the dashboard if logged in, or auth if not */}\n            <Route\n              path=\"*\"\n              element={currentUser ? <Navigate to=\"/dashboard\" replace /> : <Navigate to=\"/auth\" replace />}\n            />\n          </Routes>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"]))(__makeTemplateObject([""], [""]));
