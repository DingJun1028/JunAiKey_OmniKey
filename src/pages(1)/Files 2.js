var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// src/pages/Files.tsx\n// Files Page\n// Displays and manages files in the user's storage (simulated filesystem).\n// --- New: Add UI for listing files and directories ---// --- New: Add UI for viewing file content ---// --- New: Add UI for creating, editing, and deleting files ---\nimport React, { useEffect, useState } from 'react';\nimport { FileService } from '../core/files/FileService';\nimport { AuthorityForgingEngine } from '../core/authority/AuthorityForgingEngine'; // Import AuthorityForgingEngine\nimport { Folder, FileText, ChevronDown, ChevronUp, Trash2, Edit, PlusCircle, Save, Loader2, Info, ArrowLeft } from 'lucide-react'; // Import icons\nimport * as path from 'path'; // Import path module\n\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst fileService: FileService = window.systemContext?.fileService; // The File Service (\u6587\u4EF6\u670D\u52D9) module\nconst authorityForgingEngine: any = window.systemContext?.authorityForgingEngine; // Use any for action recording (\u6B0A\u80FD\u935B\u9020)\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\n\n\nconst Files: React.FC = () => {\n  const [currentDir, setCurrentDir] = useState('/'); // State for the current directory being viewed\n  const [entries, setEntries] = useState<string[]>([]); // State for files and directories in the currentDir\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // State for file content viewing/editing\n  const [viewingFile, setViewingFile] = useState<string | null>(null); // Path of the file being viewed\n  const [fileContent, setFileContent] = useState<string | null>(null); // Content of the file being viewed\n  const [loadingFileContent, setLoadingFileContent] = useState(false);\n  const [editingFileContent, setEditingFileContent] = useState<string | null>(null); // Content being edited\n  const [isSavingFile, setIsSavingFile] = useState(false);\n\n  // State for creating new file\n  const [isCreatingFile, setIsCreatingFile] = useState(false);\n  const [newFileName, setNewFileName] = useState('');\n  const [newFileContent, setNewFileContent] = useState('');\n  const [isCreatingDirectory, setIsCreatingDirectory] = useState(false);\n  const [newDirName, setNewDirName] = useState('');\n\n\n  const fetchEntries = async (dirPath: string) => {\n       const userId = systemContext?.currentUser?.id;\n       if (!fileService || !userId) {\n            setError(\"FileService module not initialized or user not logged in.\");\n            setLoading(false);\n            return;\n        }\n      setLoading(true);\n      setError(null); // Clear main error when fetching\n      try {\n          // Fetch entries for the current directory\n          const dirEntries = await fileService.listFiles(dirPath, userId); // Pass dirPath and user ID\n          setEntries(dirEntries);\n          setCurrentDir(dirPath); // Update current directory state\n      } catch (err: any) {\n          console.error('Error fetching directory entries:', err);\n          setError("], ["typescript\n// src/pages/Files.tsx\n// Files Page\n// Displays and manages files in the user's storage (simulated filesystem).\n// --- New: Add UI for listing files and directories ---\\\n// --- New: Add UI for viewing file content ---\\\n// --- New: Add UI for creating, editing, and deleting files ---\\\n\nimport React, { useEffect, useState } from 'react';\nimport { FileService } from '../core/files/FileService';\nimport { AuthorityForgingEngine } from '../core/authority/AuthorityForgingEngine'; // Import AuthorityForgingEngine\nimport { Folder, FileText, ChevronDown, ChevronUp, Trash2, Edit, PlusCircle, Save, Loader2, Info, ArrowLeft } from 'lucide-react'; // Import icons\nimport * as path from 'path'; // Import path module\n\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst fileService: FileService = window.systemContext?.fileService; // The File Service (\\u6587\\u4ef6\\u670d\\u52d9) module\nconst authorityForgingEngine: any = window.systemContext?.authorityForgingEngine; // Use any for action recording (\\u6b0a\\u80fd\\u935b\\u9020)\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\n\n\nconst Files: React.FC = () => {\n  const [currentDir, setCurrentDir] = useState('/'); // State for the current directory being viewed\n  const [entries, setEntries] = useState<string[]>([]); // State for files and directories in the currentDir\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // State for file content viewing/editing\n  const [viewingFile, setViewingFile] = useState<string | null>(null); // Path of the file being viewed\n  const [fileContent, setFileContent] = useState<string | null>(null); // Content of the file being viewed\n  const [loadingFileContent, setLoadingFileContent] = useState(false);\n  const [editingFileContent, setEditingFileContent] = useState<string | null>(null); // Content being edited\n  const [isSavingFile, setIsSavingFile] = useState(false);\n\n  // State for creating new file\n  const [isCreatingFile, setIsCreatingFile] = useState(false);\n  const [newFileName, setNewFileName] = useState('');\n  const [newFileContent, setNewFileContent] = useState('');\n  const [isCreatingDirectory, setIsCreatingDirectory] = useState(false);\n  const [newDirName, setNewDirName] = useState('');\n\n\n  const fetchEntries = async (dirPath: string) => {\n       const userId = systemContext?.currentUser?.id;\n       if (!fileService || !userId) {\n            setError(\"FileService module not initialized or user not logged in.\");\n            setLoading(false);\n            return;\n        }\n      setLoading(true);\n      setError(null); // Clear main error when fetching\n      try {\n          // Fetch entries for the current directory\n          const dirEntries = await fileService.listFiles(dirPath, userId); // Pass dirPath and user ID\n          setEntries(dirEntries);\n          setCurrentDir(dirPath); // Update current directory state\n      } catch (err: any) {\n          console.error('Error fetching directory entries:', err);\n          setError("]));
Failed;
to;
load;
directory;
entries: $;
{
    err.message;
}
");\n          setEntries([]); // Clear entries on error\n      } finally {\n          setLoading(false);\n      }\n  };\n\n  const fetchFileContent = async (filePath: string) => {\n       const userId = systemContext?.currentUser?.id;\n       if (!fileService || !userId) {\n            setError(\"FileService module not initialized or user not logged in.\");\n            setLoadingFileContent(false);\n            return;\n        }\n      setLoadingFileContent(true);\n      setError(null); // Clear main error when fetching file content\n      try {\n          // Fetch file content\n          const content = await fileService.readFile(filePath, userId); // Pass filePath and user ID\n          setFileContent(content);\n          setEditingFileContent(content); // Initialize editing state with fetched content\n          setViewingFile(filePath); // Set the file being viewed\n      } catch (err: any) {          console.error('Error fetching file content:', err);\n          setError(";
Failed;
to;
load;
file;
content: $;
{
    err.message;
}
");\n          setFileContent(null);\n          setEditingFileContent(null);\n          setViewingFile(null); // Clear viewing file on error\n      } finally {\n          setLoadingFileContent(false);\n      }\n  };\n\n\n  useEffect(() => {\n    // Fetch entries when the component mounts or when the user changes or currentDir changes\n    if (systemContext?.currentUser?.id) {\n        fetchEntries(currentDir); // Fetch entries for the current directory\n    }\n\n    // TODO: Subscribe to realtime updates for file changes if implemented in FileService/SyncService\n    // fileService?.context?.eventBus?.subscribe('file_written', (payload) => { ... });\n    // fileService?.context?.eventBus?.subscribe('file_deleted', (payload) => { ... });\n\n  }, [systemContext?.currentUser?.id, fileService, currentDir]); // Re-run effect when user ID, service, or currentDir changes\n\n\n    const handleEntryClick = (entryName: string) => {\n        const entryPath = path.join(currentDir, entryName);\n        // Determine if it's a file or directory (requires checking stats, not available in simple listFiles)\n        // For MVP, let's assume entries without extensions are directories, and entries with extensions are files.\n        // A more robust approach would use fs.stat() or rely on metadata from a synced file list.\n        const isDirectory = !path.extname(entryName) && entryName !== '..'; // Simple heuristic, exclude '..'\n        if (isDirectory) {\n            fetchEntries(entryPath); // Navigate into directory\n        } else {\n            fetchFileContent(entryPath); // View file content\n        }\n    };\n\n    const handleGoBack = () => {\n        const parentDir = path.dirname(currentDir);\n        if (parentDir !== currentDir) { // Prevent going above the base directory '/'            fetchEntries(parentDir);\n        }\n    };\n\n    const handleCloseFileView = () => {\n        setViewingFile(null);\n        setFileContent(null);\n        setEditingFileContent(null);\n        setError(null); // Clear file-specific errors\n    };\n\n    const handleSaveFile = async () => {\n        const userId = systemContext?.currentUser?.id;\n        if (!fileService || !userId || !viewingFile || editingFileContent === null) {\n            alert(\"FileService module not initialized, user not logged in, or no file selected/content to save.\");\n            return;\n        }\n        setIsSavingFile(true);\n        setError(null);\n        try {\n            // Use FileService to update the file\n            await fileService.updateFile(viewingFile, editingFileContent, userId); // Pass filePath, content, user ID\n            alert(";
File;
$;
{
    viewingFile;
}
saved;
successfully(__makeTemplateObject([");\n            // Update the displayed content after saving\n            setFileContent(editingFileContent);\n             // Simulate recording user action\n            authorityForgingEngine?.recordAction({\n                type: 'web:files:save',\n                details: { filePath: viewingFile },\n                context: { platform: 'web', page: 'files' },\n                user_id: userId, // Associate action with user\n            });\n        } catch (err: any) {\n            console.error('Error saving file:', err);\n            setError("], [");\n            // Update the displayed content after saving\n            setFileContent(editingFileContent);\n             // Simulate recording user action\n            authorityForgingEngine?.recordAction({\n                type: 'web:files:save',\n                details: { filePath: viewingFile },\n                context: { platform: 'web', page: 'files' },\n                user_id: userId, // Associate action with user\n            });\n        } catch (err: any) {\n            console.error('Error saving file:', err);\n            setError("]));
Failed;
to;
save;
file: $;
{
    err.message;
}
");\n        } finally {\n            setIsSavingFile(false);\n        }\n    };\n\n    const handleDeleteFile = async (filePath: string) => {\n        const userId = systemContext?.currentUser?.id;\n        if (!fileService || !userId) {\n            alert(\"FileService module not initialized or user not logged in.\");\n            return;\n        }\n        if (!confirm(";
Are;
you;
sure;
you;
want;
to;
delete $;
{
    filePath;
}
")) return;\n\n        setError(null);\n        try {\n            // Use FileService to delete the file\n            await fileService.deleteFile(filePath, userId); // Pass filePath and user ID\n            alert(";
File;
$;
{
    filePath;
}
deleted;
successfully(__makeTemplateObject([");\n            // If the deleted file was being viewed, close the viewer\n            if (viewingFile === filePath) {\n                handleCloseFileView();\n            }\n            // Refetch entries for the current directory to update the list\n            fetchEntries(currentDir);\n             // Simulate recording user action\n            authorityForgingEngine?.recordAction({\n                type: 'web:files:delete',\n                details: { filePath },\n                context: { platform: 'web', page: 'files' },\n                user_id: userId, // Associate action with user\n            });\n        } catch (err: any) {\n            console.error('Error deleting file:', err);\n            setError("], [");\n            // If the deleted file was being viewed, close the viewer\n            if (viewingFile === filePath) {\n                handleCloseFileView();\n            }\n            // Refetch entries for the current directory to update the list\n            fetchEntries(currentDir);\n             // Simulate recording user action\n            authorityForgingEngine?.recordAction({\n                type: 'web:files:delete',\n                details: { filePath },\n                context: { platform: 'web', page: 'files' },\n                user_id: userId, // Associate action with user\n            });\n        } catch (err: any) {\n            console.error('Error deleting file:', err);\n            setError("]));
Failed;
to;
delete file;
$;
{
    err.message;
}
");\n            alert(";
Failed;
to;
delete file;
$;
{
    err.message;
}
");\n        } finally {\n            setIsSavingFile(false);\n        }\n    };\n\n    const handleCreateNewFile = async (e: React.FormEvent) => {\n        e.preventDefault();\n        const userId = systemContext?.currentUser?.id;\n        if (!fileService || !userId || !newFileName.trim()) {\n            alert(\"FileService module not initialized, user not logged in, or file name is empty.\");\n            return;\n        }\n        const filePath = path.join(currentDir, newFileName.trim());\n        setIsSavingFile(true); // Use saving state for creation too\n        setError(null);\n        try {\n            // Use FileService to write the new file\n            await fileService.writeFile(filePath, newFileContent, userId); // Pass filePath, content, user ID\n            alert(";
File;
$;
{
    filePath;
}
created;
successfully(__makeTemplateObject([");\n            // Reset form and refetch entries\n            setIsCreatingFile(false);\n            setNewFileName('');\n            setNewFileContent('');\n            fetchEntries(currentDir);\n             // Simulate recording user action\n            authorityForgingEngine?.recordAction({\n                type: 'web:files:create',\n                details: { filePath },\n                context: { platform: 'web', page: 'files' },\n                user_id: userId, // Associate action with user\n            });\n        } catch (err: any) {\n            console.error('Error creating file:', err);\n            setError("], [");\n            // Reset form and refetch entries\n            setIsCreatingFile(false);\n            setNewFileName('');\n            setNewFileContent('');\n            fetchEntries(currentDir);\n             // Simulate recording user action\n            authorityForgingEngine?.recordAction({\n                type: 'web:files:create',\n                details: { filePath },\n                context: { platform: 'web', page: 'files' },\n                user_id: userId, // Associate action with user\n            });\n        } catch (err: any) {\n            console.error('Error creating file:', err);\n            setError("]));
Failed;
to;
create;
file: $;
{
    err.message;
}
");\n        } finally {\n            setIsSavingFile(false);\n        }\n    };\n\n     const handleCreateNewDirectory = async (e: React.FormEvent) => {\n        e.preventDefault();\n        const userId = systemContext?.currentUser?.id;\n        if (!fileService || !userId || !newDirName.trim()) {\n            alert(\"FileService module not initialized, user not logged in, or directory name is empty.\");\n            return;\n        }\n        const dirPath = path.join(fileService['baseDir'], currentDir, newDirName.trim()); // Use baseDir internally for mkdir\n        setIsSavingFile(true); // Use saving state for creation too\n        setError(null);\n        try {\n            // Use Node.js fs.mkdir directly as FileService doesn't expose it yet\n            // Or add a createDirectory method to FileService\n            // For MVP, let's simulate or add a simple mkdir wrapper in FileService\n            // Adding a wrapper method to FileService is better. Let's assume fileService.createDirectory exists.\n            // await fileService.createDirectory(path.join(currentDir, newDirName.trim()), userId); // Pass path relative to baseDir\n\n            // --- Using fs.mkdir directly for MVP simplicity ---            const safeDirPath = fileService['resolveSafePath'](path.join(currentDir, newDirName.trim())); // Use internal helper for safety\n            await fs.mkdir(safeDirPath, { recursive: true });\n            // --- End using fs.mkdir directly ---\n            alert(";
Directory;
$;
{
    path.join(currentDir, newDirName.trim());
}
created;
successfully(__makeTemplateObject([");\n            // Reset form and refetch entries\n            setIsCreatingDirectory(false);\n            setNewDirName('');\n            fetchEntries(currentDir);\n             // Simulate recording user action\n            authorityForgingEngine?.recordAction({\n                type: 'web:files:create_directory',\n                details: { dirPath: path.join(currentDir, newDirName.trim()) },\n                context: { platform: 'web', page: 'files' },\n                user_id: userId, // Associate action with user\n            });\n        } catch (err: any) {\n            console.error('Error creating directory:', err);\n            setError("], [");\n            // Reset form and refetch entries\n            setIsCreatingDirectory(false);\n            setNewDirName('');\n            fetchEntries(currentDir);\n             // Simulate recording user action\n            authorityForgingEngine?.recordAction({\n                type: 'web:files:create_directory',\n                details: { dirPath: path.join(currentDir, newDirName.trim()) },\n                context: { platform: 'web', page: 'files' },\n                user_id: userId, // Associate action with user\n            });\n        } catch (err: any) {\n            console.error('Error creating directory:', err);\n            setError("]));
Failed;
to;
create;
directory: $;
{
    err.message;
}
");\n        } finally {\n            setIsSavingFile(false);\n        }\n    };\n\n\n   // Ensure user is logged in before rendering content\n  if (!systemContext?.currentUser) {\n       // This case should ideally be handled by ProtectedRoute, but as a fallback:\n       return (\n            <div className=\"container mx-auto p-4 flex justify-center\">\n               <div className=\"bg-neutral-800/50 p-8 rounded-lg shadow-xl w-full max-w-md text-center text-neutral-300\">\n                   <p>Please log in to view your files.</p>\n               </div>\n            </div>\n       );\n  }\n\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <div className=\"bg-neutral-800/50 p-6 rounded-lg shadow-xl\">\n        <h2 className=\"text-3xl font-bold text-blue-400 mb-6\">Files (\u6587\u4EF6\u670D\u52D9)</h2>\n        <p className=\"text-neutral-300 mb-8\">Manage files in your personal storage (simulated filesystem in WebContainer).</p>\n\n        {/* File Content Viewer/Editor Modal */}        {viewingFile && (             <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\">                 <div className=\"bg-neutral-800 p-8 rounded-lg shadow-xl w-full max-w-2xl h-5/6 flex flex-col\"> {/* Added flex-col and height */}                     <div className=\"flex justify-between items-center mb-4\">                         <h3 className=\"text-xl font-semibold text-blue-300\">Viewing/Editing: {viewingFile}</h3>                         <button                             type=\"button\"                             onClick={handleCloseFileView}                             className=\"text-neutral-400 hover:text-white transition\"                             disabled={isSavingFile}                         >                             <XCircle size={24} />                         </button>                     </div>                     {loadingFileContent ? (                         <div className=\"flex-grow flex justify-center items-center\">                             <Loader2 size={32} className=\"animate-spin text-blue-400\"/>                         </div>                     ) : error ? (                         <div className=\"flex-grow text-red-400 overflow-y-auto scrollbar-thin scrollbar-thumb-neutral-700\">                             <p>Error loading file: {error}</p>                         </div>                     ) : (                         <div className=\"flex-grow flex flex-col\"> {/* Added flex-col */}                             <textarea                                 className=\"flex-grow w-full p-2 rounded-md bg-neutral-900 text-neutral-200 border border-neutral-700 focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-xs overflow-auto scrollbar-thin scrollbar-thumb-neutral-700\"                                 value={editingFileContent || ''}                                 onChange={(e) => setEditingFileContent(e.target.value)}                                 disabled={isSavingFile}                             />                             {error && !isSavingFile && ( // Show save error only after it finishes                                 <p className=\"text-red-400 text-sm mt-2\">Error: {error}</p>                             )}                             <div className=\"flex gap-4 justify-end mt-4\">                                 <button                                     type=\"button\"                                     onClick={handleSaveFile}                                     className=\"px-6 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"                                     disabled={isSavingFile}                                 >                                     {isSavingFile ? 'Saving...' : 'Save Changes'}                                 </button>                             </div>                         </div>                     )}                 </div>             </div>        )}\n\n        {/* Create New File/Directory Forms */}        {!viewingFile && ( // Only show create forms when not viewing a file\n             <div className=\"mb-8 p-4 bg-neutral-700/50 rounded-lg\">                 <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Create New</h3>                 <div className=\"flex gap-4\">                     <button                         className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition disabled:opacity-50\"                         onClick={() => { setIsCreatingFile(true); setIsCreatingDirectory(false); setError(null); }}                         disabled={isCreatingFile || isCreatingDirectory || isSavingFile}                     >                         <PlusCircle size={20} className=\"inline-block mr-2\"/> File                     </button>                      <button                         className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition disabled:opacity-50\"                         onClick={() => { setIsCreatingDirectory(true); setIsCreatingFile(false); setError(null); }}                         disabled={isCreatingFile || isCreatingDirectory || isSavingFile}                     >                         <PlusCircle size={20} className=\"inline-block mr-2\"/> Directory                     </button>                 </div>\n                 {isCreatingFile && (                     <form onSubmit={handleCreateNewFile} className=\"mt-4 p-3 bg-neutral-600/50 rounded-md\">                         <h4 className=\"text-neutral-300 text-sm font-semibold mb-2\">New File in {currentDir === '/' ? '/' : currentDir + '/'}</h4>                         <div className=\"mb-2\">                             <label htmlFor=\"newFileName\" className=\"block text-neutral-400 text-xs font-semibold mb-1\">File Name:</label>                             <input                                 id=\"newFileName\"                                 type=\"text\"                                 className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"                                 value={newFileName}                                 onChange={(e) => setNewFileName(e.target.value)}                                 placeholder=\"e.g., my_script.js\"                                 disabled={isSavingFile}                                 required                             />                         </div>                          <div className=\"mb-2\">                             <label htmlFor=\"newFileContent\" className=\"block text-neutral-400 text-xs font-semibold mb-1\">Initial Content:</label>                              <textarea                                 id=\"newFileContent\"                                 className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 font-mono text-xs\"                                 value={newFileContent}                                 onChange={(e) => setNewFileContent(e.target.value)}                                 rows={4}                                 disabled={isSavingFile}                              />                         </div>                         <div className=\"flex gap-4\">                             <button                                 type=\"submit\"                                 className=\"px-6 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"                                 disabled={isSavingFile || !newFileName.trim()}                             >                                 {isSavingFile ? 'Creating...' : 'Create File'}                             </button>                              <button                                 type=\"button\"                                 onClick={() => { setIsCreatingFile(false); setNewFileName(''); setNewFileContent(''); setError(null); }}                                 className=\"px-6 py-2 bg-neutral-600 text-white font-semibold rounded-md hover:bg-neutral-700 transition\"                                 disabled={isSavingFile}                             >                                 Cancel                             </button>                         </div>                     </form>                 )}\n                 isCreatingDirectory && (                     <form onSubmit={handleCreateNewDirectory} className=\"mt-4 p-3 bg-neutral-600/50 rounded-md\">                         <h4 className=\"text-neutral-300 text-sm font-semibold mb-2\">New Directory in {currentDir === '/' ? '/' : currentDir + '/'}</h4>                         <div className=\"mb-2\">                             <label htmlFor=\"newDirName\" className=\"block text-neutral-400 text-xs font-semibold mb-1\">Directory Name:</label>                             <input                                 id=\"newDirName\"                                 type=\"text\"                                 className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"                                 value={newDirName}                                 onChange={(e) => setNewDirName(e.target.value)}                                 placeholder=\"e.g., my_folder\"                                 disabled={isSavingFile}                                 required                             />                         </div>                         <div className=\"flex gap-4\">                             <button                                 type=\"submit\"                                 className=\"px-6 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"                                 disabled={isSavingFile || !newDirName.trim()}                             >                                 {isSavingFile ? 'Creating...' : 'Create Directory'}                             </button>                              <button                                 type=\"button\"                                 onClick={() => { setIsCreatingDirectory(false); setNewDirName(''); setError(null); }}                                 className=\"px-6 py-2 bg-neutral-600 text-white font-semibold rounded-md hover:bg-neutral-700 transition\"                                 disabled={isSavingFile}                             >                                 Cancel                             </button>                         </div>                     </form>                 )}\n                 {error && !isSavingFile && !viewingFile && ( // Show create error only after it finishes and not viewing file\n                     <p className=\"text-red-400 text-sm mt-4\">Error: {error}</p>                 )}             </div>\n        )}\n\n        {/* File/Directory List */}        {!viewingFile && ( // Only show list when not viewing a file\n             <div className=\"p-4 bg-neutral-700/50 rounded-lg\">                 <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Contents of: {currentDir}</h3>                 {currentDir !== '/' && (                     <button                         className=\"mb-4 px-3 py-1 text-sm bg-neutral-600 text-white rounded hover:bg-neutral-700 transition\"                         onClick={handleGoBack}                         disabled={loading}                     >                         <ArrowLeft size={16} className=\"inline-block mr-1\"/> Go Back                     </button>                 )}                 {loading && !isSavingFile ? ( // Show loading only if not currently saving\n                   <p className=\"text-neutral-400\">Loading entries...</p>                 ) : error && !isCreatingFile && !isCreatingDirectory ? ( // Show main error if not in create mode\n                   <p className=\"text-red-400\">Error: {error}</p>                 ) : entries.length === 0 && currentDir !== '/' ? ( // Show message if directory is empty\n                   <p className=\"text-neutral-400\">This directory is empty.</p>                 ) : entries.length === 0 && currentDir === '/' ? ( // Show message if base directory is empty\n                    <p className=\"text-neutral-400\">No files or directories found yet. Create one above.</p>                 ) : (                   <ul className=\"space-y-3\">                     {entries.map((entryName) => {                         const entryPath = path.join(currentDir, entryName);                         // Simple heuristic for file/directory icon                         const isDirectory = !path.extname(entryName); // Assume no extension means directory                         const Icon = isDirectory ? Folder : FileText;\n                         return (                           <li key={entryName} className=\"bg-neutral-600/50 p-3 rounded-md border-l-4 border-blue-500 flex justify-between items-center\">                             <div className=\"flex items-center gap-3 cursor-pointer\" onClick={() => handleEntryClick(entryName)}>                                 <Icon size={20} className=\"text-blue-400\"/>                                 <span className=\"text-neutral-300 font-semibold\">{entryName}</span>                             </div>                             {/* Actions (only for files in MVP) */}                             {!isDirectory && (                                 <div className=\"flex gap-2\">                                     {/* Edit/View Button */}                                     <button                                        className=\"px-3 py-1 text-xs bg-yellow-600 text-white rounded hover:bg-yellow-700 transition\"                                        onClick={() => fetchFileContent(entryPath)} // Open file for viewing/editing                                        disabled={isSavingFile}                                     >                                         <Edit size={16} className=\"inline-block mr-1\"/> Edit                                     </button>                                      {/* Delete Button */}                                     <button                                        className=\"px-3 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"                                        onClick={() => handleDeleteFile(entryPath)}                                        disabled={isSavingFile}                                     >                                         <Trash2 size={16} className=\"inline-block mr-1\"/> Delete                                     </button>                                 </div>                             )}                              {/* TODO: Add actions for directories (e.g., Delete Directory) */}                           </li>                         );                     })}                   </ul>                 )}             </div>\n        )}\n\n      </div>\n    </div>\n  );\n};\n\nexport default Files;\n"(__makeTemplateObject([""], [""]));
