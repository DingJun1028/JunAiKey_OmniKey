```sql
-- supabase/migrations/09_create_evolutionary_insights_table.sql
-- Create the evolutionary_insights table to store insights generated by the Evolution Engine

-- Enable uuid-ossp extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Drop the old table if it exists (only during development/migration testing)
-- DROP TABLE IF EXISTS public.evolutionary_insights;

CREATE TABLE public.evolutionary_insights (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id uuid REFERENCES auth.users (id) ON DELETE CASCADE NOT NULL, -- Link to the user the insight is for
  type text NOT NULL, -- 'automation_opportunity', 'task_failure_diagnosis', 'skill_suggestion', 'optimization_recommendation', etc.
  details jsonb, -- Specific details of the insight (e.g., pattern found, task ID, suggested action)
  timestamp timestamp with time zone DEFAULT now() NOT NULL,
  -- --- Modified: Replace 'dismissed' boolean with 'status' text field ---
  -- dismissed boolean DEFAULT false NOT NULL, -- Has the user dismissed this insight? (Old)
  status text NOT NULL DEFAULT 'pending', -- 'pending', 'actioned', 'dismissed', 'ignored'
  -- --- End Modified ---
  -- TODO: Add action_taken status, related_action_id (if automated/acted upon)
  -- --- New: Add language field ---
  language text -- ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the insight details/message
  -- --- End New ---
);

-- Optional: Add indexes
CREATE INDEX idx_evolutionary_insights_user_id ON public.evolutionary_insights (user_id);
CREATE INDEX idx_evolutionary_insights_timestamp ON public.evolutionary_insights (timestamp);
CREATE INDEX idx_evolutionary_insights_type ON public.evolutionary_insights (type);
-- --- New: Add index for status ---
CREATE INDEX idx_evolutionary_insights_status ON public.evolutionary_insights (status);
-- --- End New ---


-- Optional: Set up Row Level Security (RLS)
ALTER TABLE public.evolutionary_insights ENABLE ROW LEVEL SECURITY;

-- Example RLS policies (adjust based on your auth requirements)
-- Users should only be able to read/manage their own insights.
CREATE POLICY "Enable read access for users on their own insights" ON public.evolutionary_insights FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Enable insert for authenticated users on their own insights" ON public.evolutionary_insights FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Enable update for users on their own insights" ON public.evolutionary_insights FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Enable delete for users on their own insights" ON public.evolutionary_insights FOR DELETE USING (auth.uid() = user_id);
```