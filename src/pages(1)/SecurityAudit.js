var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// src/pages/SecurityAudit.tsx\n// Security Audit Page\n// Displays security-relevant system events and user actions (audit logs).\n// --- New: Create a page to display security audit logs --\n// --- New: Add Realtime Updates for security events --\n// --- Modified: Display security events from LoggingService --\n// --- Modified: Enhance display of UserAction data as personal usage logs --\n// --- Modified: Add search functionality for User Actions --\n// --- Modified: Add Copy button for log/action details --\n// --- New: Add AI Analysis button for log/action entries --\n// --- New: Add AI Analysis result modal --\n// --- New: Add Import/Export/Share placeholders --\n\nimport React, { useEffect, useState } from 'react';\nimport { LoggingService } from '../core/logging/LoggingService'; // To fetch logs\nimport { AuthorityForgingEngine } from '../core/authority/AuthorityForgingEngine'; // To fetch and search user actions\nimport { WisdomSecretArt } from '../core/wisdom/WisdomSecretArt'; // To analyze log entries\nimport { SystemEvent, UserAction } from '../interfaces'; // Import SystemEvent type, UserAction\nimport { Shield, Info, AlertTriangle, XCircle, CheckCircle, Loader2, Clock, User as UserIcon, GitCommit, MessageSquare, Zap, BookKey, Target, Cloud, Copy, Brain, FileUp, FileDown, Share2, Search } from 'lucide-react'; // Import icons including Copy, Brain, FileUp, FileDown, Share2, Search\n\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst loggingService: LoggingService = window.systemContext?.loggingService; // The Logging Service (\u65E5\u8A8C\u670D\u52D9) module\nconst authorityForgingEngine: AuthorityForgingEngine = window.systemContext?.authorityForgingEngine; // The Authority Forging (\u6B0A\u80FD\u935B\u9020) pillar\nconst wisdomSecretArt: WisdomSecretArt = window.systemContext?.wisdomSecretArt; // The Wisdom Secret Art (\u667A\u6167\u6C89\u6FB1\u79D8\u8853) pillar\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\n\n\nconst SecurityAudit: React.FC = () => {\n  const [auditLogs, setAuditLogs] = useState<SystemEvent[]>([]); // State to hold audit logs\n  const [userActions, setUserActions] = useState<UserAction[]>([]); // New state to hold user actions\n  const [loadingLogs, setLoadingLogs] = useState(true);\n  const [loadingActions, setLoadingActions] = useState(true); // New loading state for actions\n  const [error, setError] = useState<string | null>(null);\n  const [expandedLogs, setExpandedLogs] = useState<Record<string, boolean>>({}); // State to track expanded logs\n  const [expandedActions, setExpandedActions] = useState<Record<string, boolean>>({}); // New state to track expanded actions\n\n  // --- New: State for User Action Search ---\n  const [actionSearchTerm, setActionSearchTerm] = useState('');\n  const [isSearchingActions, setIsSearchingActions] = useState(false);\n  // --- End New ---\n\n  // --- New: State for AI Analysis Modal ---\n  const [showAnalysisModal, setShowAnalysisModal] = useState(false);\n  const [analyzingEntry, setAnalyzingEntry] = useState<UserAction | SystemEvent | null>(null); // The entry being analyzed\n  const [analysisResult, setAnalysisResult] = useState<any>(null); // The result of the AI analysis\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisError, setAnalysisError] = useState<string | null>(null);\n  // --- End New ---\n\n\n  const fetchAuditLogs = async () => {\n       const userId = systemContext?.currentUser?.id;\n       if (!loggingService || !userId) {\n            setError(\"LoggingService module not initialized or user not logged in.\");\n            setLoadingLogs(false);\n            return;\n        }\n      setLoadingLogs(true);\n      setError(null); // Clear main error when fetching\n      try {\n          // Fetch recent security-relevant system events from LoggingService\n          // LoggingService.getRecentLogs can filter by user and type/severity\n          // We need to fetch events with type 'security_event_recorded'\n          const logs = await loggingService.getRecentLogs(100, userId, undefined); // Get recent 100 logs for the user\n          // Filter specifically for security events if LoggingService returns all types\n          const securityEvents = logs.filter(log => log.type === 'security_event_recorded');\n\n          // Sort by timestamp descending (newest first)\n          securityEvents.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n\n          setAuditLogs(securityEvents as SystemEvent[]); // Cast to SystemEvent[]\n      } catch (err: any) {\n          console.error('Error fetching audit logs:', err);\n          setError("], ["typescript\n// src/pages/SecurityAudit.tsx\n// Security Audit Page\n// Displays security-relevant system events and user actions (audit logs).\n// --- New: Create a page to display security audit logs --\n// --- New: Add Realtime Updates for security events --\n// --- Modified: Display security events from LoggingService --\n// --- Modified: Enhance display of UserAction data as personal usage logs --\n// --- Modified: Add search functionality for User Actions --\n// --- Modified: Add Copy button for log/action details --\n// --- New: Add AI Analysis button for log/action entries --\n// --- New: Add AI Analysis result modal --\n// --- New: Add Import/Export/Share placeholders --\n\nimport React, { useEffect, useState } from 'react';\nimport { LoggingService } from '../core/logging/LoggingService'; // To fetch logs\nimport { AuthorityForgingEngine } from '../core/authority/AuthorityForgingEngine'; // To fetch and search user actions\nimport { WisdomSecretArt } from '../core/wisdom/WisdomSecretArt'; // To analyze log entries\nimport { SystemEvent, UserAction } from '../interfaces'; // Import SystemEvent type, UserAction\nimport { Shield, Info, AlertTriangle, XCircle, CheckCircle, Loader2, Clock, User as UserIcon, GitCommit, MessageSquare, Zap, BookKey, Target, Cloud, Copy, Brain, FileUp, FileDown, Share2, Search } from 'lucide-react'; // Import icons including Copy, Brain, FileUp, FileDown, Share2, Search\n\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst loggingService: LoggingService = window.systemContext?.loggingService; // The Logging Service (\\u65e5\\u8a8c\\u670d\\u52d9) module\nconst authorityForgingEngine: AuthorityForgingEngine = window.systemContext?.authorityForgingEngine; // The Authority Forging (\\u6b0a\\u80fd\\u935b\\u9020) pillar\nconst wisdomSecretArt: WisdomSecretArt = window.systemContext?.wisdomSecretArt; // The Wisdom Secret Art (\\u667a\\u6167\\u6c89\\u6fb1\\u79d8\\u8853) pillar\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\n\n\nconst SecurityAudit: React.FC = () => {\n  const [auditLogs, setAuditLogs] = useState<SystemEvent[]>([]); // State to hold audit logs\n  const [userActions, setUserActions] = useState<UserAction[]>([]); // New state to hold user actions\n  const [loadingLogs, setLoadingLogs] = useState(true);\n  const [loadingActions, setLoadingActions] = useState(true); // New loading state for actions\n  const [error, setError] = useState<string | null>(null);\n  const [expandedLogs, setExpandedLogs] = useState<Record<string, boolean>>({}); // State to track expanded logs\n  const [expandedActions, setExpandedActions] = useState<Record<string, boolean>>({}); // New state to track expanded actions\n\n  // --- New: State for User Action Search ---\n  const [actionSearchTerm, setActionSearchTerm] = useState('');\n  const [isSearchingActions, setIsSearchingActions] = useState(false);\n  // --- End New ---\n\n  // --- New: State for AI Analysis Modal ---\n  const [showAnalysisModal, setShowAnalysisModal] = useState(false);\n  const [analyzingEntry, setAnalyzingEntry] = useState<UserAction | SystemEvent | null>(null); // The entry being analyzed\n  const [analysisResult, setAnalysisResult] = useState<any>(null); // The result of the AI analysis\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisError, setAnalysisError] = useState<string | null>(null);\n  // --- End New ---\n\n\n  const fetchAuditLogs = async () => {\n       const userId = systemContext?.currentUser?.id;\n       if (!loggingService || !userId) {\n            setError(\"LoggingService module not initialized or user not logged in.\");\n            setLoadingLogs(false);\n            return;\n        }\n      setLoadingLogs(true);\n      setError(null); // Clear main error when fetching\n      try {\n          // Fetch recent security-relevant system events from LoggingService\n          // LoggingService.getRecentLogs can filter by user and type/severity\n          // We need to fetch events with type 'security_event_recorded'\n          const logs = await loggingService.getRecentLogs(100, userId, undefined); // Get recent 100 logs for the user\n          // Filter specifically for security events if LoggingService returns all types\n          const securityEvents = logs.filter(log => log.type === 'security_event_recorded');\n\n          // Sort by timestamp descending (newest first)\n          securityEvents.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n\n          setAuditLogs(securityEvents as SystemEvent[]); // Cast to SystemEvent[]\n      } catch (err: any) {\n          console.error('Error fetching audit logs:', err);\n          setError("]));
Failed;
to;
load;
audit;
logs: $;
{
    err.message;
}
");\n      } finally {\n          setLoadingLogs(false);\n      }\n  };\n\n   // --- New: Fetch User Actions ---\n   const fetchUserActions = async (query = '') => {\n       const userId = systemContext?.currentUser?.id;\n       if (!authorityForgingEngine || !userId) {\n           // setError(\"AuthorityForgingEngine module not initialized or user not logged in.\"); // Don't set main error for just actions\n           setLoadingActions(false);\n           return;\n       }\n       setLoadingActions(true);\n       setGitOpError(null); // Clear Git op error when viewing files\n       try {\n           // Fetch or search user actions for the current user (Part of \u96D9\u5410\u540C\u6B65\u9818\u57DF)\n           const actions = query\n               ? await authorityForgingEngine.searchUserActions(query, userId, 100) // Search if query provided\n               : await authorityForgingEngine.getRecentActions(userId, 100); // Get recent if no query\n           setUserActions(actions);\n       } catch (err: any) {\n           console.error('Error fetching user actions:', err);\n           // setError(";
Failed;
to;
load;
user;
actions: $;
{
    err.message;
}
"); // Don't set main error for just actions\n           setUserActions([]); // Clear actions on error\n       } finally {\n           setLoadingActions(false);\n           setIsSearchingActions(false); // Reset search state\n       }\n   };\n   // --- End New ---\n\n\n  useEffect(() => {\n    // Fetch data when the component mounts or when the user changes\n    if (systemContext?.currentUser?.id) {\n        fetchAuditLogs(); // Fetch logs on initial load\n        // --- New: Fetch User Actions on initial load ---\n        fetchUserActions();\n        // --- End New ---\n    }\n\n    // --- New: Subscribe to realtime updates for security events and user actions ---\n    let unsubscribeSecurityEventRecorded: (() => void) | undefined;\n    let unsubscribeUserActionRecorded: (() => void) | undefined; // New: Subscribe to user action events\n\n\n    if (loggingService?.context?.eventBus) { // Check if LoggingService and its EventBus are available\n        const eventBus = loggingService.context.eventBus;\n        const userId = systemContext?.currentUser?.id;\n\n        // Subscribe to security event recorded events\n        unsubscribeSecurityEventRecorded = eventBus.subscribe('security_event_recorded', (payload: SystemEvent) => {\n             // Add the new event if it's for the current user\n             if (payload.user_id === userId) {\n                 console.log('SecurityAudit page received security_event_recorded event:', payload);\n                 // Add the new event, keep sorted by timestamp (newest first), and limit the list size\n                 setAuditLogs(prevLogs => [\n                     payload,\n                     ...prevLogs.filter(log => log.id !== payload.id) // Ensure no duplicates\n                 ].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).slice(0, 100)); // Keep only the latest 100\n             }\n         });\n\n        // --- New: Subscribe to user action recorded events ---\n        unsubscribeUserActionRecorded = eventBus.subscribe('user_action_recorded', (payload: UserAction) => {\n             if (payload.user_id === userId) {\n                 console.log('SecurityAudit page received user_action_recorded event:', payload);\n                 // Add the new action, keep sorted by timestamp (newest first), and limit the list size\n                 // Only update if not currently searching, to avoid interfering with search results\n                 if (!isSearchingActions) {\n                     setUserActions(prevActions => [\n                         payload,\n                         ...prevActions.filter(action => action.id !== payload.id) // Ensure no duplicates if an update event is also published\n                     ].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()).slice(0, 100)); // Keep only the latest 100\n                 } else {\n                     console.log('SecurityAudit page received user_action_recorded event while searching. Deferring UI update.');\n                 }\n             }\n         });\n        // --- End New ---\n    }\n    // --- End New ---\n\n\n    return () => {\n        // Unsubscribe on component unmount\n        unsubscribeSecurityEventRecorded?.();\n        // --- New: Unsubscribe from user action events ---\n        unsubscribeUserActionRecorded?.();\n        // --- End New ---\n    };\n\n  }, [systemContext?.currentUser?.id, loggingService, authorityForgingEngine, isSearchingActions]); // Add authorityForgingEngine and isSearchingActions to dependencies\n\n\n    const getSeverityColor = (severity: SystemEvent['severity']) => {\n        switch (severity) {\n            case 'info': return 'border-blue-500 text-blue-400';\n            case 'warning': return 'border-yellow-500 text-yellow-400';\n            case 'error': return 'border-red-500 text-red-400';\n            default: return 'border-neutral-500 text-neutral-400';\n        }\n    };\n\n     const getSeverityIcon = (severity: SystemEvent['severity']) => {\n        switch (severity) {\n            case 'info': return <Info size={16} className=\"text-blue-400\"/>;\n            case 'warning': return <AlertTriangle size={16} className=\"text-yellow-400\"/>;\n            case 'error': return <XCircle size={16} className=\"text-red-400\"/>;\n            default: return <Info size={16} className=\"text-neutral-400\"/>;\n        }\n    };\n\n    // --- New: Helper to get icon for User Action type ---\n    const getUserActionIcon = (type: UserAction['type']) => {\n        if (type.startsWith('web:chat:')) return <MessageSquare size={16} className=\"text-blue-400\"/>;\n        if (type.startsWith('web:kb:')) return <BookKey size={16} className=\"text-green-400\"/>;\n        if (type.startsWith('web:scripts:')) return <Code size={16} className=\"text-purple-400\"/>;\n        if (type.startsWith('web:tasks:')) return <Target size={16} className=\"text-orange-400\"/>;\n        if (type.startsWith('web:goals:')) return <Target size={16} className=\"text-yellow-400\"/>;\n        if (type.startsWith('web:agents:')) return <Zap size={16} className=\"text-cyan-400\"/>;\n        if (type.startsWith('web:sync:')) return <Cloud size={16} className=\"text-indigo-400\"/>;\n        if (type.startsWith('web:settings:')) return <Settings size={16} className=\"text-neutral-400\"/>;\n        if (type.startsWith('web:files:')) return <FileText size={16} className=\"text-teal-400\"/>;\n        if (type.startsWith('web:repositories:')) return <GitCommit size={16} className=\"text-pink-400\"/>;\n        if (type.startsWith('web:glossary:')) return <BookKey size={16} className=\"text-lime-400\"/>;\n        if (type.startsWith('web:collections:')) return <BookKey size={16} className=\"text-fuchsia-400\"/>;\n        if (type.startsWith('web:flows:')) return <Workflow size={16} className=\"text-violet-400\"/>;\n        // Add other UI action prefixes\n        if (type.startsWith('system:action:executed:')) return <CheckCircle size={16} className=\"text-green-400\"/>;\n        if (type.startsWith('system:action:failed:')) return <XCircle size={16} className=\"text-red-400\"/>;\n        if (type.startsWith('system:webhook:')) return <Webhook size={16} className=\"text-red-400\"/>;\n        if (type.startsWith('ability:executed:')) return <Play size={16} className=\"text-green-400\"/>;\n        if (type.startsWith('ability:execution_failed:')) return <XCircle size={16} className=\"text-red-400\"/>;\n        // Add other system action prefixes\n        return <Info size={16} className=\"text-neutral-400\"/>;\n    };\n    // --- End New ---\n\n\n    const toggleExpandLog = (logId: string) => {\n        setExpandedLogs(prevState => ({\n            ...prevState,\n            [logId]: !prevState[logId]\n        }));\n    };\n\n     // --- New: Toggle expand User Action ---\n    const toggleExpandAction = (actionId: string) => {\n        setExpandedActions(prevState => ({\n            ...prevState,\n            [actionId]: !prevState[actionId]\n        }));\n    };\n    // --- End New ---\n\n    // --- New: Handle User Action Search ---\n    const handleActionSearch = (e: React.FormEvent) => {\n        e.preventDefault();\n        const userId = systemContext?.currentUser?.id;\n        if (!authorityForgingEngine || !userId) return; // Should be protected by route, but safety check\n\n        setIsSearchingActions(true);\n        setGitOpError(null); // Clear previous errors\n        // The fetchUserActions function handles fetching based on searchTerm state\n        fetchUserActions(actionSearchTerm);\n    };\n    // --- End New ---\n\n    // --- New: Handle Copy Details ---\n    const handleCopyDetails = (details: any) => {\n        const detailsString = JSON.stringify(details, null, 2);\n        navigator.clipboard.writeText(detailsString).then(() => {\n            alert('Details copied to clipboard!');\n        }).catch(err => {\n            console.error('Failed to copy details:', err);\n            alert('Failed to copy details.');\n        });\n         // Simulate recording user action\n        const userId = systemContext?.currentUser?.id;\n        if (userId) {\n             authorityForgingEngine?.recordAction({\n                type: 'web:security_audit:copy_details',\n                details: { detailsType: typeof details, detailsLength: detailsString.length },\n                context: { platform: 'web', page: 'security_audit' },\n                user_id: userId, // Associate action with user\n            });\n        }\n    };\n    // --- End New ---\n\n    // --- New: Handle AI Analysis ---\n    const handleAIAnalysis = async (entry: UserAction | SystemEvent) => {\n        const userId = systemContext?.currentUser?.id;\n        if (!wisdomSecretArt || !userId) {\n            alert(\"WisdomSecretArt module not initialized or user not logged in.\");\n            return;\n        }\n\n        console.log(";
Attempting;
AI;
analysis;
for (entry; ; )
    : $;
{
    entry.id || entry.timestamp;
}
");\n         // Simulate recording user action\n        authorityForgingEngine?.recordAction({\n            type: 'web:security_audit:ai_analyze',\n            details: { entryId: entry.id || entry.timestamp, entryType: (entry as any).type || (entry as any).payload?.originalType },\n            context: { platform: 'web', page: 'security_audit' },\n            user_id: userId, // Associate action with user\n        });\n\n\n        setAnalyzingEntry(entry); // Set the entry being analyzed\n        setAnalysisResult(null); // Clear previous result\n        setAnalysisError(null); // Clear previous error\n        setShowAnalysisModal(true); // Show the modal\n        setIsAnalyzing(true); // Indicate analysis is in progress\n\n        try {\n            // Call WisdomSecretArt to analyze the log entry\n            const result = await wisdomSecretArt.analyzeLogEntry(entry, userId); // Pass entry and userId\n\n            console.log('AI analysis result:', result);\n            setAnalysisResult(result); // Store the result\n\n        } catch (err: any) {\n            console.error('Error during AI analysis:', err);\n            setAnalysisError(";
Failed;
to;
perform;
AI;
analysis: $;
{
    err.message;
}
");\n        } finally {\n            setIsAnalyzing(false); // Reset analyzing state\n        }\n    };\n    // --- End New ---\n\n\n   // Ensure user is logged in before rendering content\n  if (!systemContext?.currentUser) {\n       // This case should ideally be handled by ProtectedRoute, but as a fallback:\n       return (\n            <div className=\"container mx-auto p-4 flex justify-center\">\n               <div className=\"bg-neutral-800/50 p-8 rounded-lg shadow-xl w-full max-w-md text-center text-neutral-300\">\n                   <p>Please log in to view the security audit logs.</p>\n               </div>\n            </div>\n       );\n  }\n\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <div className=\"bg-neutral-800/50 p-6 rounded-lg shadow-xl\">\n        <h2 className=\"text-3xl font-bold text-blue-400 mb-6\">Activity Vault (\u6D3B\u52D5\u4FDD\u96AA\u6AC3)</h2> {/* Modified title */}\n        <p className=\"text-neutral-300 mb-8\">Review security-relevant system events and your personal usage logs. Your personal activity database.</p> {/* Modified description */}\n\n        {/* New: Import/Export/Share Placeholders */}\n        <div className=\"mb-8 p-4 bg-neutral-700/50 rounded-lg\">\n             <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Data Management</h3>\n             <div className=\"flex flex-wrap gap-4\">\n                 <button className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition disabled:opacity-50\" disabled>\n                     <FileDown size={18} className=\"inline-block mr-2\"/> Export Data (TODO)\n                 </button>\n                  <button className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition disabled:opacity-50\" disabled>\n                     <FileUp size={18} className=\"inline-block mr-2\"/> Import Data (TODO)\n                 </button>\n                  <button className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition disabled:opacity-50\" disabled>\n                     <Share2 size={18} className=\"inline-block mr-2\"/> Share Data (TODO)\n                 </button>\n             </div>\n        </div>\n        {/* End New */}\n\n        {/* Audit Log List */}\n        <div className=\"mb-8 p-4 bg-neutral-700/50 rounded-lg\"> {/* Added mb-8 */}\n            <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Recent Security Events</h3>\n            {loadingLogs ? (\n              <p className=\"text-neutral-400\">Loading audit logs...</p>\n            ) : error ? (\n                 <p className=\"text-red-400\">Error: {error}</p>\n            ) : auditLogs.length === 0 ? (\n              <p className=\"text-neutral-400\">No security audit logs found yet.</p>\n            ) : (\n              <ul className=\"space-y-4\">\n                {auditLogs.map((log) => (\n                  <li key={log.id || log.timestamp} className={";
bg - neutral - 600 / 50;
p - 4;
rounded - md;
border - l - 4;
$;
{
    getSeverityColor(log.severity);
}
"}> {/* Use timestamp as fallback key */}\n                    <div className=\"flex justify-between items-center mb-2\">\n                        <div className=\"flex items-center gap-3\">\n                            {getSeverityIcon(log.severity)}\n                            <h4 className={";
font - semibold;
$;
{
    getSeverityColor(log.severity);
}
"}>{log.type.replace(/_/g, ' ').toUpperCase()}</h4> {/* Display event type */}\n                        </div>\n                         {/* New: Actions for log entries */}\n                         <div className=\"flex gap-2\">\n                             {/* Copy Details Button */}\n                             <button\n                                 className=\"px-3 py-1 text-xs bg-neutral-600 text-white rounded hover:bg-neutral-700 transition\"\n                                 onClick={() => handleCopyDetails(log.payload)}\n                             >\n                                 <Copy size={14} className=\"inline-block mr-1\"/> Copy\n                             </button>\n                              {/* AI Analyze Button */}\n                             <button\n                                 className=\"px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                 onClick={() => handleAIAnalysis(log)}\n                                 disabled={isAnalyzing}\n                             >\n                                 {isAnalyzing && analyzingEntry?.id === log.id ? <Loader2 size={14} className=\"inline-block mr-1 animate-spin\"/> : <Brain size={14} className=\"inline-block mr-1\"/>)}\n                                 Analyze\n                             </button>\n                             {/* Expand/Collapse Button */}\n                             <button onClick={() => toggleExpandLog(log.id || log.timestamp)} className=\"text-neutral-400 hover:text-white transition\">\n                                {expandedLogs[log.id || log.timestamp] ? <ChevronUp size={20} /> : <ChevronDown size={20} />}\n                             </button>\n                         </div>\n                         {/* End New */}\n                    </div>\n                    <p className=\"text-neutral-300 text-sm mb-2\">Message: {log.payload?.details?.message || log.payload?.error || log.payload?.details?.error || 'No message.'}</p> {/* Display relevant message/error */}\n                    <small className=\"text-neutral-400 text-xs block mt-1\">\n                        ID: {log.id || 'N/A'} | Severity: {log.severity?.toUpperCase() || 'N/A'} | Timestamp: {new Date(log.timestamp).toLocaleString()}\n                         {log.user_id && " | User;
$;
{
    log.user_id;
}
"}\n                    </small>\n\n                    {/* Log Details (Collapsible) */}\n                    {expandedLogs[log.id || log.timestamp] && ((\n                        <div className=\"mt-4 border-t border-neutral-600 pt-4\">\n                            <h5 className=\"text-neutral-300 text-sm font-semibold mb-2\">Full Payload:</h5>\n                            <div className=\"bg-neutral-800 p-3 rounded-md text-neutral-200 text-xs font-mono overflow-x-auto max-h-48 scrollbar-thin scrollbar-thumb-neutral-600\">\n                                {/* Display full payload JSON */}\n                                <pre>{JSON.stringify(log.payload, null, 2)}</pre>\n                            </div>\n                        </div>\n                    ))}\n                  </li>\n                ))}\n              </ul>\n            )}\n        </div>\n\n        {/* New: Personal Usage Log List (User Actions) */}\n        <div className=\"p-4 bg-neutral-700/50 rounded-lg\"> {/* Added mb-8 */}\n            <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Recent Personal Usage Logs</h3>\n            {/* New: Search Form for User Actions */}\n            <form onSubmit={handleActionSearch} className=\"mb-4 flex gap-4 items-center\">\n              <input\n                id=\"action-search\"\n                type=\"text\"\n                className=\"flex-grow p-2 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                value={actionSearchTerm}\n                onChange={(e) => setActionSearchTerm(e.target.value)}\n                placeholder=\"Search usage logs...\"\n                disabled={isSearchingActions}\n              />\n              <button\n                type=\"submit\"\n                className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                disabled={isSearchingActions}\n              >\n                {isSearchingActions ? <Loader2 size={18} className=\"animate-spin\"/> : <Search size={18} className=\"inline-block mr-1\"/>)}\n                Search\n              </button>\n               {actionSearchTerm && (\n                  <button\n                      type=\"button\"\n                      onClick={() => { setActionSearchTerm(''); fetchUserActions(''); }} // Clear search and refetch all\n                      className=\"px-6 py-2 bg-neutral-600 text-white font-semibold rounded-md hover:bg-neutral-700 transition\"\n                      disabled={isSearchingActions}\n                  >\n                      Clear\n                  </button>\n               )}\n            </form>\n            {/* End New */}\n            {loadingActions ? (\n                <p className=\"text-neutral-400\">Loading usage logs...</p>\n            ) : userActions.length === 0 ? (\n                <p className=\"text-neutral-400\">{actionSearchTerm ? 'No usage logs found matching your search.' : 'No recent usage logs found.'}</p>\n            ) : ((\n                <ul className=\"space-y-4\">\n                    {userActions.map((action) => (\n                        <li key={action.id} className={";
bg - neutral - 600 / 50;
p - 4;
rounded - md;
border - l - 4;
border - orange - 500(__makeTemplateObject(["}> {/* Use orange border for usage logs */}\n                            <div className=\"flex justify-between items-center mb-2\">\n                                <div className=\"flex items-center gap-3\">\n                                    {getUserActionIcon(action.type)} {/* Use action type icon */}\n                                    <h4 className={"], ["}> {/* Use orange border for usage logs */}\n                            <div className=\"flex justify-between items-center mb-2\">\n                                <div className=\"flex items-center gap-3\">\n                                    {getUserActionIcon(action.type)} {/* Use action type icon */}\n                                    <h4 className={"]));
font - semibold;
text - orange - 200(__makeTemplateObject(["}>Action Type: {action.type.replace(/_/g, ' ').toUpperCase()}</h4> {/* Display action type */}\n                                </div>\n                                {/* New: Actions for user actions */}\n                                <div className=\"flex gap-2\">\n                                     {/* Copy Details Button */}\n                                     <button\n                                         className=\"px-3 py-1 text-xs bg-neutral-600 text-white rounded hover:bg-neutral-700 transition\"\n                                         onClick={() => handleCopyDetails({ details: action.details, context: action.context })}\n                                     >\n                                         <Copy size={14} className=\"inline-block mr-1\"/> Copy\n                                     </button>\n                                      {/* AI Analyze Button */}\n                                     <button\n                                         className=\"px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                         onClick={() => handleAIAnalysis(action)}\n                                         disabled={isAnalyzing}\n                                     >\n                                         {isAnalyzing && analyzingEntry?.id === action.id ? <Loader2 size={14} className=\"inline-block mr-1 animate-spin\"/> : <Brain size={14} className=\"inline-block mr-1\"/>)}\n                                         Analyze\n                                     </button>\n                                     {/* Expand/Collapse Button */}\n                                     <button onClick={() => toggleExpandAction(action.id)} className=\"text-neutral-400 hover:text-white transition\">\n                                        {expandedActions[action.id] ? <ChevronUp size={20} /> : <ChevronDown size={20} />}\n                                     </button>\n                                </div>\n                                {/* End New */}\n                            </div>\n                            <small className=\"text-neutral-400 text-xs block mt-1\">\n                                ID: {action.id} | Timestamp: {new Date(action.timestamp).toLocaleString()}\n                                 {action.user_id && "], ["}>Action Type: {action.type.replace(/_/g, ' ').toUpperCase()}</h4> {/* Display action type */}\n                                </div>\n                                {/* New: Actions for user actions */}\n                                <div className=\"flex gap-2\">\n                                     {/* Copy Details Button */}\n                                     <button\n                                         className=\"px-3 py-1 text-xs bg-neutral-600 text-white rounded hover:bg-neutral-700 transition\"\n                                         onClick={() => handleCopyDetails({ details: action.details, context: action.context })}\n                                     >\n                                         <Copy size={14} className=\"inline-block mr-1\"/> Copy\n                                     </button>\n                                      {/* AI Analyze Button */}\n                                     <button\n                                         className=\"px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                         onClick={() => handleAIAnalysis(action)}\n                                         disabled={isAnalyzing}\n                                     >\n                                         {isAnalyzing && analyzingEntry?.id === action.id ? <Loader2 size={14} className=\"inline-block mr-1 animate-spin\"/> : <Brain size={14} className=\"inline-block mr-1\"/>)}\n                                         Analyze\n                                     </button>\n                                     {/* Expand/Collapse Button */}\n                                     <button onClick={() => toggleExpandAction(action.id)} className=\"text-neutral-400 hover:text-white transition\">\n                                        {expandedActions[action.id] ? <ChevronUp size={20} /> : <ChevronDown size={20} />}\n                                     </button>\n                                </div>\n                                {/* End New */}\n                            </div>\n                            <small className=\"text-neutral-400 text-xs block mt-1\">\n                                ID: {action.id} | Timestamp: {new Date(action.timestamp).toLocaleString()}\n                                 {action.user_id && "])) | User;
$;
{
    action.user_id;
}
"}\n                            </small>\n\n                            {/* Action Details (Collapsible) */}\n                            {expandedActions[action.id] && ((\n                                <div className=\"mt-4 border-t border-neutral-600 pt-4\">\n                                    {action.details && Object.keys(action.details).length > 0 && (\n                                        <div className=\"mb-4\">\n                                            <h5 className=\"text-neutral-300 text-sm font-semibold mb-2\">Details:</h5>\n                                            <div className=\"bg-neutral-800 p-3 rounded-md text-neutral-200 text-xs font-mono overflow-x-auto max-h-24 scrollbar-thin scrollbar-thumb-neutral-600\">\n                                                <pre>{JSON.stringify(action.details, null, 2)}</pre>\n                                            </div>\n                                        </div>\n                                    )}\n                                     {action.context && Object.keys(action.context).length > 0 && (\n                                        <div className=\"mb-4\">\n                                            <h5 className=\"text-neutral-300 text-sm font-semibold mb-2\">Context:</h5>\n                                            <div className=\"bg-neutral-800 p-3 rounded-md text-neutral-200 text-xs font-mono overflow-x-auto max-h-24 scrollbar-thin scrollbar-thumb-neutral-600\">\n                                                <pre>{JSON.stringify(action.context, null, 2)}</pre>\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            ))}\n                        </li>\n                    ))}\n                </ul>\n            ))}\n        </div>\n        {/* End New */}\n\n        {/* New: AI Analysis Result Modal */}\n        {showAnalysisModal && analyzingEntry && ((\n             <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\">\n                 <div className=\"bg-neutral-800 p-8 rounded-lg shadow-xl w-full max-w-md\">\n                     <div className=\"flex justify-between items-center mb-4\">\n                         <h3 className=\"text-xl font-semibold text-blue-300\">AI Analysis Result</h3>\n                         <button\n                             type=\"button\"\n                             onClick={() => { setShowAnalysisModal(false); setAnalyzingEntry(null); setAnalysisResult(null); setAnalysisError(null); }}\n                             className=\"text-neutral-400 hover:text-white transition\"\n                             disabled={isAnalyzing}\n                         >\n                             <XCircle size={24} />\n                         </button>\n                     </div>\n                     {isAnalyzing ? (\n                         <div className=\"flex justify-center items-center py-8\">\n                             <Loader2 size={32} className=\"animate-spin text-blue-400\"/>\n                             <span className=\"text-neutral-400 ml-3\">Analyzing...</span>\n                         </div>\n                     ) : analysisError ? (\n                         <div className=\"text-red-400 text-sm mb-4\">\n                             <p>Error: {analysisError}</p>\n                         </div>\n                     ) : analysisResult ? (\n                         <div className=\"space-y-4 text-neutral-300 text-sm\">\n                             <div>\n                                 <h4 className=\"font-semibold mb-1\">Title:</h4>\n                                 <p>{analysisResult.title}</p>\n                             </div>\n                             <div>\n                                 <h4 className=\"font-semibold mb-1\">Summary:</h4>\n                                 <p>{analysisResult.summary}</p>\n                             </div>\n                             {analysisResult.keywords && analysisResult.keywords.length > 0 && (\n                                 <div>\n                                     <h4 className=\"font-semibold mb-1\">Keywords:</h4>\n                                     <p>{analysisResult.keywords.join(', ')}</p>\n                                 </div>\n                             )}\n                             {/* TODO: Add buttons to create KB entry, task, etc. from analysis */}\n                         </div>\n                     ) : (\n                         <p className=\"text-neutral-400\">No analysis result available.</p>\n                     )}\n                     <div className=\"flex justify-end mt-6\">\n                         <button\n                             type=\"button\"\n                             onClick={() => { setShowAnalysisModal(false); setAnalyzingEntry(null); setAnalysisResult(null); setAnalysisError(null); }}\n                             className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition\"\n                             disabled={isAnalyzing}\n                         >\n                             Close\n                         </button>\n                     </div>\n                 </div>\n             </div>\n        ))}\n        {/* End New */}\n\n      </div>\n    </div>\n  );\n};\n\nexport default SecurityAudit;\n"(__makeTemplateObject([""], [""]));
