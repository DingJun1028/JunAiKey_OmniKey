var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// packages/@junai/sdk/src/auth.ts\n// Auth Client Module for SDK\n// Provides methods for user authentication (login, signup, logout, get user).\n\nimport { SupabaseClient, User as SupabaseUser, Session } from '@supabase/supabase-js';\nimport { User } from '../../../src/interfaces'; // Import User interface from main project\n\n/**\n * Maps a Supabase User object to the internal User interface.\n * Includes data from the 'profiles' table if available.\n * @param supabaseUser The user object from Supabase Auth.\n * @param profileData Optional profile data from the 'profiles' table.\n * @returns The mapped User object.\n */\nfunction mapSupabaseUserToUserInterface(supabaseUser: SupabaseUser, profileData?: any): User {\n    return {\n        id: supabaseUser.id,\n        email: supabaseUser.email || '',\n        name: profileData?.full_name || supabaseUser.user_metadata?.name || supabaseUser.email, // Use profile name, then metadata name, then email\n        avatarUrl: profileData?.avatar_url || supabaseUser.user_metadata?.avatar_url,\n        role: supabaseUser.role || 'authenticated', // Default role\n        rune_capacity: profileData?.rune_capacity, // Include rune capacity from profile\n        // Add other profile fields here\n        created_at: supabaseUser.created_at, // Include creation timestamp from auth.users\n        last_sign_in_at: supabaseUser.last_sign_in_at, // Include last sign in timestamp\n        language_preference: profileData?.language_preference, // Include language preference\n    } as User; // Cast to User interface\n}\n\n\nexport class AuthClient {\n  private supabaseClient: SupabaseClient;\n\n  constructor(supabaseClient: SupabaseClient) {\n    this.supabaseClient = supabaseClient;\n  }\n\n  /**\n   * Handles user login with email and password.\n   * @param email User email.\n   * @param password User password.\n   * @returns Promise<{ user: User | null, session: Session | null }> The authenticated user and session, or null on failure.\n   */\n  async signInWithPassword(email: string, password: string): Promise<{ user: User | null, session: Session | null }> {\n    try {\n      const { data, error } = await this.supabaseClient.auth.signInWithPassword({ email, password });\n\n      if (error) {\n        console.error('SDK AuthClient signInWithPassword failed:', error.message);\n        throw error; // Re-throw the error\n      }\n\n      // Fetch profile data if user exists\n      let profileData = null;\n      if (data.user) {\n           try {\n               const { data: profile, error: profileError } = await this.supabaseClient\n                   .from('profiles')\n                   .select('*')\n                   .eq('id', data.user.id)\n                   .single();\n               if (profileError && profileError.code !== 'PGRST116') throw profileError; // Ignore 'not found' error\n               profileData = profile;\n           } catch (profileFetchError: any) {\n               console.error('SDK AuthClient error fetching user profile after login:', profileFetchError.message);\n           }\n      }\n\n\n      return {\n          user: data.user ? mapSupabaseUserToUserInterface(data.user, profileData) : null,\n          session: data.session,\n      };\n\n    } catch (error: any) {\n      console.error('SDK AuthClient error during signInWithPassword:', error.message);\n      throw error; // Re-throw the error\n    }\n  }\n\n   /**\n   * Handles user signup with email and password.\n   * @param email User email.\n   * @param password User password.\n   * @returns Promise<{ user: User | null, session: Session | null }> The signed-up user and session, or null on failure.\n   */\n  async signUpWithPassword(email: string, password: string): Promise<{ user: User | null, session: Session | null }> {\n    try {\n      const { data, error } = await this.supabaseClient.auth.signUp({ email, password });\n\n      if (error) {\n        console.error('SDK AuthClient signUpWithPassword failed:', error.message);\n        throw error; // Re-throw the error\n      }\n\n       // Fetch profile data if user exists (might not exist immediately if email confirmation is required)\n      let profileData = null;\n      if (data.user) {\n           try {\n               const { data: profile, error: profileError } = await this.supabaseClient\n                   .from('profiles')\n                   .select('*')\n                   .eq('id', data.user.id)\n                   .single();\n               if (profileError && profileError.code !== 'PGRST116') throw profileError; // Ignore 'not found' error\n               profileData = profile;\n           } catch (profileFetchError: any) {\n               console.error('SDK AuthClient error fetching user profile after signup:', profileFetchError.message);\n           }\n      }\n\n\n      return {\n          user: data.user ? mapSupabaseUserToUserInterface(data.user, profileData) : null,\n          session: data.session,\n      };\n\n    } catch (error: any) {\n      console.error('SDK AuthClient error during signUpWithPassword:', error.message);\n      throw error; // Re-throw the error\n    }\n  }\n\n\n  /**\n   * Handles user logout.\n   * @returns Promise<void>\n   */\n  async signOut(): Promise<void> {\n    try {\n      const { error } = await this.supabaseClient.auth.signOut();\n      if (error) {\n        console.error('SDK AuthClient signOut failed:', error.message);\n        throw error; // Re-throw the error\n      }\n    } catch (error: any) {\n      console.error('SDK AuthClient error during signOut:', error.message);\n      throw error; // Re-throw the error\n    }\n  }\n\n  /**\n   * Gets the current user session.\n   * @returns Promise<{ user: User | null, session: Session | null }> The current user and session, or null if not authenticated.\n   */\n  async getSession(): Promise<{ user: User | null, session: Session | null }> {\n      try {\n          const { data: { session }, error } = await this.supabaseClient.auth.getSession();\n\n          if (error) {\n              console.error('SDK AuthClient getSession failed:', error.message);\n              throw error; // Re-throw the error\n          }\n\n          // Fetch profile data if user exists\n          let profileData = null;\n          if (session?.user) {\n               try {\n                   const { data: profile, error: profileError } = await this.supabaseClient\n                       .from('profiles')\n                       .select('*')\n                       .eq('id', session.user.id)\n                       .single();\n                   if (profileError && profileError.code !== 'PGRST116') throw profileError; // Ignore 'not found' error\n                   profileData = profile;\n               } catch (profileFetchError: any) {\n                   console.error('SDK AuthClient error fetching user profile during getSession:', profileFetchError.message);\n               }\n          }\n\n\n          return {\n              user: session?.user ? mapSupabaseUserToUserInterface(session.user, profileData) : null,\n              session: session,\n          };\n\n      } catch (error: any) {\n          console.error('SDK AuthClient error during getSession:', error.message);\n          throw error; // Re-throw the error\n      }\n  }\n\n    /**\n     * Gets the currently authenticated user.\n     * @returns Promise<User | null> The current user or null if not authenticated.\n     */\n    async getUser(): Promise<User | null> {\n        try {\n            const { data: { user: supabaseUser }, error } = await this.supabaseClient.auth.getUser();\n\n            if (error) {\n                console.error('SDK AuthClient getUser failed:', error.message);\n                throw error; // Re-throw the error\n            }\n\n             // Fetch profile data if user exists\n            let profileData = null;\n            if (supabaseUser) {\n                 try {\n                     const { data: profile, error: profileError } = await this.supabaseClient\n                         .from('profiles')\n                         .select('*')\n                         .eq('id', supabaseUser.id)\n                         .single();\n                     if (profileError && profileError.code !== 'PGRST116') throw profileError; // Ignore 'not found' error\n                     profileData = profile;\n                 } catch (profileFetchError: any) {\n                     console.error('SDK AuthClient error fetching user profile during getUser:', profileFetchError.message);\n                 }\n            }\n\n            return supabaseUser ? mapSupabaseUserToUserInterface(supabaseUser, profileData) : null;\n\n        } catch (error: any) {\n            console.error('SDK AuthClient error during getUser:', error.message);\n            throw error; // Re-throw the error\n        }\n    }\n\n    // Add other auth-related methods if needed (e.g., reset password, update user)\n}\n"], ["typescript\n// packages/@junai/sdk/src/auth.ts\n// Auth Client Module for SDK\n// Provides methods for user authentication (login, signup, logout, get user).\n\nimport { SupabaseClient, User as SupabaseUser, Session } from '@supabase/supabase-js';\nimport { User } from '../../../src/interfaces'; // Import User interface from main project\n\n/**\n * Maps a Supabase User object to the internal User interface.\n * Includes data from the 'profiles' table if available.\n * @param supabaseUser The user object from Supabase Auth.\n * @param profileData Optional profile data from the 'profiles' table.\n * @returns The mapped User object.\n */\nfunction mapSupabaseUserToUserInterface(supabaseUser: SupabaseUser, profileData?: any): User {\n    return {\n        id: supabaseUser.id,\n        email: supabaseUser.email || '',\n        name: profileData?.full_name || supabaseUser.user_metadata?.name || supabaseUser.email, // Use profile name, then metadata name, then email\n        avatarUrl: profileData?.avatar_url || supabaseUser.user_metadata?.avatar_url,\n        role: supabaseUser.role || 'authenticated', // Default role\n        rune_capacity: profileData?.rune_capacity, // Include rune capacity from profile\n        // Add other profile fields here\n        created_at: supabaseUser.created_at, // Include creation timestamp from auth.users\n        last_sign_in_at: supabaseUser.last_sign_in_at, // Include last sign in timestamp\n        language_preference: profileData?.language_preference, // Include language preference\n    } as User; // Cast to User interface\n}\n\n\nexport class AuthClient {\n  private supabaseClient: SupabaseClient;\n\n  constructor(supabaseClient: SupabaseClient) {\n    this.supabaseClient = supabaseClient;\n  }\n\n  /**\n   * Handles user login with email and password.\n   * @param email User email.\n   * @param password User password.\n   * @returns Promise<{ user: User | null, session: Session | null }> The authenticated user and session, or null on failure.\n   */\n  async signInWithPassword(email: string, password: string): Promise<{ user: User | null, session: Session | null }> {\n    try {\n      const { data, error } = await this.supabaseClient.auth.signInWithPassword({ email, password });\n\n      if (error) {\n        console.error('SDK AuthClient signInWithPassword failed:', error.message);\n        throw error; // Re-throw the error\n      }\n\n      // Fetch profile data if user exists\n      let profileData = null;\n      if (data.user) {\n           try {\n               const { data: profile, error: profileError } = await this.supabaseClient\n                   .from('profiles')\n                   .select('*')\n                   .eq('id', data.user.id)\n                   .single();\n               if (profileError && profileError.code !== 'PGRST116') throw profileError; // Ignore 'not found' error\n               profileData = profile;\n           } catch (profileFetchError: any) {\n               console.error('SDK AuthClient error fetching user profile after login:', profileFetchError.message);\n           }\n      }\n\n\n      return {\n          user: data.user ? mapSupabaseUserToUserInterface(data.user, profileData) : null,\n          session: data.session,\n      };\n\n    } catch (error: any) {\n      console.error('SDK AuthClient error during signInWithPassword:', error.message);\n      throw error; // Re-throw the error\n    }\n  }\n\n   /**\n   * Handles user signup with email and password.\n   * @param email User email.\n   * @param password User password.\n   * @returns Promise<{ user: User | null, session: Session | null }> The signed-up user and session, or null on failure.\n   */\n  async signUpWithPassword(email: string, password: string): Promise<{ user: User | null, session: Session | null }> {\n    try {\n      const { data, error } = await this.supabaseClient.auth.signUp({ email, password });\n\n      if (error) {\n        console.error('SDK AuthClient signUpWithPassword failed:', error.message);\n        throw error; // Re-throw the error\n      }\n\n       // Fetch profile data if user exists (might not exist immediately if email confirmation is required)\n      let profileData = null;\n      if (data.user) {\n           try {\n               const { data: profile, error: profileError } = await this.supabaseClient\n                   .from('profiles')\n                   .select('*')\n                   .eq('id', data.user.id)\n                   .single();\n               if (profileError && profileError.code !== 'PGRST116') throw profileError; // Ignore 'not found' error\n               profileData = profile;\n           } catch (profileFetchError: any) {\n               console.error('SDK AuthClient error fetching user profile after signup:', profileFetchError.message);\n           }\n      }\n\n\n      return {\n          user: data.user ? mapSupabaseUserToUserInterface(data.user, profileData) : null,\n          session: data.session,\n      };\n\n    } catch (error: any) {\n      console.error('SDK AuthClient error during signUpWithPassword:', error.message);\n      throw error; // Re-throw the error\n    }\n  }\n\n\n  /**\n   * Handles user logout.\n   * @returns Promise<void>\n   */\n  async signOut(): Promise<void> {\n    try {\n      const { error } = await this.supabaseClient.auth.signOut();\n      if (error) {\n        console.error('SDK AuthClient signOut failed:', error.message);\n        throw error; // Re-throw the error\n      }\n    } catch (error: any) {\n      console.error('SDK AuthClient error during signOut:', error.message);\n      throw error; // Re-throw the error\n    }\n  }\n\n  /**\n   * Gets the current user session.\n   * @returns Promise<{ user: User | null, session: Session | null }> The current user and session, or null if not authenticated.\n   */\n  async getSession(): Promise<{ user: User | null, session: Session | null }> {\n      try {\n          const { data: { session }, error } = await this.supabaseClient.auth.getSession();\n\n          if (error) {\n              console.error('SDK AuthClient getSession failed:', error.message);\n              throw error; // Re-throw the error\n          }\n\n          // Fetch profile data if user exists\n          let profileData = null;\n          if (session?.user) {\n               try {\n                   const { data: profile, error: profileError } = await this.supabaseClient\n                       .from('profiles')\n                       .select('*')\n                       .eq('id', session.user.id)\n                       .single();\n                   if (profileError && profileError.code !== 'PGRST116') throw profileError; // Ignore 'not found' error\n                   profileData = profile;\n               } catch (profileFetchError: any) {\n                   console.error('SDK AuthClient error fetching user profile during getSession:', profileFetchError.message);\n               }\n          }\n\n\n          return {\n              user: session?.user ? mapSupabaseUserToUserInterface(session.user, profileData) : null,\n              session: session,\n          };\n\n      } catch (error: any) {\n          console.error('SDK AuthClient error during getSession:', error.message);\n          throw error; // Re-throw the error\n      }\n  }\n\n    /**\n     * Gets the currently authenticated user.\n     * @returns Promise<User | null> The current user or null if not authenticated.\n     */\n    async getUser(): Promise<User | null> {\n        try {\n            const { data: { user: supabaseUser }, error } = await this.supabaseClient.auth.getUser();\n\n            if (error) {\n                console.error('SDK AuthClient getUser failed:', error.message);\n                throw error; // Re-throw the error\n            }\n\n             // Fetch profile data if user exists\n            let profileData = null;\n            if (supabaseUser) {\n                 try {\n                     const { data: profile, error: profileError } = await this.supabaseClient\n                         .from('profiles')\n                         .select('*')\n                         .eq('id', supabaseUser.id)\n                         .single();\n                     if (profileError && profileError.code !== 'PGRST116') throw profileError; // Ignore 'not found' error\n                     profileData = profile;\n                 } catch (profileFetchError: any) {\n                     console.error('SDK AuthClient error fetching user profile during getUser:', profileFetchError.message);\n                 }\n            }\n\n            return supabaseUser ? mapSupabaseUserToUserInterface(supabaseUser, profileData) : null;\n\n        } catch (error: any) {\n            console.error('SDK AuthClient error during getUser:', error.message);\n            throw error; // Re-throw the error\n        }\n    }\n\n    // Add other auth-related methods if needed (e.g., reset password, update user)\n}\n"]))(__makeTemplateObject([""], [""]));
