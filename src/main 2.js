var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css'; // Basic CSS file\n\n// Import all core and auxiliary services\nimport { ApiProxy } from './proxies/apiProxy';\nimport { KnowledgeSync } from './modules/knowledgeSync';\nimport { SacredRuneEngraver } from './core/rune-engrafting/SacredRuneEngraver'; // Corrected import\nimport { SelfNavigationEngine } from './core/self-navigation/SelfNavigationEngine';\nimport { AuthorityForgingEngine } from './core/authority/AuthorityForgingEngine';\nimport { JunAiAssistant } from './junai';\nimport { LoggingService } from './core/logging/LoggingService';\nimport { CachingService } from './core/caching/CachingService';\nimport { SecurityService } from './core/security/SecurityService';\nimport { EventBus } from './modules/events/EventBus';\nimport { NotificationService } from './modules/notifications/NotificationService';\nimport { SyncService } from './modules/sync/SyncService';\nimport { WisdomSecretArt } from './core/wisdom/WisdomSecretArt';\nimport { EvolutionEngine } from './core/evolution/EvolutionEngine';\nimport { AnalyticsService } from './modules/analytics/AnalyticsService';\nimport { GoalManagementService } from './core/goal-management/GoalManagementService';\nimport { MemoryEngine } from './core/memory/MemoryEngine'; // Import MemoryEngine\nimport { GlossaryService } from './core/glossary/GlossaryService'; // Import GlossaryService\nimport { FileService } from './core/files/FileService'; // Import FileService\nimport { RepositoryService } from './core/repository/RepositoryService'; // Import RepositoryService\nimport { KnowledgeGraphService } from './core/wisdom/KnowledgeGraphService'; // Import KnowledgeGraphService\nimport { ScriptSandbox } from './core/execution/ScriptSandbox'; // Import ScriptSandbox\n// --- New: Import CalendarService ---\nimport { CalendarService } from './core/calendar/CalendarService';\n// --- End New ---\n// --- New: Import TemplateService ---\nimport { TemplateService } from './core/templates/TemplateService';\n// --- End New ---\n// --- New: Import SyllabusGenerator ---\nimport { SyllabusGenerator } from './marketplace/generateSyllabus';\n// --- End New ---\n\n\n// --- New: Import Agent System Components and Agents --\nimport { MessageBus } from './agents/MessageBus';\nimport { AgentFactory } from './agents/AgentFactory';\nimport { AgentRouter } from './agents/AgentRouter';\n// Import placeholder agents to register\nimport { KnowledgeAgent } from './agents/KnowledgeAgent';\nimport { AIAgent } from './agents/AIAgent';\nimport { SupabaseAgent } from './agents/SupabaseAgent';\nimport { SyncAgent } from './agents/SyncAgent';\nimport { InputAgent } from './agents/InputAgent'; // Corrected import path\nimport { PollinationsAgent } from './agents/PollinationsAgent';\nimport { ChatXAgent } from './agents/ChatXAgent';\nimport { StraicoAgent } from './agents/StraicoAgent';\nimport { BoostspaceAgent } from './agents/BoostspaceAgent';\nimport { GitHubAgent } from './agents/GitHubAgent';\nimport { DecisionAgent } from './agents/DecisionAgent'; // Import DecisionAgent\nimport { DeviceAgent } from './agents/DeviceAgent'; // Import DeviceAgent\nimport { UtilityAgent } from './agents/UtilityAgent'; // Import UtilityAgent\nimport { UIAgent } from './agents/UIAgent'; // Import UIAgent\nimport { AuthorityForgingAgent } from './agents/AuthorityForgingAgent'; // Import AuthorityForgingAgent\nimport { SelfNavigationAgent } from './agents/SelfNavigationAgent'; // Import SelfNavigationAgent\nimport { RuneEngraftingAgent } from './agents/RuneEngraftingAgent'; // Import RuneEngraftingAgent\nimport { NotificationAgent } from './agents/NotificationAgent'; // Import NotificationAgent\nimport { EvolutionAgent } from './agents/EvolutionAgent'; // Import EvolutionAgent\nimport { GoalManagementAgent } from './agents/GoalManagementAgent'; // Import GoalManagementAgent\nimport { AnalyticsAgent } from './agents/AnalyticsAgent'; // Import AnalyticsAgent\nimport { WebhookAgent } from './agents/WebhookAgent'; // Import WebhookAgent\n// --- New: Import SuggestionAgent --\nimport { SuggestionAgent } from './agents/SuggestionAgent';\n// --- End New --\n// --- New: Import CalendarAgent ---\nimport { CalendarAgent } from './agents/CalendarAgent';\n// --- End New ---\n// --- New: Import RAGIndexer and RAGRetriever ---\nimport { RAGIndexer } from './rag/indexer';\nimport { RAGRetriever } from './rag/retriever';\n// --- End New ---\n// --- End New ---\n\n\n// Import simulated rune implementations and helper\nimport { createRuneDefinition, ExampleScriptRune, BoostspaceRune, DeviceClipboardRune, UIThemeRune, MakeComWebhookRune, CapacitiesRune, InfoflowRune, UpNoteRune, NoteXRune, IiFrSpaceRune, ChatXRune, SupabaseRune, PollinationsAIRune, ConsensusFieldRune, AutoRepairRune, QuantumTunnelRune, WebRune } from './simulated-runes'; // Import all simulated runes including new ones\nimport { GitHubRune } from './runes/GitHubRune';\nimport { StraicoAIRune } from './runes/StraicoAIRune';\nimport { MobileGitSyncRune } from './runes/MobileGitSyncRune';\nimport { BlueccAPIRune } from './runes/BlueccAPIRune';\nimport { TaskadeAPIRune } from './runes/TaskadeAPIRune';\nimport { MymemoAIRune } from './runes/MymemoAIRune';\nimport { BindAIRune } from './runes/BindAIRune';\nimport { AitableAIRune } from './runes/AitableAIRune';\nimport { FileRune } from './runes/FileRune';\nimport { GlossaryRune } from './runes/GlossaryRune';\nimport { RepositoryRune } from './runes/RepositoryRune';\nimport { GoogleDriveRune } from './runes/GoogleDriveRune'; // Corrected import path\nimport { WorkingCopyRune } from './runes/WorkingCopyRune'; // Import WorkingCopyRune\n// --- New: Import URLSchemeRune ---\nimport { URLSchemeRune } from './runes/URLSchemeRune';\n// --- End New ---\n\n\n// --- New: Import startApiGateway function ---\nimport { startApiGateway } from './api';\n// --- End New ---\n\n\nimport { SystemContext, User, Rune } from './interfaces'; // Import interfaces and User\n\nconsole.log(\"\uD83D\uDE80 Jun.Ai.Key Web UI Starting...\");\n\n// Initialize all core and auxiliary services (The OmniKey's internal structure)\n// Order of initialization might matter if services have dependencies\n\n// Create a preliminary context to pass to services that need it during construction\n// This helps resolve circular dependencies during initialization\nconst preliminaryContext: Partial<SystemContext> = {\n    currentUser: null, // Initialize currentUser as null\n    currentFlow: null, // Initialize currentFlow as null\n};\n\n// Initialize services that don't have circular dependencies or only depend on context\nconst loggingService = new LoggingService(preliminaryContext as SystemContext);\nconst cachingService = new CachingService(preliminaryContext as SystemContext);\nconst eventBus = new EventBus(preliminaryContext as SystemContext);\nconst securityService = new SecurityService(preliminaryContext as SystemContext); // Security needs context to update currentUser\n\n// Update preliminary context with services that are now initialized\nObject.assign(preliminaryContext, {\n    loggingService,\n    cachingService,\n    eventBus,\n    securityService,\n});\n\n// Initialize services that depend on the basic set\nconst apiProxy = new ApiProxy(preliminaryContext as SystemContext); // ApiProxy needs logging/caching\nconst scriptSandbox = new ScriptSandbox(preliminaryContext as SystemContext); // ScriptSandbox needs context to access other services\nconst fileService = new FileService(preliminaryContext as SystemContext); // FileService needs logging\nconst repositoryService = new RepositoryService(preliminaryContext as SystemContext); // RepositoryService needs logging\nconst glossaryService = new GlossaryService(preliminaryContext as SystemContext); // GlossaryService needs logging/eventBus/apiProxy\n// --- New: Initialize CalendarService ---\nconst calendarService = new CalendarService(preliminaryContext as SystemContext);\n// --- End New ---\n// --- New: Initialize TemplateService ---\nconst templateService = new TemplateService(preliminaryContext as SystemContext);\n// --- End New ---\n// --- New: Initialize SyllabusGenerator ---\nconst syllabusGenerator = new SyllabusGenerator(preliminaryContext as SystemContext);\n// --- End New ---\n\n\n// --- New: Initialize Agent System Components --\n// Initialize MessageBus first (it will need the router later)\n// Pass the router instance to getInstance on the first call to link them\nconst agentRouter = new AgentRouter(preliminaryContext as SystemContext, AgentFactory.getInstance(), MessageBus.getInstance());\nconst messageBus = MessageBus.getInstance(agentRouter); // Get the singleton instance and link the router\nconst agentFactory = AgentFactory.getInstance(preliminaryContext as SystemContext); // Get the singleton instance and set context\n\n// --- End New --\n\n\n// Assemble the final SystemContext object with all initialized services and agent components\nconst systemContext: SystemContext = {\n    apiProxy,\n    knowledgeSync: new KnowledgeSync(preliminaryContext as SystemContext), // KnowledgeSync needs memoryEngine\n    junaiAssistant: new JunAiAssistant(preliminaryContext as SystemContext), // JunAiAssistant needs apiProxy, knowledgeSync, wisdom, runes, tasks, goals, sync\n    selfNavigationEngine,\n    authorityForgingEngine,\n    sacredRuneEngraver,\n    loggingService,\n    cachingService,\n    securityService,\n    eventBus,\n    notificationService,\n    syncService,\n    wisdomSecretArt,\n    evolutionEngine,\n    analyticsService,\n    goalManagementService,\n    currentUser: null, // Will be updated by SecurityService auth listener\n    memoryEngine,\n    glossaryService,\n    fileService,\n    repositoryService,\n    knowledgeGraphService,\n    scriptSandbox,\n    // --- New: Add CalendarService to context ---\n    calendarService,\n    // --- End New ---\n    // --- New: Add TemplateService to context ---\n    templateService,\n    // --- End New ---\n    // --- New: Add SyllabusGenerator to context ---\n    syllabusGenerator,\n    // --- End New ---\n    // --- New: Add Agent System Components to context ---\n    messageBus, // Add MessageBus instance\n    agentFactory, // Add AgentFactory instance\n    agentRouter, // Add AgentRouter instance\n    // --- New: Add RAG Indexer and Retriever to context ---\n    ragIndexer: new RAGIndexer(preliminaryContext as SystemContext),\n    ragRetriever: new RAGRetriever(preliminaryContext as SystemContext),\n    // --- End New ---\n    currentFlow: null, // Add currentFlow to the final context\n};\n\n// Now that all services are initialized and the context is complete,\n// update the preliminary context reference to the final one.\n// This ensures services initialized with the preliminary context now hold the complete one.\n// This is a common pattern to handle circular dependencies during initialization.\nObject.assign(preliminaryContext, systemContext);\n\n\n// --- New: Initialize all specific agents via the factory --\n// This must happen *after* the full systemContext is assembled and available via the preliminary context.\nagentFactory.initializeAgents();\n// --- End New ---\n\n\n// Expose the complete systemContext globally for simplicity in this MVP placeholder\n// WARNING: Avoid doing this in production applications\ndeclare const window: any;\nwindow.systemContext = systemContext;\n\n// --- Supabase Auth State Change Listener ---\n// This listener updates the systemContext.currentUser whenever the auth state changes\nsystemContext.securityService?.onAuthStateChange((user: User | null) => {\n    systemContext.currentUser = user;\n    if (user) {\n        // Corrected console.log syntax\n        console.log("], ["typescript\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css'; // Basic CSS file\n\n// Import all core and auxiliary services\nimport { ApiProxy } from './proxies/apiProxy';\nimport { KnowledgeSync } from './modules/knowledgeSync';\nimport { SacredRuneEngraver } from './core/rune-engrafting/SacredRuneEngraver'; // Corrected import\nimport { SelfNavigationEngine } from './core/self-navigation/SelfNavigationEngine';\nimport { AuthorityForgingEngine } from './core/authority/AuthorityForgingEngine';\nimport { JunAiAssistant } from './junai';\nimport { LoggingService } from './core/logging/LoggingService';\nimport { CachingService } from './core/caching/CachingService';\nimport { SecurityService } from './core/security/SecurityService';\nimport { EventBus } from './modules/events/EventBus';\nimport { NotificationService } from './modules/notifications/NotificationService';\nimport { SyncService } from './modules/sync/SyncService';\nimport { WisdomSecretArt } from './core/wisdom/WisdomSecretArt';\nimport { EvolutionEngine } from './core/evolution/EvolutionEngine';\nimport { AnalyticsService } from './modules/analytics/AnalyticsService';\nimport { GoalManagementService } from './core/goal-management/GoalManagementService';\nimport { MemoryEngine } from './core/memory/MemoryEngine'; // Import MemoryEngine\nimport { GlossaryService } from './core/glossary/GlossaryService'; // Import GlossaryService\nimport { FileService } from './core/files/FileService'; // Import FileService\nimport { RepositoryService } from './core/repository/RepositoryService'; // Import RepositoryService\nimport { KnowledgeGraphService } from './core/wisdom/KnowledgeGraphService'; // Import KnowledgeGraphService\nimport { ScriptSandbox } from './core/execution/ScriptSandbox'; // Import ScriptSandbox\n// --- New: Import CalendarService ---\nimport { CalendarService } from './core/calendar/CalendarService';\n// --- End New ---\n// --- New: Import TemplateService ---\nimport { TemplateService } from './core/templates/TemplateService';\n// --- End New ---\n// --- New: Import SyllabusGenerator ---\nimport { SyllabusGenerator } from './marketplace/generateSyllabus';\n// --- End New ---\n\n\n// --- New: Import Agent System Components and Agents --\nimport { MessageBus } from './agents/MessageBus';\nimport { AgentFactory } from './agents/AgentFactory';\nimport { AgentRouter } from './agents/AgentRouter';\n// Import placeholder agents to register\nimport { KnowledgeAgent } from './agents/KnowledgeAgent';\nimport { AIAgent } from './agents/AIAgent';\nimport { SupabaseAgent } from './agents/SupabaseAgent';\nimport { SyncAgent } from './agents/SyncAgent';\nimport { InputAgent } from './agents/InputAgent'; // Corrected import path\nimport { PollinationsAgent } from './agents/PollinationsAgent';\nimport { ChatXAgent } from './agents/ChatXAgent';\nimport { StraicoAgent } from './agents/StraicoAgent';\nimport { BoostspaceAgent } from './agents/BoostspaceAgent';\nimport { GitHubAgent } from './agents/GitHubAgent';\nimport { DecisionAgent } from './agents/DecisionAgent'; // Import DecisionAgent\nimport { DeviceAgent } from './agents/DeviceAgent'; // Import DeviceAgent\nimport { UtilityAgent } from './agents/UtilityAgent'; // Import UtilityAgent\nimport { UIAgent } from './agents/UIAgent'; // Import UIAgent\nimport { AuthorityForgingAgent } from './agents/AuthorityForgingAgent'; // Import AuthorityForgingAgent\nimport { SelfNavigationAgent } from './agents/SelfNavigationAgent'; // Import SelfNavigationAgent\nimport { RuneEngraftingAgent } from './agents/RuneEngraftingAgent'; // Import RuneEngraftingAgent\nimport { NotificationAgent } from './agents/NotificationAgent'; // Import NotificationAgent\nimport { EvolutionAgent } from './agents/EvolutionAgent'; // Import EvolutionAgent\nimport { GoalManagementAgent } from './agents/GoalManagementAgent'; // Import GoalManagementAgent\nimport { AnalyticsAgent } from './agents/AnalyticsAgent'; // Import AnalyticsAgent\nimport { WebhookAgent } from './agents/WebhookAgent'; // Import WebhookAgent\n// --- New: Import SuggestionAgent --\nimport { SuggestionAgent } from './agents/SuggestionAgent';\n// --- End New --\n// --- New: Import CalendarAgent ---\nimport { CalendarAgent } from './agents/CalendarAgent';\n// --- End New ---\n// --- New: Import RAGIndexer and RAGRetriever ---\nimport { RAGIndexer } from './rag/indexer';\nimport { RAGRetriever } from './rag/retriever';\n// --- End New ---\n// --- End New ---\n\n\n// Import simulated rune implementations and helper\nimport { createRuneDefinition, ExampleScriptRune, BoostspaceRune, DeviceClipboardRune, UIThemeRune, MakeComWebhookRune, CapacitiesRune, InfoflowRune, UpNoteRune, NoteXRune, IiFrSpaceRune, ChatXRune, SupabaseRune, PollinationsAIRune, ConsensusFieldRune, AutoRepairRune, QuantumTunnelRune, WebRune } from './simulated-runes'; // Import all simulated runes including new ones\nimport { GitHubRune } from './runes/GitHubRune';\nimport { StraicoAIRune } from './runes/StraicoAIRune';\nimport { MobileGitSyncRune } from './runes/MobileGitSyncRune';\nimport { BlueccAPIRune } from './runes/BlueccAPIRune';\nimport { TaskadeAPIRune } from './runes/TaskadeAPIRune';\nimport { MymemoAIRune } from './runes/MymemoAIRune';\nimport { BindAIRune } from './runes/BindAIRune';\nimport { AitableAIRune } from './runes/AitableAIRune';\nimport { FileRune } from './runes/FileRune';\nimport { GlossaryRune } from './runes/GlossaryRune';\nimport { RepositoryRune } from './runes/RepositoryRune';\nimport { GoogleDriveRune } from './runes/GoogleDriveRune'; // Corrected import path\nimport { WorkingCopyRune } from './runes/WorkingCopyRune'; // Import WorkingCopyRune\n// --- New: Import URLSchemeRune ---\nimport { URLSchemeRune } from './runes/URLSchemeRune';\n// --- End New ---\n\n\n// --- New: Import startApiGateway function ---\nimport { startApiGateway } from './api';\n// --- End New ---\n\n\nimport { SystemContext, User, Rune } from './interfaces'; // Import interfaces and User\n\nconsole.log(\"\\ud83d\\ude80 Jun.Ai.Key Web UI Starting...\");\n\n// Initialize all core and auxiliary services (The OmniKey's internal structure)\n// Order of initialization might matter if services have dependencies\n\n// Create a preliminary context to pass to services that need it during construction\n// This helps resolve circular dependencies during initialization\nconst preliminaryContext: Partial<SystemContext> = {\n    currentUser: null, // Initialize currentUser as null\n    currentFlow: null, // Initialize currentFlow as null\n};\n\n// Initialize services that don't have circular dependencies or only depend on context\nconst loggingService = new LoggingService(preliminaryContext as SystemContext);\nconst cachingService = new CachingService(preliminaryContext as SystemContext);\nconst eventBus = new EventBus(preliminaryContext as SystemContext);\nconst securityService = new SecurityService(preliminaryContext as SystemContext); // Security needs context to update currentUser\n\n// Update preliminary context with services that are now initialized\nObject.assign(preliminaryContext, {\n    loggingService,\n    cachingService,\n    eventBus,\n    securityService,\n});\n\n// Initialize services that depend on the basic set\nconst apiProxy = new ApiProxy(preliminaryContext as SystemContext); // ApiProxy needs logging/caching\nconst scriptSandbox = new ScriptSandbox(preliminaryContext as SystemContext); // ScriptSandbox needs context to access other services\nconst fileService = new FileService(preliminaryContext as SystemContext); // FileService needs logging\nconst repositoryService = new RepositoryService(preliminaryContext as SystemContext); // RepositoryService needs logging\nconst glossaryService = new GlossaryService(preliminaryContext as SystemContext); // GlossaryService needs logging/eventBus/apiProxy\n// --- New: Initialize CalendarService ---\nconst calendarService = new CalendarService(preliminaryContext as SystemContext);\n// --- End New ---\n// --- New: Initialize TemplateService ---\nconst templateService = new TemplateService(preliminaryContext as SystemContext);\n// --- End New ---\n// --- New: Initialize SyllabusGenerator ---\nconst syllabusGenerator = new SyllabusGenerator(preliminaryContext as SystemContext);\n// --- End New ---\n\n\n// --- New: Initialize Agent System Components --\n// Initialize MessageBus first (it will need the router later)\n// Pass the router instance to getInstance on the first call to link them\nconst agentRouter = new AgentRouter(preliminaryContext as SystemContext, AgentFactory.getInstance(), MessageBus.getInstance());\nconst messageBus = MessageBus.getInstance(agentRouter); // Get the singleton instance and link the router\nconst agentFactory = AgentFactory.getInstance(preliminaryContext as SystemContext); // Get the singleton instance and set context\n\n// --- End New --\n\n\n// Assemble the final SystemContext object with all initialized services and agent components\nconst systemContext: SystemContext = {\n    apiProxy,\n    knowledgeSync: new KnowledgeSync(preliminaryContext as SystemContext), // KnowledgeSync needs memoryEngine\n    junaiAssistant: new JunAiAssistant(preliminaryContext as SystemContext), // JunAiAssistant needs apiProxy, knowledgeSync, wisdom, runes, tasks, goals, sync\n    selfNavigationEngine,\n    authorityForgingEngine,\n    sacredRuneEngraver,\n    loggingService,\n    cachingService,\n    securityService,\n    eventBus,\n    notificationService,\n    syncService,\n    wisdomSecretArt,\n    evolutionEngine,\n    analyticsService,\n    goalManagementService,\n    currentUser: null, // Will be updated by SecurityService auth listener\n    memoryEngine,\n    glossaryService,\n    fileService,\n    repositoryService,\n    knowledgeGraphService,\n    scriptSandbox,\n    // --- New: Add CalendarService to context ---\n    calendarService,\n    // --- End New ---\n    // --- New: Add TemplateService to context ---\n    templateService,\n    // --- End New ---\n    // --- New: Add SyllabusGenerator to context ---\n    syllabusGenerator,\n    // --- End New ---\n    // --- New: Add Agent System Components to context ---\n    messageBus, // Add MessageBus instance\n    agentFactory, // Add AgentFactory instance\n    agentRouter, // Add AgentRouter instance\n    // --- New: Add RAG Indexer and Retriever to context ---\n    ragIndexer: new RAGIndexer(preliminaryContext as SystemContext),\n    ragRetriever: new RAGRetriever(preliminaryContext as SystemContext),\n    // --- End New ---\n    currentFlow: null, // Add currentFlow to the final context\n};\n\n// Now that all services are initialized and the context is complete,\n// update the preliminary context reference to the final one.\n// This ensures services initialized with the preliminary context now hold the complete one.\n// This is a common pattern to handle circular dependencies during initialization.\nObject.assign(preliminaryContext, systemContext);\n\n\n// --- New: Initialize all specific agents via the factory --\n// This must happen *after* the full systemContext is assembled and available via the preliminary context.\nagentFactory.initializeAgents();\n// --- End New ---\n\n\n// Expose the complete systemContext globally for simplicity in this MVP placeholder\n// WARNING: Avoid doing this in production applications\ndeclare const window: any;\nwindow.systemContext = systemContext;\n\n// --- Supabase Auth State Change Listener ---\n// This listener updates the systemContext.currentUser whenever the auth state changes\nsystemContext.securityService?.onAuthStateChange((user: User | null) => {\n    systemContext.currentUser = user;\n    if (user) {\n        // Corrected console.log syntax\n        console.log("]))[Web];
UI;
Auth;
state;
changed: Logged in as;
$;
{
    user.email;
}
(function (ID, _a) {
    var user = _a.user, id = _a.id;
    return ;
});
");\n        systemContext.loggingService?.logInfo('User logged in', { userId: user.id, email: user.email });\n        // --- New: Register user-specific runes or load user-specific configurations ---\n        // This is where you might fetch runes owned by this user from the DB and register them.\n        // For MVP, we'll just re-register the public/simulated ones to ensure they are active.\n        registerSimulatedRunes(systemContext); // Re-register public runes on login\n        // --- End New ---\n    } else {\n        console.log('[Web UI] Auth state changed: Logged out.');\n        systemContext.loggingService?.logInfo('User logged out');\n        // --- New: Deregister user-specific runes or clear user-specific configurations ---\n        // This is where you might clear runes associated with the logged-out user.\n        // For MVP, we'll just re-register public/simulated ones.\n        registerSimulatedRunes(systemContext); // Re-register public ones\n        // --- End New ---\n    }\n    // The App component is designed to re-render based on systemContext.currentUser\n    // No explicit ReactDOM.render call needed here.\n});\n\n\n// --- New: Function to register simulated runes ---\nconst registerSimulatedRunes = async (context: SystemContext) => {\n    console.log('[main.tsx] Registering simulated runes...');\n    const sacredRuneEngraver = context.sacredRuneEngraver;\n    if (!sacredRuneEngraver) {\n        console.error('SacredRuneEngraver not available to register runes.');\n        return;\n    }\n\n    const simulatedRunes: Rune[] = [\n        createRuneDefinition(\n            'example-script-rune',\n            'Example Script',\n            'A simple example script rune for testing.',\n            'script-plugin',\n            ExampleScriptRune, // Pass the class\n            {\n                runExample: { description: 'Runs the example script.', parameters: { input: { type: 'string' } } },\n                greet: { description: 'Greeks someone.', parameters: { name: { type: 'string', required: false } } },\n            },\n            {},\n            true // isPublic\n        ),\n         createRuneDefinition(\n            'boostspace-rune',\n            'Boost.Space API',\n            'Integrates with the Boost.Space API.',\n            'api-adapter',\n            BoostspaceRune, // Pass the class\n            {\n                callAPI: { description: 'Calls a generic Boost.Space API endpoint.', parameters: { endpoint: { type: 'string', required: true }, method: { type: 'string', required: true }, data: { type: 'object', required: false }, config: { type: 'object', required: false } } },\n            },\n            {\n                // Example events Boost.Space Rune might publish\n                // item_created: { description: 'An item was created in Boost.Space.', payload_schema: { type: 'object' } },\n            },\n            true // isPublic\n        ),\n         createRuneDefinition(\n            'device-clipboard-rune',\n            'Device Clipboard',\n            'Accesses the device clipboard (simulated).',\n            'device-adapter',\n            DeviceClipboardRune, // Pass the class\n            {\n                getClipboard: { description: 'Gets content from the clipboard.' },\n                setClipboard: { description: 'Sets content to the clipboard.', parameters: { content: { type: 'string', required: true } } },\n            },\n            {},\n            true // isPublic\n        ),\n         createRuneDefinition(\n            'ui-theme-rune',\n            'UI Theme',\n            'Manages the user interface theme (simulated).',\n            'ui-component',\n            UIThemeRune, // Pass the class\n            {\n                toggleTheme: { description: 'Toggles between themes.' },\n                setTheme: { description: 'Sets a specific theme.', parameters: { theme: { type: 'string', required: true } } },\n            },\n            {},\n            true // isPublic\n        ),\n         createRuneDefinition(\n            'makecom-webhook-rune',\n            'Make.com Webhook',\n            'Triggers a Make.com webhook.',\n            'webhook-trigger',\n            MakeComWebhookRune, // Pass the class\n            {\n                trigger: { description: 'Triggers the webhook with a payload.', parameters: { webhookUrl: { type: 'string', required: true }, payload: { type: 'object', required: true } } },\n            },\n            {},\n            true // isPublic\n        ),\n        // --- Add GitHubRune definition ---\n         createRuneDefinition(\n            'github-rune',\n            'GitHub API',\n            'Integrates with the GitHub API to manage repositories, issues, etc.',\n            'api-adapter', // GitHub is an API adapter\n            GitHubRune, // Pass the GitHubRune class\n            {\n                getUser: { description: 'Gets the authenticated user\\'s profile.' },\n                listRepos: { description: 'Lists repositories for the authenticated user.', parameters: { type: { type: 'string', description: 'Type of repositories (all, owner, member)', required: false } } },\n                createIssue: { description: 'Creates a new issue in a repository.', parameters: { owner: { type: 'string', required: true }, repo: { type: 'string', required: true }, title: { type: 'string', required: true }, body: { type: 'string', required: false }, labels: { type: 'array', items: { type: 'string' }, required: false } } },\n                // Add other GitHub methods here as implemented in GitHubRune.ts\n            },\n            {}, // No events defined for this simulated rune yet\n            true // isPublic (assuming a public rune for now, user config handles auth)\n        ),\n        // --- End Add ---\n        // --- Add StraicoAIRune definition ---\n         createRuneDefinition(\n            'straico-ai-rune',\n            'Straico AI',\n            'Integrates with the Straico AI API for text generation and chat.',\n            'ai-agent', // Straico AI is an AI agent\n            StraicoAIRune, // Pass the StraicoAIRune class\n            {\n                promptCompletion: { description: 'Generates text completion from a prompt.', parameters: { prompt: { type: 'string', required: true }, max_tokens: { type: 'number', required: false }, temperature: { type: 'number', required: false } } },\n                chat: { description: 'Engages in a chat conversation.', parameters: { messages: { type: 'array', required: true, items: { type: 'object', properties: { role: { type: 'string' }, content: { type: 'string' } }, required: ['role', 'content'] } }, model: { type: 'string', required: false }, max_tokens: { type: 'number', required: false }, temperature: { type: 'number', required: false } } }\n                // Add other Straico methods here as implemented in StraicoAIRune.ts\n            },\n            {}, // No events defined for this simulated rune yet\n            true // isPublic (assuming a public rune for now, user config handles auth)\n        ),\n        // --- End Add ---\n        // --- Add MobileGitSyncRune definition ---\n         createRuneDefinition(\n            'mobile-git-sync-rune',\n            'Mobile Git Sync',\n            'Simulates synchronization with a mobile Git client.',\n            'device-adapter', // Mobile Git is a device adapter\n            MobileGitSyncRune, // Pass the MobileGitSyncRune class\n            {\n                pull: { description: 'Simulates pulling changes from remote.' },\n                push: { description: 'Simulates pushing changes to remote.' },\n                bidirectional: { description: 'Simulates bidirectional sync (pull then push).' },\n                // Add other methods like status, commit if implemented in the Rune\n            },\n            {\n                // Example events Mobile Git Sync Rune might publish\n                // sync_status: { description: 'Reports the status of a sync operation.', payload_schema: { type: 'object' } },\n            },\n            true, // isPublic (assuming a public rune for now, user config handles repoUrl/credentials)\n            undefined, // No specific user ID for the definition itself\n            { repo_url: 'https://github.com/simulated/mobile-repo' } // Example default configuration\n        ),\n        // --- End Add ---\n        // --- Add BlueccAPIRune definition ---\n         createRuneDefinition(\n            'bluecc-api-rune',\n            'Blue.cc API',\n            'Integrates with the Blue.cc API for data management.',\n            'api-adapter', // Blue.cc is an API adapter\n            BlueccAPIRune, // Pass the BlueccAPIRune class\n            {\n                callAPI: { description: 'Calls a generic Blue.cc API endpoint.', parameters: { endpoint: { type: 'string', required: true }, method: { type: 'string', required: true }, data: { type: 'object', required: false }, config: { type: 'object', required: false } } },\n                // TODO: Add more specific methods based on Blue.cc API\n                // Example: listUsers: { description: 'Lists users from Blue.cc.', parameters: { query: { type: 'string', required: false } } },\n            },\n            {}, // No events defined for this simulated rune yet\n            true // isPublic (assuming a public rune for now, user config handles auth)\n        ),\n        // --- End Add ---\n        // --- Add TaskadeAPIRune definition ---\n         createRuneDefinition(\n            'taskade-api-rune',\n            'Taskade API',\n            'Integrates with the Taskade API for task and project management.',\n            'api-adapter', // Taskade is an API adapter\n            TaskadeAPIRune, // Pass the TaskadeAPIRune class\n            {\n                callAPI: { description: 'Calls a generic Taskade API endpoint.', parameters: { endpoint: { type: 'string', required: true }, method: { type: 'string', required: true }, data: { type: 'object', required: false }, config: { type: 'object', required: false } } },\n                // TODO: Add more specific methods based on Taskade API\n                // Example: listProjects: { description: 'Lists projects in a workspace.', parameters: { workspaceId: { type: 'string', required: true } } },\n            },\n            {}, // No events defined for this simulated rune yet\n            true // isPublic (assuming a public rune for now, user config handles auth)\n        ),\n        // --- End Add ---\n        // --- Add MymemoAIRune definition ---\n         createRuneDefinition(\n            'mymemo-ai-rune',\n            'Mymemo.ai API',\n            'Integrates with the Mymemo.ai API for note-taking and memory management.',\n            'api-adapter', // Mymemo.ai is an API adapter\n            MymemoAIRune, // Pass the MymemoAIRune class\n            {\n                callAPI: { description: 'Calls a generic Mymemo.ai API endpoint.', parameters: { endpoint: { type: 'string', required: true }, method: { type: 'string', required: true }, data: { type: 'object', required: false }, config: { type: 'object', required: false } } },\n                // TODO: Add more specific methods based on Mymemo.ai API\n                // Example: createMemo: { description: 'Creates a new memo.', parameters: { content: { type: 'string', required: true }, tags: { type: 'array', items: { type: 'string' }, required: false } } },\n            },\n            {}, // No events defined for this simulated rune yet\n            true // isPublic (assuming a public rune for now, user config handles auth)\n        ),\n        // --- End Add ---\n        // --- Add BindAIRune definition ---\n         createRuneDefinition(\n            'bind-ai-rune',\n            'Bind AI',\n            'Integrates with the Bind AI API for advanced AI capabilities.',\n            'ai-agent', // Bind AI is an AI agent\n            BindAIRune, // Pass the BindAIRune class\n            {\n                callAPI: { description: 'Calls a generic Bind AI API endpoint.', parameters: { endpoint: { type: 'string', required: true }, method: { type: 'string', required: true }, data: { type: 'object', required: false }, config: { type: 'object', required: false } } },\n                // TODO: Add more specific methods based on Bind AI API\n                // Example: generateCode: { description: 'Generates code based on a prompt.', parameters: { prompt: { type: 'string', required: true }, language?: string }, returns: { type: 'string' } },\n            },\n            {}, // No events defined for this simulated rune yet\n            true // isPublic (assuming a public rune for now, user config handles auth)\n        ),\n        // --- End Add ---\n        // --- Add AitableAIRune definition ---\n         createRuneDefinition(\n            'aitable-ai-rune',\n            'Aitable.ai API',\n            'Integrates with the Aitable.ai API for AI-powered data tables.',\n            'api-adapter', // Aitable.ai is an API adapter\n            AitableAIRune, // Pass the AitableAIRune class\n            {\n                callAPI: { description: 'Calls a generic Aitable.ai API endpoint.', parameters: { endpoint: { type: 'string', required: true }, method: { type: 'string', required: true }, data: { type: 'object', required: false }, config: { type: 'object', required: false } } },\n                // TODO: Add more specific methods based on Aitable.ai API\n            },\n            {}, // No events defined for this simulated rune yet\n            true // isPublic (assuming a public rune for now, user config handles auth)\n        ),\n        // --- End Add ---\n        // --- Add FileRune definition ---\n         createRuneDefinition(\n            'file-rune',\n            'File System',\n            'Interacts with the local file system (simulated).',\n            'system-adapter', // File system is a system adapter\n            FileRune, // Pass the FileRune class\n            {\n                readFile: { description: 'Reads the content of a file.', parameters: { filePath: { type: 'string', required: true } }, returns: { type: 'string' } },\n                writeFile: { description: 'Writes content to a file.', parameters: { filePath: { type: 'string', required: true }, content: { type: 'string', required: true } } },\n                deleteFile: { description: 'Deletes a file.', parameters: { filePath: { type: 'string', required: true } } },\n                listFiles: { description: 'Lists files in a directory.', parameters: { dirPath: { type: 'string', required: false } }, returns: { type: 'array', items: { type: 'string' } } },\n                mergeAndWriteFile: { description: 'Merges content with a file and writes.', parameters: { filePath: { type: 'string', required: true }, newContent: { type: 'string', required: true }, mergeStrategy: { type: 'string', enum: ['append', 'prepend', 'replace', 'diff'], required: false } } },\n                // Add other file methods\n            },\n            {}, // No events defined for this rune yet\n            true // isPublic\n        ),\n        // --- End Add ---\n        // --- Add GlossaryRune definition ---\n         createRuneDefinition(\n            'glossary-rune',\n            'Glossary',\n            'Manages terms and definitions in the system glossary.',\n            'system-adapter', // Glossary is a system adapter\n            GlossaryRune, // Pass the GlossaryRune class\n            {\n                createTerm: { description: 'Creates a new glossary term.', parameters: { term: { type: 'string', required: true }, definition: { type: 'string', required: true }, related_concepts: { type: 'array', items: { type: 'string' }, required: false }, pillar_domain: { type: 'string', required: false }, is_public: { type: 'boolean', required: false } } },\n                getTerms: { description: 'Retrieves glossary terms.', parameters: { pillarDomain: { type: 'string', required: false }, searchTerm: { type: 'string', required: false } }, returns: { type: 'array', items: { type: 'object' } } },\n                getTermById: { description: 'Retrieves a specific glossary term by ID.', parameters: { termId: { type: 'string', required: true } }, returns: { type: 'object' } },\n                updateTerm: { description: 'Updates an existing glossary term.', parameters: { termId: { type: 'string', required: true }, updates: { type: 'object', required: true } } },\n                deleteTerm: { description: 'Deletes a glossary term.', parameters: { termId: { type: 'string', required: true } } },\n                // Add other glossary methods\n            },\n            {}, // No events defined for this rune yet\n            true // isPublic\n        ),\n        // --- End Add ---\n        // --- Add RepositoryRune definition ---\n         createRuneDefinition(\n            'repository-rune',\n            'Repository',\n            'Manages code repositories (simulated Git).',\n            'system-adapter', // Repository is a system adapter\n            RepositoryRune, // Pass the RepositoryRune class\n            {\n                cloneRepo: { description: 'Clones a repository.', parameters: { repoUrl: { type: 'string', required: true }, repoName: { type: 'string', required: true } } },\n                commitChanges: { description: 'Commits changes.', parameters: { repoName: { type: 'string', required: true }, commitMessage: { type: 'string', required: true } } },\n                pushChanges: { description: 'Pushes changes.', parameters: { repoName: { type: 'string', required: true } } },\n                pullChanges: { description: 'Pulls changes.', parameters: { repoName: { type: 'string', required: true } } },\n                getRepoStatus: { description: 'Gets repository status.', parameters: { repoName: { type: 'string', required: true } }, returns: { type: 'object' } },\n                listFilesInRepo: { description: 'Lists files in repo directory.', parameters: { repoName: { type: 'string', required: true }, dirPath: { type: 'string', required: false } }, returns: { type: 'array', items: { type: 'string' } } },\n                // Add other repo methods\n            },\n            {}, // No events defined for this rune yet\n            true // isPublic\n        ),\n        // --- End Add ---\n        // --- Add GoogleDriveRune definition ---\n         createRuneDefinition(\n            'googledrive-rune',\n            'Google Drive',\n            'Integrates with Google Drive for file management.',\n            'api-adapter', // Google Drive is an API adapter\n            GoogleDriveRune, // Pass the GoogleDriveRune class\n            {\n                callAPI: { description: 'Calls a generic Google Drive API endpoint.', parameters: { endpoint: { type: 'string', required: true }, method: { type: 'string', required: true }, data: { type: 'object', required: false }, config: { type: 'object', required: false } } },\n                listFiles: { description: 'Lists files in Google Drive.', parameters: { q: { type: 'string', required: false }, pageSize: { type: 'number', required: false }, fields: { type: 'string', required: false } }, returns: { type: 'object' } },\n                uploadFile: { description: 'Uploads a file to Google Drive.', parameters: { name: { type: 'string', required: true }, mimeType: { type: 'string', required: true }, content: { type: 'string', description: 'File content (base64 or text)', required: true }, parents: { type: 'array', items: { type: 'string' }, required: false } }, returns: { type: 'object' } },\n                // Add other Google Drive methods\n            },\n            {}, // No events defined for this rune yet\n            true // isPublic (requires user to link Google account)\n        ),\n        // --- End Add ---\n        // --- Add WorkingCopyRune definition ---\n         createRuneDefinition(\n            'working-copy-rune',\n            'Working Copy',\n            'Interacts with the Working Copy iOS/macOS Git client via URL Schemes (simulated).',\n            'device-adapter', // Working Copy is a device adapter\n            WorkingCopyRune, // Pass the WorkingCopyRune class\n            {\n                open: { description: 'Opens Working Copy at a specific screen.', parameters: { repo: { type: 'string', required: true }, path: { type: 'string', required: false }, commit: { type: 'string', required: false }, branch: { type: 'string', required: false }, mode: { type: 'string', required: false }, line: { type: 'number', required: false }, error: { type: 'string', required: false }, message: { type: 'string', required: false } } },\n                clone: { description: 'Initiates cloning in Working Copy.', parameters: { remote: { type: 'string', required: true } } },\n                show: { description: 'Shows a remote repository.', parameters: { remote: { type: 'string', required: true } } },\n                importLog: { description: 'Imports log lines.', parameters: { lines: { type: 'string', required: true }, repo: { type: 'string', required: false }, timestamp: { type: 'number', required: false }, kind: { type: 'string', required: false } } },\n                read: { description: 'Reads file content.', parameters: { repo: { type: 'string', required: true }, path: { type: 'string', required: true }, type: { type: 'string', enum: ['text', 'base64'], required: false }, clipboard: { type: 'number', enum: [1], required: false } }, returns: { type: 'object' } },\n                write: { description: 'Writes file content.', parameters: { repo: { type: 'string', required: true }, path: { type: 'string', required: true }, text: { type: 'string', required: false }, base64: { type: 'string', required: false }, clipboard: { type: 'number', enum: [1], required: false }, mode: { type: 'string', enum: ['safe', 'overwrite', 'append', 'prepend'], required: false }, askcommit: { type: 'number', enum: [1], required: false }, filename: { type: 'string', required: false }, uti: { type: 'string', required: false } } },\n                commit: { description: 'Commits changes.', parameters: { repo: { type: 'string', required: true }, path: { type: 'string', required: false }, limit: { type: 'number', required: false }, message: { type: 'string', required: false }, askcommit: { type: 'number', enum: [1], required: false } } },\n                status: { description: 'Gets file status.', parameters: { repo: { type: 'string', required: true }, path: { type: 'string', required: false }, unchanged: { type: 'number', enum: [1], required: false }, depth: { type: 'number', required: false } }, returns: { type: 'object' } },\n                push: { description: 'Pushes changes.', parameters: { repo: { type: 'string', required: true }, remote: { type: 'string', required: false } } },\n                pull: { description: 'Pulls changes.', parameters: { repo: { type: 'string', required: true }, remote: { type: 'string', required: false } } },\n                add: { description: 'Adds files.', parameters: { repo: { type: 'string', required: true }, path: { type: 'string', required: false }, all: { type: 'number', enum: [1], required: false } } },\n                log: { description: 'Views log.', parameters: { repo: { type: 'string', required: true }, path: { type: 'string', required: false }, limit: { type: 'number', required: false }, commit: { type: 'string', required: false }, branch: { type: 'string', required: false }, author: { type: 'string', required: false }, message: { type: 'string', required: false }, grep: { type: 'string', required: false }, all: { type: 'number', enum: [1], required: false }, follow: { type: 'number', enum: [1], required: false }, decorate: { type: 'number', enum: [1], required: false }, graph: { type: 'number', enum: [1], required: false }, stat: { type: 'number', enum: [1], required: false }, patch: { type: 'number', enum: [1], required: false } } },\n                checkout: { description: 'Checks out branch/commit.', parameters: { repo: { type: 'string', required: true }, branch: { type: 'string', required: false }, commit: { type: 'string', required: false }, force: { type: 'number', enum: [1], required: false } } },\n                branch: { description: 'Manages branches.', parameters: { repo: { type: 'string', required: true }, branch: { type: 'string', required: true }, startpoint: { type: 'string', required: false }, force: { type: 'number', enum: [1], required: false }, delete: { type: 'number', enum: [1], required: false }, move: { type: 'string', required: false } } },\n                sync: { description: 'Syncs (pull then push).', parameters: { repo: { type: 'string', required: true } } },\n                // Add other Working Copy commands\n            },\n            {}, // No events defined for this rune yet\n            true // isPublic (requires user to link Working Copy and store key)\n        ),\n        // --- End Add ---\n        // --- New: Add URLSchemeRune definition ---\n         createRuneDefinition(\n            'url-scheme-rune',\n            'URL Scheme Trigger',\n            'Handles incoming URL Scheme activations.',\n            'webhook-trigger', // Acts like a webhook trigger\n            URLSchemeRune, // Pass the URLSchemeRune class\n            {\n                // No methods callable *on* this rune, it's triggered *by* URL schemes\n                // Define a placeholder method if needed for manifest structure, or rely on events\n                handleUrl: { description: 'Handles an incoming URL Scheme (internal trigger).', parameters: { url: { type: 'string', required: true } } }, // Internal method\n            },\n            {\n                // Define events this rune publishes when triggered\n                url_scheme_activated: { description: 'A URL Scheme was activated.', payload_schema: { type: 'object', properties: { url: { type: 'string' } } } },\n            },\n            true // isPublic\n        ),\n        // --- End New ---\n    ];\n\n    // Register each simulated rune\n    for (const rune of simulatedRunes) {\n        try {\n            // Pass the rune definition including the implementation class reference\n            await sacredRuneEngraver.registerRune(rune);\n        } catch (error) {\n            console.error(";
Failed;
to;
register;
simulated;
rune;
$;
{
    rune.name;
}
", error);\n        }\n    }\n    console.log('[main.tsx] Simulated runes registration complete.');\n};\n// --- End New ---\n\n\n// Render the main App component into the DOM\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n);\n\n// --- New: Start the API Gateway (if in a Node.js environment like WebContainer) ---\n// In a browser-only environment without Node.js, this function call would be skipped.\n// In WebContainer, this will start an Express server within the browser environment.\n// It will not be publicly accessible from the internet.\nif (typeof process !== 'undefined' && process.versions && process.versions.node) {\n    // Check if we are in a Node.js environment (like WebContainer)\n    // Ensure the API Gateway is started only once after the system context is ready.\n    // We can use a simple flag or check if the Express app is already listening.\n    // For MVP, just call it directly after context is ready.\n    // A more robust approach would be to manage this lifecycle within the main application startup.\n    console.log('[main.tsx] Starting API Gateway...');\n    startApiGateway(systemContext);\n}\n// --- End New ---\n"(__makeTemplateObject([""], [""]));
