var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// src/pages/Analytics.tsx\n// Analytics Page\n// Displays calculated KPIs for the user.\n// --- New: Add UI for viewing KPIs with timeframe selection ---\n\nimport React, { useEffect, useState } from 'react';\nimport { AnalyticsService } from '../modules/analytics/AnalyticsService';\nimport { BarChart2, CheckCircle, XCircle, Zap, BookKey, Code, Target, Info, Loader2 } from 'lucide-react'; // Import icons\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst analyticsService: AnalyticsService = window.systemContext?.analyticsService; // The Analytics (\u5206\u6790\u670D\u52D9) module\nconst authorityForgingEngine: any = window.systemContext?.authorityForgingEngine; // Use any for action recording (\u6B0A\u80FD\u935B\u9020)\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\n\n// Define available timeframes\nconst TIMEFRAMES = ['day', 'week', 'month', 'all'] as const;\ntype Timeframe = typeof TIMEFRAMES[number];\n\nconst Analytics: React.FC = () => {\n  const [kpis, setKpis] = useState<any>(null); // State to hold calculated KPIs\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedTimeframe, setSelectedTimeframe] = useState<Timeframe>('month'); // Default timeframe\n\n\n  const fetchKPIs = async (timeframe: Timeframe) => {\n       const userId = systemContext?.currentUser?.id;\n       if (!analyticsService || !userId) {\n            setError(\"AnalyticsService module not initialized or user not logged in.\");\n            setLoading(false);\n            return;\n        }\n      setLoading(true);\n      setError(null);\n      try {\n          // Fetch KPIs for the current user and selected timeframe\n          const calculatedKpis = await analyticsService.calculateKPIs(timeframe, userId); // Pass userId and timeframe\n          setKpis(calculatedKpis);\n      } catch (err: any) {\n          console.error('Error fetching KPIs:', err);\n          setError("], ["typescript\n// src/pages/Analytics.tsx\n// Analytics Page\n// Displays calculated KPIs for the user.\n// --- New: Add UI for viewing KPIs with timeframe selection ---\n\nimport React, { useEffect, useState } from 'react';\nimport { AnalyticsService } from '../modules/analytics/AnalyticsService';\nimport { BarChart2, CheckCircle, XCircle, Zap, BookKey, Code, Target, Info, Loader2 } from 'lucide-react'; // Import icons\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst analyticsService: AnalyticsService = window.systemContext?.analyticsService; // The Analytics (\\u5206\\u6790\\u670d\\u52d9) module\nconst authorityForgingEngine: any = window.systemContext?.authorityForgingEngine; // Use any for action recording (\\u6b0a\\u80fd\\u935b\\u9020)\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\n\n// Define available timeframes\nconst TIMEFRAMES = ['day', 'week', 'month', 'all'] as const;\ntype Timeframe = typeof TIMEFRAMES[number];\n\nconst Analytics: React.FC = () => {\n  const [kpis, setKpis] = useState<any>(null); // State to hold calculated KPIs\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedTimeframe, setSelectedTimeframe] = useState<Timeframe>('month'); // Default timeframe\n\n\n  const fetchKPIs = async (timeframe: Timeframe) => {\n       const userId = systemContext?.currentUser?.id;\n       if (!analyticsService || !userId) {\n            setError(\"AnalyticsService module not initialized or user not logged in.\");\n            setLoading(false);\n            return;\n        }\n      setLoading(true);\n      setError(null);\n      try {\n          // Fetch KPIs for the current user and selected timeframe\n          const calculatedKpis = await analyticsService.calculateKPIs(timeframe, userId); // Pass userId and timeframe\n          setKpis(calculatedKpis);\n      } catch (err: any) {\n          console.error('Error fetching KPIs:', err);\n          setError("]));
Failed;
to;
load;
KPIs: $;
{
    err.message;
}
");\n      } finally {\n          setLoading(false);\n      }\n  };\n\n  useEffect(() => {\n    // Fetch data when the component mounts or when the user changes or timeframe changes\n    if (systemContext?.currentUser?.id) {\n        fetchKPIs(selectedTimeframe); // Fetch KPIs on initial load and timeframe change\n    }\n\n    // TODO: Subscribe to relevant events (e.g., task_completed, rune_action_executed) to potentially trigger KPI recalculation or updates\n    // analyticsService?.context?.eventBus?.subscribe('task_completed', () => fetchKPIs(selectedTimeframe));\n    // analyticsService?.context?.eventBus?.subscribe('rune_action_executed', () => fetchKPIs(selectedTimeframe));\n\n\n    // return () => {\n    //     // Unsubscribe on component unmount\n    //     // unsubscribe from events\n    // };\n\n  }, [systemContext?.currentUser?.id, analyticsService, selectedTimeframe]); // Re-run effect when user ID, service, or timeframe changes\n\n\n   // Ensure user is logged in before rendering content\n  if (!systemContext?.currentUser) {\n       // This case should ideally be handled by ProtectedRoute, but as a fallback:\n       return (\n            <div className=\"container mx-auto p-4 flex justify-center\">\n               <div className=\"bg-neutral-800/50 p-8 rounded-lg shadow-xl w-full max-w-md text-center text-neutral-300\">\n                   <p>Please log in to view your analytics.</p>\n               </div>\n            </div>\n       );\n  }\n\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <div className=\"bg-neutral-800/50 p-6 rounded-lg shadow-xl\">\n        <h2 className=\"text-3xl font-bold text-blue-400 mb-6\">Analytics (\u5206\u6790\u670D\u52D9)</h2>\n        <p className=\"text-neutral-300 mb-8\">View key performance indicators (KPIs) for your Jun.Ai.Key usage.</p>\n\n        {/* Timeframe Selection */}\n        <div className=\"mb-8 p-4 bg-neutral-700/50 rounded-lg flex items-center gap-4\">\n            <h3 className=\"text-xl font-semibold text-blue-300\">Timeframe:</h3>\n            <select\n                className=\"p-2 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                value={selectedTimeframe}\n                onChange={(e) => setSelectedTimeframe(e.target.value as Timeframe)}\n                disabled={loading}\n            >\n                {TIMEFRAMES.map(tf => (\n                    <option key={tf} value={tf}>{tf.charAt(0).toUpperCase() + tf.slice(1)}</option>\n                ))}\n            </select>\n             {loading && <Loader2 size={20} className=\"animate-spin text-blue-400\"/>}\n        </div>\n\n\n        {/* KPI Display */}\n        {error ? (\n             <p className=\"text-red-400\">Error: {error}</p>\n        ) : kpis ? (\n             <div className=\"p-4 bg-neutral-700/50 rounded-lg\">\n                 <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Key Performance Indicators ({kpis.timeframe.charAt(0).toUpperCase() + kpis.timeframe.slice(1)})</h3>\n                 <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                     {/* Task Completion Rate */}\n                     <div className=\"p-4 bg-neutral-600/50 rounded-md border-l-4 border-green-500\">\n                         <div className=\"flex items-center gap-2 mb-2\">\n                             <CheckCircle size={20} className=\"text-green-400\"/>\n                             <h4 className=\"font-semibold text-green-200\">Task Completion Rate</h4>\n                         </div>\n                         <p className=\"text-neutral-300 text-2xl font-bold\">{kpis.taskCompletionRate}%</p>\n                         <p className=\"text-neutral-400 text-sm mt-1\">({kpis.totalTasksCompleted} completed out of {kpis.totalTasksStarted} started)</p>\n                     </div>\n\n                     {/* Rune Execution Success Rate */}\n                     <div className=\"p-4 bg-neutral-600/50 rounded-md border-l-4 border-cyan-500\">\n                         <div className=\"flex items-center gap-2 mb-2\">\n                             <Zap size={20} className=\"text-cyan-400\"/>\n                             <h4 className=\"font-semibold text-cyan-200\">Rune Execution Success Rate</h4>\n                         </div>\n                         <p className=\"text-neutral-300 text-2xl font-bold\">{kpis.runeExecutionSuccessRate}%</p>\n                         <p className=\"text-neutral-400 text-sm mt-1\">({kpis.successfulRuneExecutions} successful out of {kpis.totalRuneExecutions} total)</p>\n                     </div>\n\n                     {/* System Error Rate */}\n                     <div className=\"p-4 bg-neutral-600/50 rounded-md border-l-4 border-red-500\">\n                         <div className=\"flex items-center gap-2 mb-2\">\n                             <XCircle size={20} className=\"text-red-400\"/>\n                             <h4 className=\"font-semibold text-red-200\">System Error Rate</h4>\n                         </div>\n                         <p className=\"text-neutral-300 text-2xl font-bold\">{kpis.systemErrorRate}%</p>\n                         <p className=\"text-neutral-400 text-sm mt-1\">(Based on system events severity)</p>\n                     </div>\n\n                     {/* Average Task Duration */}\n                     <div className=\"p-4 bg-neutral-600/50 rounded-md border-l-4 border-blue-500\">\n                         <div className=\"flex items-center gap-2 mb-2\">\n                             <BarChart2 size={20} className=\"text-blue-400\"/>\n                             <h4 className=\"font-semibold text-blue-200\">Avg Task Duration</h4>\n                         </div>\n                         <p className=\"text-neutral-300 text-2xl font-bold\">{kpis.averageTaskDuration}s</p>\n                         <p className=\"text-neutral-400 text-sm mt-1\">(For completed tasks)</p>\n                     </div>\n\n                     {/* Knowledge Records Added */}\n                     <div className=\"p-4 bg-neutral-600/50 rounded-md border-l-4 border-orange-500\">\n                         <div className=\"flex items-center gap-2 mb-2\">\n                             <BookKey size={20} className=\"text-orange-400\"/>\n                             <h4 className=\"font-semibold text-orange-200\">Knowledge Records Added</h4>\n                         </div>\n                         <p className=\"text-neutral-300 text-2xl font-bold\">{kpis.knowledgeRecordsAdded}</p>\n                         <p className=\"text-neutral-400 text-sm mt-1\">(Manual or AI-generated)</p>\n                     </div>\n\n                     {/* Abilities Forged */}\n                     <div className=\"p-4 bg-neutral-600/50 rounded-md border-l-4 border-purple-500\">\n                         <div className=\"flex items-center gap-2 mb-2\">\n                             <Code size={20} className=\"text-purple-400\"/>\n                             <h4 className=\"font-semibold text-purple-200\">Abilities Forged</h4>\n                         </div>\n                         <p className=\"text-neutral-300 text-2xl font-bold\">{kpis.forgedAbilities}</p>\n                         <p className=\"text-neutral-400 text-sm mt-1\">(Manually or AI-forged)</p>\n                     </div>\n\n                     {/* Goals Created */}\n                     <div className=\"p-4 bg-neutral-600/50 rounded-md border-l-4 border-yellow-500\">\n                         <div className=\"flex items-center gap-2 mb-2\">\n                             <Target size={20} className=\"text-yellow-400\"/>\n                             <h4 className=\"font-semibold text-yellow-200\">Goals Created</h4>\n                         </div>\n                         <p className=\"text-neutral-300 text-2xl font-bold\">{kpis.createdGoals}</p>\n                         <p className=\"text-neutral-400 text-sm mt-1\">(SMART or OKR)</p>\n                     </div>\n\n                     {/* Goal Completion Rate */}\n                     <div className=\"p-4 bg-neutral-600/50 rounded-md border-l-4 border-teal-500\">\n                         <div className=\"flex items-center gap-2 mb-2\">\n                             <CheckCircle size={20} className=\"text-teal-400\"/>\n                             <h4 className=\"font-semibold text-teal-200\">Goal Completion Rate</h4>\n                         </div>\n                         <p className=\"text-neutral-300 text-2xl font-bold\">{kpis.goalCompletionRate}%</p>\n                         <p className=\"text-neutral-400 text-sm mt-1\">(For goals created in timeframe)</p>\n                     </div>\n\n                     {/* TODO: Add more KPIs */}\n                     {/* Example: Automation Rate, Feature Usage, Sync Success Rate */}\n\n                 </div>\n             </div>\n        ) : (\n             !loading && <p className=\"text-neutral-400\">No KPI data available for the selected timeframe.</p>\n        )}\n\n      </div>\n    </div>\n  );\n};\n\nexport default Analytics;\n"(__makeTemplateObject([""], [""]));
