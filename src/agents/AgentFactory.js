var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// src/agents/AgentFactory.ts\n// \u4EE3\u7406\u5DE5\u5EE0 (Agent Factory)\n// Responsible for creating and managing agent instances.\n// Ensures agents are singletons (or managed instances) and have access to the SystemContext.\n// Part of the Agent System Architecture.\n// Design Principle: Centralizes agent creation and lifecycle management.\n// --- Modified: Add registration and retrieval of specific agent types --\n// --- Modified: Ensure agents are initialized after creation --\n// --- New: Add registration for new placeholder agents --\n// --- New: Add SuggestionAgent to the factory --\n// --- New: Add CalendarAgent to the factory ---\n// --- New: Add RAGIndexer to the factory ---\n\nimport { SystemContext } from '../interfaces'; // Assuming SystemContext interface exists\nimport { BaseAgent } from './BaseAgent'; // Import BaseAgent type\n// Import all specific agent classes\nimport { InputAgent } from '../InputAgent'; // Corrected import path\nimport { KnowledgeAgent } from './KnowledgeAgent';\nimport { AIAgent } from './AIAgent';\nimport { SupabaseAgent } from './SupabaseAgent';\nimport { SyncAgent } from './SyncAgent';\nimport { DecisionAgent } from './DecisionAgent'; // Import DecisionAgent\nimport { DeviceAgent } from './DeviceAgent'; // Import DeviceAgent\nimport { UtilityAgent } from './UtilityAgent'; // Import UtilityAgent\nimport { UIAgent } from './UIAgent'; // Import UIAgent\nimport { AuthorityForgingAgent } from './AuthorityForgingAgent'; // Import AuthorityForgingAgent\nimport { SelfNavigationAgent } from './SelfNavigationAgent'; // Import SelfNavigationAgent\nimport { RuneEngraftingAgent } from './RuneEngraftingAgent'; // Import RuneEngraftingAgent\nimport { NotificationAgent } from './NotificationAgent'; // Import NotificationAgent\nimport { EvolutionAgent } from './EvolutionAgent'; // Import EvolutionAgent\nimport { GoalManagementAgent } from './GoalManagementAgent'; // Import GoalManagementAgent\nimport { AnalyticsAgent } from './AnalyticsAgent'; // Import AnalyticsAgent\nimport { WebhookAgent } from './WebhookAgent'; // Import WebhookAgent\n// --- New: Import SuggestionAgent --\nimport { SuggestionAgent } from './SuggestionAgent';\n// --- End New --\n// --- New: Import CalendarAgent ---\nimport { CalendarAgent } from './CalendarAgent';\n// --- End New ---\n// --- New: Import RAGIndexer ---\nimport { RAGIndexer } from '../rag/indexer';\n// --- End New ---\n\n\n/**\n * The factory for creating and managing agent instances.\n */\nexport class AgentFactory {\n    private static instance: AgentFactory;\n    private context: SystemContext | null = null; // SystemContext is needed for agent creation\n    private registeredAgents: Map<string, BaseAgent> = new Map(); // Map: agentName -> agentInstance\n\n    private constructor() {\n        console.log('[AgentFactory] Initialized.');\n    }\n\n    /**\n     * Gets the singleton instance of the AgentFactory.\n     * @param context The SystemContext instance (required for the first call).\n     * @returns The AgentFactory instance.\n     */\n    public static getInstance(context?: SystemContext): AgentFactory {\n        if (!AgentFactory.instance) {\n            AgentFactory.instance = new AgentFactory();\n            if (context) {\n                AgentFactory.instance.setContext(context);\n            }\n        } else {\n             // Ensure context is set if it wasn't on the very first call\n             if (!AgentFactory.instance.context && context) {\n                 AgentFactory.instance.setContext(context);\n             }\n        }\n        return AgentFactory.instance;\n    }\n\n    /**\n     * Sets the SystemContext for the factory.\n     * This must be called before creating any agents.\n     * @param context The SystemContext instance.\n     */\n    public setContext(context: SystemContext): void {\n        this.context = context;\n        console.log('[AgentFactory] SystemContext set.');\n    }\n\n    /**\n     * Creates and registers all specific agent instances.\n     * This should be called once after the SystemContext is fully assembled.\n     */\n    public initializeAgents(): void {\n        if (!this.context) {\n            console.error('[AgentFactory] SystemContext is not set. Cannot initialize agents.');\n            throw new Error('SystemContext must be set before initializing agents.');\n        }\n\n        console.log('[AgentFactory] Initializing agents...');\n\n        // Create instances of all specific agents and register them\n        // Pass the context to each agent's constructor\n        this.registerAgent(new InputAgent(this.context));\n        this.registerAgent(new KnowledgeAgent(this.context));\n        this.registerAgent(new AIAgent(this.context));\n        this.registerAgent(new SupabaseAgent(this.context));\n        this.registerAgent(new SyncAgent(this.context));\n        this.registerAgent(new DecisionAgent(this.context)); // Register DecisionAgent\n        this.registerAgent(new DeviceAgent(this.context)); // Register DeviceAgent\n        this.registerAgent(new UtilityAgent(this.context)); // Register UtilityAgent\n        this.registerAgent(new UIAgent(this.context)); // Register UIAgent\n        this.registerAgent(new AuthorityForgingAgent(this.context)); // Register AuthorityForgingAgent\n        this.registerAgent(new SelfNavigationAgent(this.context)); // Register SelfNavigationAgent\n        this.registerAgent(new RuneEngraftingAgent(this.context)); // Register RuneEngraftingAgent\n        this.registerAgent(new NotificationAgent(this.context)); // Register NotificationAgent\n        this.registerAgent(new EvolutionAgent(this.context)); // Register EvolutionAgent\n        this.registerAgent(new GoalManagementAgent(this.context)); // Register GoalManagementAgent\n        this.registerAgent(new AnalyticsAgent(this.context)); // Register AnalyticsAgent\n        this.registerAgent(new WebhookAgent(this.context)); // Register WebhookAgent\n        // --- New: Register SuggestionAgent --\n        this.registerAgent(new SuggestionAgent(this.context));\n        // --- End New --\n        // --- New: Register CalendarAgent ---\n        this.registerAgent(new CalendarAgent(this.context));\n        // --- End New ---\n        // --- New: Register RAGIndexer ---\n        this.registerAgent(new RAGIndexer(this.context));\n        // --- End New ---\n\n        console.log("], ["typescript\n// src/agents/AgentFactory.ts\n// \\u4ee3\\u7406\\u5de5\\u5ee0 (Agent Factory)\n// Responsible for creating and managing agent instances.\n// Ensures agents are singletons (or managed instances) and have access to the SystemContext.\n// Part of the Agent System Architecture.\n// Design Principle: Centralizes agent creation and lifecycle management.\n// --- Modified: Add registration and retrieval of specific agent types --\n// --- Modified: Ensure agents are initialized after creation --\n// --- New: Add registration for new placeholder agents --\n// --- New: Add SuggestionAgent to the factory --\n// --- New: Add CalendarAgent to the factory ---\n// --- New: Add RAGIndexer to the factory ---\n\nimport { SystemContext } from '../interfaces'; // Assuming SystemContext interface exists\nimport { BaseAgent } from './BaseAgent'; // Import BaseAgent type\n// Import all specific agent classes\nimport { InputAgent } from '../InputAgent'; // Corrected import path\nimport { KnowledgeAgent } from './KnowledgeAgent';\nimport { AIAgent } from './AIAgent';\nimport { SupabaseAgent } from './SupabaseAgent';\nimport { SyncAgent } from './SyncAgent';\nimport { DecisionAgent } from './DecisionAgent'; // Import DecisionAgent\nimport { DeviceAgent } from './DeviceAgent'; // Import DeviceAgent\nimport { UtilityAgent } from './UtilityAgent'; // Import UtilityAgent\nimport { UIAgent } from './UIAgent'; // Import UIAgent\nimport { AuthorityForgingAgent } from './AuthorityForgingAgent'; // Import AuthorityForgingAgent\nimport { SelfNavigationAgent } from './SelfNavigationAgent'; // Import SelfNavigationAgent\nimport { RuneEngraftingAgent } from './RuneEngraftingAgent'; // Import RuneEngraftingAgent\nimport { NotificationAgent } from './NotificationAgent'; // Import NotificationAgent\nimport { EvolutionAgent } from './EvolutionAgent'; // Import EvolutionAgent\nimport { GoalManagementAgent } from './GoalManagementAgent'; // Import GoalManagementAgent\nimport { AnalyticsAgent } from './AnalyticsAgent'; // Import AnalyticsAgent\nimport { WebhookAgent } from './WebhookAgent'; // Import WebhookAgent\n// --- New: Import SuggestionAgent --\nimport { SuggestionAgent } from './SuggestionAgent';\n// --- End New --\n// --- New: Import CalendarAgent ---\nimport { CalendarAgent } from './CalendarAgent';\n// --- End New ---\n// --- New: Import RAGIndexer ---\nimport { RAGIndexer } from '../rag/indexer';\n// --- End New ---\n\n\n/**\n * The factory for creating and managing agent instances.\n */\nexport class AgentFactory {\n    private static instance: AgentFactory;\n    private context: SystemContext | null = null; // SystemContext is needed for agent creation\n    private registeredAgents: Map<string, BaseAgent> = new Map(); // Map: agentName -> agentInstance\n\n    private constructor() {\n        console.log('[AgentFactory] Initialized.');\n    }\n\n    /**\n     * Gets the singleton instance of the AgentFactory.\n     * @param context The SystemContext instance (required for the first call).\n     * @returns The AgentFactory instance.\n     */\n    public static getInstance(context?: SystemContext): AgentFactory {\n        if (!AgentFactory.instance) {\n            AgentFactory.instance = new AgentFactory();\n            if (context) {\n                AgentFactory.instance.setContext(context);\n            }\n        } else {\n             // Ensure context is set if it wasn't on the very first call\n             if (!AgentFactory.instance.context && context) {\n                 AgentFactory.instance.setContext(context);\n             }\n        }\n        return AgentFactory.instance;\n    }\n\n    /**\n     * Sets the SystemContext for the factory.\n     * This must be called before creating any agents.\n     * @param context The SystemContext instance.\n     */\n    public setContext(context: SystemContext): void {\n        this.context = context;\n        console.log('[AgentFactory] SystemContext set.');\n    }\n\n    /**\n     * Creates and registers all specific agent instances.\n     * This should be called once after the SystemContext is fully assembled.\n     */\n    public initializeAgents(): void {\n        if (!this.context) {\n            console.error('[AgentFactory] SystemContext is not set. Cannot initialize agents.');\n            throw new Error('SystemContext must be set before initializing agents.');\n        }\n\n        console.log('[AgentFactory] Initializing agents...');\n\n        // Create instances of all specific agents and register them\n        // Pass the context to each agent's constructor\n        this.registerAgent(new InputAgent(this.context));\n        this.registerAgent(new KnowledgeAgent(this.context));\n        this.registerAgent(new AIAgent(this.context));\n        this.registerAgent(new SupabaseAgent(this.context));\n        this.registerAgent(new SyncAgent(this.context));\n        this.registerAgent(new DecisionAgent(this.context)); // Register DecisionAgent\n        this.registerAgent(new DeviceAgent(this.context)); // Register DeviceAgent\n        this.registerAgent(new UtilityAgent(this.context)); // Register UtilityAgent\n        this.registerAgent(new UIAgent(this.context)); // Register UIAgent\n        this.registerAgent(new AuthorityForgingAgent(this.context)); // Register AuthorityForgingAgent\n        this.registerAgent(new SelfNavigationAgent(this.context)); // Register SelfNavigationAgent\n        this.registerAgent(new RuneEngraftingAgent(this.context)); // Register RuneEngraftingAgent\n        this.registerAgent(new NotificationAgent(this.context)); // Register NotificationAgent\n        this.registerAgent(new EvolutionAgent(this.context)); // Register EvolutionAgent\n        this.registerAgent(new GoalManagementAgent(this.context)); // Register GoalManagementAgent\n        this.registerAgent(new AnalyticsAgent(this.context)); // Register AnalyticsAgent\n        this.registerAgent(new WebhookAgent(this.context)); // Register WebhookAgent\n        // --- New: Register SuggestionAgent --\n        this.registerAgent(new SuggestionAgent(this.context));\n        // --- End New --\n        // --- New: Register CalendarAgent ---\n        this.registerAgent(new CalendarAgent(this.context));\n        // --- End New ---\n        // --- New: Register RAGIndexer ---\n        this.registerAgent(new RAGIndexer(this.context));\n        // --- End New ---\n\n        console.log("]))[AgentFactory];
$;
{
    this.registeredAgents.size;
}
agents;
registered.(__makeTemplateObject([");\n\n        // Call init() on each registered agent\n        this.registeredAgents.forEach(agent => {\n            try {\n                agent.init();\n            } catch (error) {\n                console.error("], [");\n\n        // Call init() on each registered agent\n        this.registeredAgents.forEach(agent => {\n            try {\n                agent.init();\n            } catch (error) {\n                console.error("]))[AgentFactory];
Error;
initializing;
agent;
$;
{
    agent.agentName;
}
", error);\n                // Handle initialization errors (e.g., log, mark agent as unhealthy)\n            }\n        });\n\n        console.log('[AgentFactory] Agent initialization complete.');\n    }\n\n\n    /**\n     * Registers an agent instance with the factory.\n     * @param agent The agent instance to register.\n     */\n    private registerAgent(agent: BaseAgent): void {\n        if (this.registeredAgents.has(agent.agentName)) {\n            console.warn("[AgentFactory];
Agent;
with (name)
    ;
"${agent.agentName}\" is already registered. Overwriting.`);;
this.registeredAgents.set(agent.agentName, agent);
console.log("[AgentFactory] Agent \"".concat(agent.agentName, "\" registered."));
getAgent(agentName, string);
BaseAgent | undefined;
{
    var agent = this.registeredAgents.get(agentName);
    if (!agent) {
        console.warn("[AgentFactory] Agent \"".concat(agentName, "\" not found in registry."));
    }
    return agent;
}
getRegisteredAgents();
Map < string, BaseAgent > {
    return: this.registeredAgents
};
""(__makeTemplateObject([""], [""]));
