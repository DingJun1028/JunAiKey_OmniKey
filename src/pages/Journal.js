var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// src/pages/Journal.tsx\n// Journal Page\n// Displays and manages user's journal entries (Knowledge Records with source 'journal').\n// --- New: Create a page for the Journal UI ---\n// --- New: Implement fetching and displaying journal entries ---\n// --- New: Add UI for creating, editing, and deleting entries ---\n// --- New: Add Realtime Updates for 'journal' knowledge_records ---\n// --- New: Add UI for starring and tagging journal entries ---\n\n\nimport React, { useEffect, useState } from 'react';\nimport { MemoryEngine } from '../core/memory/MemoryEngine'; // To fetch and manage records\nimport { KnowledgeSync } from '../modules/knowledgeSync'; // To save/update/delete records\nimport { AuthorityForgingEngine } from '../core/authority/AuthorityForgingEngine'; // Use for action recording\nimport { KnowledgeRecord } from '../interfaces'; // Import KnowledgeRecord type\nimport { BookOpen, ChevronDown, ChevronUp, Trash2, Edit, PlusCircle, Save, Loader2, Info, Star, StarHalf, StarOff, Tag } from 'lucide-react'; // Import icons including Star, Tag\nimport ReactMarkdown from 'react-markdown'; // For rendering markdown\n\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst memoryEngine: MemoryEngine = window.systemContext?.memoryEngine; // The Memory Engine (\u6C38\u4E45\u8A18\u61B6) pillar\nconst knowledgeSync: KnowledgeSync = window.systemContext?.knowledgeSync; // Interacts with MemoryEngine for saving/updating/deleting\nconst authorityForgingEngine: any = window.systemContext?.authorityForgingEngine; // Use any for action recording (\u6B0A\u80FD\u935B\u9020)\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\n\n\nconst Journal: React.FC = () => {\n  const [entries, setEntries] = useState<KnowledgeRecord[]>([]); // State to hold journal entries\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [expandedEntries, setExpandedEntries] = useState<Record<string, boolean>>({}); // State to track expanded entries\n\n  // --- State for creating new entry ---\n  const [isCreatingEntry, setIsCreatingEntry] = useState(false);\n  const [newEntryContent, setNewEntryContent] = useState(''); // Journal entries are primarily content\n  const [newEntryTags, setNewEntryTags] = useState<string[]>([]); // Tags for the entry\n  const [newEntryIsStarred, setNewEntryIsStarred] = useState(false); // Starred status\n  const [isSavingEntry, setIsSavingEntry] = useState(false);\n  // --- End New ---\n\n  // --- State for editing entry ---\n  const [editingEntry, setEditingEntry] = useState<KnowledgeRecord | null>(null); // The entry being edited\n  const [editingEntryContent, setEditingEntryContent] = useState('');\n  const [editingEntryTags, setEditingEntryTags] = useState<string[]>([]);\n  const [editingEntryIsStarred, setEditingEntryIsStarred] = useState(false);\n  const [isUpdatingEntry, setIsUpdatingEntry] = useState(false);\n  // --- End New ---\n\n\n  const fetchEntries = async () => {\n       const userId = systemContext?.currentUser?.id;\n       if (!memoryEngine || !userId) {\n            setError(\"MemoryEngine module not initialized or user not logged in.\");\n            setLoading(false);\n            return;\n        }\n      setLoading(true);\n      setError(null); // Clear main error when fetching\n      try {\n          // Fetch knowledge records with source 'journal' for the current user\n          const allRecords = await memoryEngine.getAllKnowledgeForUser(userId); // Fetch all for simplicity\n          const journalEntries = allRecords\n              .filter(record => record.source === 'journal')\n              // Sort by timestamp descending to display newest first\n              .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n\n          setEntries(journalEntries);\n      } catch (err: any) {\n          console.error('Error fetching journal entries:', err);\n          setError("], ["typescript\n// src/pages/Journal.tsx\n// Journal Page\n// Displays and manages user's journal entries (Knowledge Records with source 'journal').\n// --- New: Create a page for the Journal UI ---\n// --- New: Implement fetching and displaying journal entries ---\n// --- New: Add UI for creating, editing, and deleting entries ---\n// --- New: Add Realtime Updates for 'journal' knowledge_records ---\n// --- New: Add UI for starring and tagging journal entries ---\n\n\nimport React, { useEffect, useState } from 'react';\nimport { MemoryEngine } from '../core/memory/MemoryEngine'; // To fetch and manage records\nimport { KnowledgeSync } from '../modules/knowledgeSync'; // To save/update/delete records\nimport { AuthorityForgingEngine } from '../core/authority/AuthorityForgingEngine'; // Use for action recording\nimport { KnowledgeRecord } from '../interfaces'; // Import KnowledgeRecord type\nimport { BookOpen, ChevronDown, ChevronUp, Trash2, Edit, PlusCircle, Save, Loader2, Info, Star, StarHalf, StarOff, Tag } from 'lucide-react'; // Import icons including Star, Tag\nimport ReactMarkdown from 'react-markdown'; // For rendering markdown\n\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst memoryEngine: MemoryEngine = window.systemContext?.memoryEngine; // The Memory Engine (\u6C38\u4E45\u8A18\u61B6) pillar\nconst knowledgeSync: KnowledgeSync = window.systemContext?.knowledgeSync; // Interacts with MemoryEngine for saving/updating/deleting\nconst authorityForgingEngine: any = window.systemContext?.authorityForgingEngine; // Use any for action recording (\u6B0A\u80FD\u935B\u9020)\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\n\n\nconst Journal: React.FC = () => {\n  const [entries, setEntries] = useState<KnowledgeRecord[]>([]); // State to hold journal entries\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [expandedEntries, setExpandedEntries] = useState<Record<string, boolean>>({}); // State to track expanded entries\n\n  // --- State for creating new entry ---\n  const [isCreatingEntry, setIsCreatingEntry] = useState(false);\n  const [newEntryContent, setNewEntryContent] = useState(''); // Journal entries are primarily content\n  const [newEntryTags, setNewEntryTags] = useState<string[]>([]); // Tags for the entry\n  const [newEntryIsStarred, setNewEntryIsStarred] = useState(false); // Starred status\n  const [isSavingEntry, setIsSavingEntry] = useState(false);\n  // --- End New ---\n\n  // --- State for editing entry ---\n  const [editingEntry, setEditingEntry] = useState<KnowledgeRecord | null>(null); // The entry being edited\n  const [editingEntryContent, setEditingEntryContent] = useState('');\n  const [editingEntryTags, setEditingEntryTags] = useState<string[]>([]);\n  const [editingEntryIsStarred, setEditingEntryIsStarred] = useState(false);\n  const [isUpdatingEntry, setIsUpdatingEntry] = useState(false);\n  // --- End New ---\n\n\n  const fetchEntries = async () => {\n       const userId = systemContext?.currentUser?.id;\n       if (!memoryEngine || !userId) {\n            setError(\"MemoryEngine module not initialized or user not logged in.\");\n            setLoading(false);\n            return;\n        }\n      setLoading(true);\n      setError(null); // Clear main error when fetching\n      try {\n          // Fetch knowledge records with source 'journal' for the current user\n          const allRecords = await memoryEngine.getAllKnowledgeForUser(userId); // Fetch all for simplicity\n          const journalEntries = allRecords\n              .filter(record => record.source === 'journal')\n              // Sort by timestamp descending to display newest first\n              .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n\n          setEntries(journalEntries);\n      } catch (err: any) {\n          console.error('Error fetching journal entries:', err);\n          setError("]));
Failed;
to;
load;
journal;
entries: $;
{
    err.message;
}
");\n      } finally {\n          setLoading(false);\n      }\n  };\n\n  useEffect(() => {\n    // Fetch data when the component mounts or when the user changes\n    if (systemContext?.currentUser?.id) {\n        fetchEntries(); // Fetch all entries on initial load\n    }\n\n    // --- New: Subscribe to realtime updates for knowledge_records with source 'journal' ---\n    let unsubscribeInsert: (() => void) | undefined;\n    let unsubscribeUpdate: (() => void) | undefined;\n    let unsubscribeDelete: (() => void) | undefined;\n\n\n    if (memoryEngine?.context?.eventBus) { // Check if MemoryEngine and its EventBus are available\n        const eventBus = memoryEngine.context.eventBus;\n        const userId = systemContext?.currentUser?.id;\n\n        // Subscribe to insert events\n        unsubscribeInsert = eventBus.subscribe('knowledge_record_insert', (payload: KnowledgeRecord) => {\n            if (payload.user_id === userId && payload.source === 'journal') {\n                console.log('Journal page received knowledge_record_insert event:', payload);\n                // Add the new entry and keep sorted\n                setEntries(prevEntries => [payload, ...prevEntries].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()));\n            }\n        });\n\n        // Subscribe to update events\n        unsubscribeUpdate = eventBus.subscribe('knowledge_record_update', (payload: KnowledgeRecord) => {\n             if (payload.user_id === userId && payload.source === 'journal') {\n                 console.log('Journal page received knowledge_record_update event:', payload);\n                 // Update the specific entry in the state\n                 setEntries(prevEntries => prevEntries.map(entry => entry.id === payload.id ? payload : entry));\n             }\n         });\n\n        // Subscribe to delete events\n        unsubscribeDelete = eventBus.subscribe('knowledge_record_delete', (payload: { id: string, userId: string }) => {\n             if (payload.userId === userId) {\n                 console.log('Journal page received knowledge_record_delete event:', payload);\n                 // Remove the deleted entry from the state\n                 setEntries(prevEntries => prevEntries.filter(entry => entry.id !== payload.id));\n             }\n         });\n    }\n    // --- End New ---\n\n\n    return () => {\n        // Unsubscribe on component unmount\n        unsubscribeInsert?.();\n        unsubscribeUpdate?.();\n        unsubscribeDelete?.();\n    };\n\n  }, [systemContext?.currentUser?.id, memoryEngine]); // Re-run effect when user ID or service changes\n\n\n    const toggleExpandEntry = (entryId: string) => {\n        setExpandedEntries(prevState => ({\n            ...prevState,\n            [entryId]: !prevState[entryId]\n        }));\n    };\n\n    // --- New: Handle Create Entry ---\n    const handleCreateEntry = async (e: React.FormEvent) => {\n        e.preventDefault();\n        const userId = systemContext?.currentUser?.id;\n        if (!knowledgeSync || !userId || !newEntryContent.trim()) {\n            alert(\"KnowledgeSync module not initialized, user not logged in, or entry content is empty.\");\n            return;\n        }\n\n        setIsSavingEntry(true);\n        setError(null);\n        try {\n            // Journal entries are stored as Knowledge Records with source 'journal'\n            // The 'question' can be the first line or a timestamp, 'answer' is the main content.\n            // Let's use the timestamp as the question for simplicity.\n            const timestamp = new Date().toISOString();\n            const question = ";
Journal;
Entry;
$;
{
    timestamp;
}
"; // Use timestamp as question\n            const answer = newEntryContent.trim(); // Use content as answer\n            const source = 'journal';\n            const tags = newEntryTags.map(tag => tag.trim()).filter(tag => tag); // Clean and filter tags\n            const isStarred = newEntryIsStarred;\n\n            const savedRecord = await knowledgeSync.saveKnowledge(question, answer, userId, source, undefined, isStarred, tags); // Pass all details\n\n            if (savedRecord) {\n                alert(";
Journal;
entry;
created;
successfully(__makeTemplateObject([");\n                console.log('Created new journal entry:', savedRecord);\n                // Reset form\n                setNewEntryContent('');\n                setNewEntryTags([]);\n                setNewEntryIsStarred(false);\n                setIsCreatingEntry(false); // Hide form\n                // State update handled by realtime listener\n                 // Simulate recording user action\n                authorityForgingEngine?.recordAction({\n                    type: 'web:journal:create',\n                    details: { entryId: savedRecord.id, contentPreview: savedRecord.answer.substring(0, 50) + '...' },\n                    context: { platform: 'web', page: 'journal' },\n                    user_id: userId, // Associate action with user\n                });\n            } else {\n                setError('Failed to create journal entry.');\n            }\n        } catch (err: any) {\n            console.error('Error creating journal entry:', err);\n            setError("], [");\n                console.log('Created new journal entry:', savedRecord);\n                // Reset form\n                setNewEntryContent('');\n                setNewEntryTags([]);\n                setNewEntryIsStarred(false);\n                setIsCreatingEntry(false); // Hide form\n                // State update handled by realtime listener\n                 // Simulate recording user action\n                authorityForgingEngine?.recordAction({\n                    type: 'web:journal:create',\n                    details: { entryId: savedRecord.id, contentPreview: savedRecord.answer.substring(0, 50) + '...' },\n                    context: { platform: 'web', page: 'journal' },\n                    user_id: userId, // Associate action with user\n                });\n            } else {\n                setError('Failed to create journal entry.');\n            }\n        } catch (err: any) {\n            console.error('Error creating journal entry:', err);\n            setError("]));
Failed;
to;
create;
journal;
entry: $;
{
    err.message;
}
");\n        } finally {\n            setIsSavingEntry(false);\n        }\n    };\n\n    const handleCancelCreate = () => {\n        setIsCreatingEntry(false);\n        setNewEntryContent('');\n        setNewEntryTags([]);\n        setNewEntryIsStarred(false);\n        setError(null); // Clear error when cancelling\n    };\n    // --- End New ---\n\n    // --- New: Handle Edit Entry ---\n    const handleEditEntryClick = (entry: KnowledgeRecord) => {\n        setEditingEntry(entry);\n        setEditingEntryContent(entry.answer); // Edit the answer (content)\n        setEditingEntryTags(entry.tags || []);\n        setEditingEntryIsStarred(entry.is_starred || false);\n        setError(null); // Clear previous errors when starting edit\n    };\n\n    const handleUpdateEntry = async (e: React.FormEvent) => {\n        e.preventDefault();\n        const userId = systemContext?.currentUser?.id;\n        if (!knowledgeSync || !editingEntry || !userId) return; // Safety checks\n\n        if (!editingEntryContent.trim()) {\n            alert('Journal entry content cannot be empty.');\n            return;\n        }\n\n        setIsUpdatingEntry(true);\n        setError(null);\n        try {\n            // Update the Knowledge Record\n            const updatedEntry = await knowledgeSync.updateKnowledge(editingEntry.id, {\n                answer: editingEntryContent.trim(), // Update the answer (content)\n                tags: editingEntryTags.map(tag => tag.trim()).filter(tag => tag), // Update tags\n                is_starred: editingEntryIsStarred, // Update starred status\n                // Question and source remain 'journal' and original timestamp\n            }, userId); // Pass userId\n\n            if (updatedEntry) {\n                alert(";
Journal;
entry;
updated;
successfully(__makeTemplateObject([");\n                console.log('Entry updated:', updatedEntry);\n                setEditingEntry(null); // Close edit form\n                setEditingEntryContent('');\n                setEditingEntryTags([]);\n                setEditingEntryIsStarred(false);\n                // State update handled by realtime listener\n                 // Simulate recording user action\n                authorityForgingEngine?.recordAction({\n                    type: 'web:journal:update',\n                    details: { entryId: updatedEntry.id, contentPreview: updatedEntry.answer.substring(0, 50) + '...' },\n                    context: { platform: 'web', page: 'journal' },\n                    user_id: userId, // Associate action with user\n                });\n            } else {\n                setError('Failed to update journal entry.');\n            }\n        } catch (err: any) {\n            console.error('Error updating journal entry:', err);\n            setError("], [");\n                console.log('Entry updated:', updatedEntry);\n                setEditingEntry(null); // Close edit form\n                setEditingEntryContent('');\n                setEditingEntryTags([]);\n                setEditingEntryIsStarred(false);\n                // State update handled by realtime listener\n                 // Simulate recording user action\n                authorityForgingEngine?.recordAction({\n                    type: 'web:journal:update',\n                    details: { entryId: updatedEntry.id, contentPreview: updatedEntry.answer.substring(0, 50) + '...' },\n                    context: { platform: 'web', page: 'journal' },\n                    user_id: userId, // Associate action with user\n                });\n            } else {\n                setError('Failed to update journal entry.');\n            }\n        } catch (err: any) {\n            console.error('Error updating journal entry:', err);\n            setError("]));
Failed;
to;
update;
journal;
entry: $;
{
    err.message;
}
");\n        } finally {\n            setIsUpdatingEntry(false);\n        }\n    };\n\n    const handleCancelEdit = () => {\n        setEditingEntry(null);\n        setEditingEntryContent('');\n        setEditingEntryTags([]);\n        setEditingEntryIsStarred(false);\n        setError(null);\n    };\n    // --- End New ---\n\n\n   const handleDeleteEntry = async (entryId: string) => {\n       const userId = systemContext?.currentUser?.id;\n       if (!knowledgeSync || !userId) {\n           alert(\"KnowledgeSync module not initialized or user not logged in.\");\n           return;\n       }\n       if (!confirm(";
Are;
you;
sure;
you;
want;
to;
delete this;
journal;
entry ? ")) return;\n\n       setError(null);\n       try {\n           // Delete the Knowledge Record\n           const success = await knowledgeSync.deleteKnowledge(entryId, userId); // Pass entryId and userId\n           if (success) {\n               console.log('Entry deleted:', entryId);\n               // State update handled by realtime listener\n                alert('Journal entry deleted successfully!');\n                 // Simulate recording user action\n                authorityForgingEngine?.recordAction({\n                    type: 'web:journal:delete',\n                    details: { entryId },\n                    context: { platform: 'web', page: 'journal' },\n                    user_id: userId, // Associate action with user\n                });\n           } else {\n               setError('Failed to delete journal entry.');\n           }\n       } catch (err: any) {\n           console.error('Error deleting journal entry:', err);\n           setError(" : ;
Failed;
to;
delete journal;
entry: $;
{
    err.message;
}
");\n       } finally {\n           setLoading(false); // Ensure loading is false after delete attempt\n       }\n   };\n\n    // --- New: Handle Tag Input Change ---\n    const handleTagInputChange = (e: React.ChangeEvent<HTMLInputElement>, isEditing: boolean) => {\n        const tags = e.target.value.split(',').map(tag => tag.trim()).filter(tag => tag);\n        if (isEditing) {\n            setEditingEntryTags(tags);\n        } else {\n            setNewEntryTags(tags);\n        }\n    };\n\n    const getTagInputString = (tags: string[] | undefined) => {\n        return (tags || []).join(', ');\n    };\n    // --- End New ---\n\n    // --- New: Handle Star Toggle ---\n    const handleToggleStar = async (entry: KnowledgeRecord) => {\n        const userId = systemContext?.currentUser?.id;\n        if (!knowledgeSync || !userId) return;\n\n        const newStarredStatus = !entry.is_starred;\n        console.log(";
Toggling;
star;
for (entry; $; { entry: entry, : .id })
    to;
$;
{
    newStarredStatus;
}
");\n         // Simulate recording user action\n        authorityForgingEngine?.recordAction({\n            type: ";
web: journal: toggle_star: $;
{
    newStarredStatus;
}
",\n            details: { entryId: entry.id, isStarred: newStarredStatus },\n            context: { platform: 'web', page: 'journal' },\n            user_id: userId, // Associate action with user\n        });\n\n        // Optimistically update UI\n        setEntries(prevEntries => prevEntries.map(e => e.id === entry.id ? { ...e, is_starred: newStarredStatus } : e));\n\n        try {\n            // Update the Knowledge Record in the backend\n            await knowledgeSync.updateKnowledge(entry.id, { is_starred: newStarredStatus }, userId);\n            // Realtime listener will confirm the update, but optimistic update is faster\n        } catch (err: any) {\n            console.error(";
Error;
toggling;
star;
for (entry; $; { entry: entry, : .id })
    : ", err);\n            setError(";
Failed;
to;
toggle;
star: $;
{
    err.message;
}
");\n            // Revert optimistic update on error\n            setEntries(prevEntries => prevEntries.map(e => e.id === entry.id ? { ...e, is_starred: !newStarredStatus } : e));\n        }\n    };\n    // --- End New ---\n\n\n   // Ensure user is logged in before rendering content\n  if (!systemContext?.currentUser) {\n       // This case should ideally be handled by ProtectedRoute, but as a fallback:\n       return (\n            <div className=\"container mx-auto p-4 flex justify-center\">\n               <div className=\"bg-neutral-800/50 p-8 rounded-lg shadow-xl w-full max-w-md text-center text-neutral-300\">\n                   <p>Please log in to view your journal.</p>\n               </div>\n            </div>\n       );\n  }\n\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <div className=\"bg-neutral-800/50 p-6 rounded-lg shadow-xl\">\n        <h2 className=\"text-3xl font-bold text-blue-400 mb-6\">Journal (\u65E5\u8A8C)</h2>\n        <p className=\"text-neutral-300 mb-8\">Record your thoughts, experiences, and daily logs.</p>\n\n        {/* Form for creating new entries */}\n        {!isCreatingEntry && !editingEntry && ( // Only show create button if not creating or editing\n            <div className=\"mb-8 p-4 bg-neutral-700/50 rounded-lg\">\n                 <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Add New Journal Entry</h3>\n                 <button\n                     className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition disabled:opacity-50\"\n                     onClick={() => { setIsCreatingEntry(true); setError(null); }}\n                     disabled={isSavingEntry || isUpdatingEntry}\n                 >\n                     <PlusCircle size={20} className=\"inline-block mr-2\"/> Add Entry\n                 </button>\n            </div>\n        )}\n\n        {isCreatingEntry && !editingEntry && ( // Show create form if creating and not editing\n             <div className=\"mb-8 p-4 bg-neutral-700/50 rounded-lg\">\n                 <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">New Journal Entry</h3>\n                 <form onSubmit={handleCreateEntry}>\n                     <div className=\"mb-4\">\n                        <label htmlFor=\"newEntryContent\" className=\"block text-neutral-300 text-sm font-semibold mb-2\">Content:</label>\n                         <textarea\n                            id=\"newEntryContent\"\n                            className=\"w-full p-2 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                            value={newEntryContent}\n                            onChange={(e) => setNewEntryContent(e.target.value)}\n                            placeholder=\"Write your journal entry here... (Markdown supported)\"\n                            rows={8}\n                            disabled={isSavingEntry}\n                            required\n                         />\n                    </div>\n                     {/* New: Tags and Starred Input */}\n                     <div className=\"mb-4 p-3 bg-neutral-600/50 rounded-md space-y-2\">\n                         <h4 className=\"text-neutral-300 text-sm font-semibold mb-2\">Metadata:</h4>\n                         <div>\n                             <label htmlFor=\"newEntryTags\" className=\"block text-neutral-400 text-xs font-semibold mb-1\">Tags (comma-separated):</label>\n                             <input\n                                 id=\"newEntryTags\"\n                                 type=\"text\"\n                                 className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                 value={getTagInputString(newEntryTags)}\n                                 onChange={(e) => handleTagInputChange(e, false)}\n                                 placeholder=\"e.g., daily, work, idea\"\n                                 disabled={isSavingEntry}\n                             />\n                         </div>\n                          <div className=\"flex items-center gap-2\">\n                              <input\n                                  type=\"checkbox\"\n                                  id=\"newEntryIsStarred\"\n                                  className=\"form-checkbox h-4 w-4 text-blue-600 rounded border-neutral-600 bg-neutral-800 focus:ring-blue-500\"\n                                  checked={newEntryIsStarred}\n                                  onChange={(e) => setNewEntryIsStarred(e.target.checked)}\n                                  disabled={isSavingEntry}\n                              />\n                              <label htmlFor=\"newEntryIsStarred\" className=\"text-neutral-300 text-sm\">Star this entry</label>\n                          </div>\n                     </div>\n                     {/* End New */}\n                    <div className=\"flex gap-4\">\n                        <button\n                            type=\"submit\"\n                            className=\"px-6 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                            disabled={isSavingEntry || !newEntryContent.trim()}\n                        >\n                            {isSavingEntry ? 'Saving...' : 'Save Entry'}\n                        </button>\n                         <button\n                            type=\"button\"\n                            onClick={handleCancelCreate}\n                            className=\"px-6 py-2 bg-neutral-600 text-white font-semibold rounded-md hover:bg-neutral-700 transition\"\n                            disabled={isSavingEntry}\n                        >\n                            Cancel\n                        </button>\n                    </div>\n               </form>\n                 {error && isSavingEntry === false && ( // Show create error only after it finishes\n                     <p className=\"text-red-400 text-sm mt-4\">Error: {error}</p>\n                 )}\n            </div>\n        )}\n\n        {/* Form for editing an entry */}\n        {editingEntry && ( // Show edit form if editing\n             <div className=\"mb-8 p-4 bg-neutral-700/50 rounded-lg\">\n                 <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Edit Journal Entry</h3>\n                 <form onSubmit={handleUpdateEntry}>\n                     <div className=\"mb-4\">\n                        <label htmlFor=\"editingEntryContent\" className=\"block text-neutral-300 text-sm font-semibold mb-2\">Content:</label>\n                         <textarea\n                            id=\"editingEntryContent\"\n                            className=\"w-full p-2 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                            value={editingEntryContent}\n                            onChange={(e) => setEditingEntryContent(e.target.value)}\n                            placeholder=\"Edit journal entry content... (Markdown supported)\"\n                            rows={8}\n                            disabled={isUpdatingEntry}\n                            required\n                         />\n                    </div>\n                     {/* New: Tags and Starred Input (Edit) */}\n                     <div className=\"mb-4 p-3 bg-neutral-600/50 rounded-md space-y-2\">\n                         <h4 className=\"text-neutral-300 text-sm font-semibold mb-2\">Metadata:</h4>\n                         <div>\n                             <label htmlFor=\"editingEntryTags\" className=\"block text-neutral-400 text-xs font-semibold mb-1\">Tags (comma-separated):</label>\n                             <input\n                                 id=\"editingEntryTags\"\n                                 type=\"text\"\n                                 className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                 value={getTagInputString(editingEntryTags)}\n                                 onChange={(e) => handleTagInputChange(e, true)}\n                                 placeholder=\"e.g., daily, work, idea\"\n                                 disabled={isUpdatingEntry}\n                             />\n                         </div>\n                          <div className=\"flex items-center gap-2\">\n                              <input\n                                  type=\"checkbox\"\n                                  id=\"editingEntryIsStarred\"\n                                  className=\"form-checkbox h-4 w-4 text-blue-600 rounded border-neutral-600 bg-neutral-800 focus:ring-blue-500\"\n                                  checked={editingEntryIsStarred}\n                                  onChange={(e) => setEditingEntryIsStarred(e.target.checked)}\n                                  disabled={isUpdatingEntry}\n                              />\n                              <label htmlFor=\"editingEntryIsStarred\" className=\"text-neutral-300 text-sm\">Star this entry</label>\n                          </div>\n                     </div>\n                     {/* End New */}\n                    <div className=\"flex gap-4\">\n                        <button\n                            type=\"submit\"\n                            className=\"px-6 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                            disabled={isUpdatingEntry || !editingEntryContent.trim()}\n                        >\n                            {isUpdatingEntry ? 'Saving...' : 'Save Changes'}\n                        </button>\n                         <button\n                            type=\"button\"\n                            onClick={handleCancelEdit}\n                            className=\"px-6 py-2 bg-neutral-600 text-white font-semibold rounded-md hover:bg-neutral-700 transition\"\n                            disabled={isUpdatingEntry}\n                        >\n                            Cancel\n                        </button>\n                    </div>\n               </form>\n                 {error && isUpdatingEntry === false && ( // Show update error only after it finishes\n                     <p className=\"text-red-400 text-sm mt-4\">Error: {error}</p>\n                 )}\n            </div>\n        )}\n\n\n        {/* Entries List */}\n        <div className=\"p-4 bg-neutral-700/50 rounded-lg\">\n            <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Your Journal Entries ({entries.length})</h3>\n            {loading && !isSavingEntry && !isUpdatingEntry ? ( // Show loading only if not currently saving/updating\n              <p className=\"text-neutral-400\">Loading journal entries...</p>\n            ) : error && !isCreatingEntry && !editingEntry ? ( // Show main error if not in create/edit mode\n                 <p className=\"text-red-400\">Error: {error}</p>\n            ) : entries.length === 0 ? (\n              <p className=\"text-neutral-400\">No journal entries found yet. Add one using the form above.</p>\n            ) : (\n              <ul className=\"space-y-4\">\n                {entries.map((entry) => (\n                  <li key={entry.id} className={";
bg - neutral - 600 / 50;
p - 4;
rounded - md;
border - l - 4;
border - blue - 500(__makeTemplateObject(["}>\n                    <div className=\"flex justify-between items-center mb-2\">\n                        <div className=\"flex items-center gap-3\">\n                            <BookOpen size={20} className=\"text-blue-400\"/>\n                            <h4 className=\"font-semibold text-blue-200\">{entry.question}</h4> {/* Display timestamp/question */}\n                        </div>\n                         {/* New: Star Icon and Expand/Collapse Button */}\n                         <div className=\"flex gap-2 items-center\">\n                             <button\n                                 className=\"text-neutral-400 hover:text-yellow-400 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                 onClick={() => handleToggleStar(entry)}\n                                 disabled={isSavingEntry || isUpdatingEntry}\n                             >\n                                 {entry.is_starred ? <Star size={20} className=\"text-yellow-400 fill-yellow-400\"/> : <Star size={20}/>}\n                             </button>\n                             <button onClick={() => toggleExpandEntry(entry.id)} className=\"text-neutral-400 hover:text-white transition\">\n                                {expandedEntries[entry.id] ? <ChevronUp size={20} /> : <ChevronDown size={20} />}                             </button>\n                         </div>\n                         {/* End New */}\n                    </div>\n                    {/* Content (Collapsible) */}\n                    {expandedEntries[entry.id] && ((\n                         <div className=\"mt-2 border-t border-neutral-600 pt-2\">\n                             <div className=\"text-neutral-300 text-sm prose prose-invert max-w-none\"> {/* Use prose for markdown styling */}\n                                 <ReactMarkdown>{entry.answer}</ReactMarkdown>\n                             </div>\n                         </div>\n                    ))}\n                    <small className=\"text-neutral-400 text-xs block mt-2\">\n                        ID: {entry.id} | Created: {new Date(entry.timestamp).toLocaleString()}\n                         {entry.tags && entry.tags.length > 0 && "], ["}>\n                    <div className=\"flex justify-between items-center mb-2\">\n                        <div className=\"flex items-center gap-3\">\n                            <BookOpen size={20} className=\"text-blue-400\"/>\n                            <h4 className=\"font-semibold text-blue-200\">{entry.question}</h4> {/* Display timestamp/question */}\n                        </div>\n                         {/* New: Star Icon and Expand/Collapse Button */}\n                         <div className=\"flex gap-2 items-center\">\n                             <button\n                                 className=\"text-neutral-400 hover:text-yellow-400 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                 onClick={() => handleToggleStar(entry)}\n                                 disabled={isSavingEntry || isUpdatingEntry}\n                             >\n                                 {entry.is_starred ? <Star size={20} className=\"text-yellow-400 fill-yellow-400\"/> : <Star size={20}/>}\n                             </button>\n                             <button onClick={() => toggleExpandEntry(entry.id)} className=\"text-neutral-400 hover:text-white transition\">\n                                {expandedEntries[entry.id] ? <ChevronUp size={20} /> : <ChevronDown size={20} />}\\\n                             </button>\n                         </div>\n                         {/* End New */}\n                    </div>\n                    {/* Content (Collapsible) */}\n                    {expandedEntries[entry.id] && ((\n                         <div className=\"mt-2 border-t border-neutral-600 pt-2\">\n                             <div className=\"text-neutral-300 text-sm prose prose-invert max-w-none\"> {/* Use prose for markdown styling */}\n                                 <ReactMarkdown>{entry.answer}</ReactMarkdown>\n                             </div>\n                         </div>\n                    ))}\n                    <small className=\"text-neutral-400 text-xs block mt-2\">\n                        ID: {entry.id} | Created: {new Date(entry.timestamp).toLocaleString()}\n                         {entry.tags && entry.tags.length > 0 && "])) | Tags;
$;
{
    entry.tags.join(', ');
}
"}\n                    </small>\n\n                    {/* Entry Actions */}\n                    <div className=\"mt-3 flex gap-2\">\n                         {/* Edit Button */}\n                         <button\n                            className=\"px-3 py-1 text-xs bg-yellow-600 text-white rounded hover:bg-yellow-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                            onClick={() => handleEditEntryClick(entry)}\n                            disabled={isSavingEntry || isUpdatingEntry}\n                         >\n                            <Edit size={16} className=\"inline-block mr-1\"/> Edit\n                         </button>\n                         {/* Delete Button */}\n                         <button\n                            className=\"px-3 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                            onClick={() => handleDeleteEntry(entry.id)}\n                            disabled={isSavingEntry || isUpdatingEntry}\n                         >\n                            <Trash2 size={16} className=\"inline-block mr-1\"/> Delete\n                         </button>\n                         {/* TODO: Add Copy button (Part of \u6B0A\u80FD\u935B\u9020: \u89C0\u5BDF - record action) */}\n                    </div>\n                  </li>\n                ))}              </ul>\n            )}\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Journal;\n"(__makeTemplateObject([""], [""]));
