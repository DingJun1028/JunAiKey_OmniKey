var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// packages/@junai/sdk/src/index.ts\n// Jun.Ai.Key SDK Entry Point\n\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { ApiProxy } from './apiProxy'; // Assuming ApiProxy is part of the SDK or used internally\nimport { KnowledgeClient } from './knowledge';\nimport { TaskClient } from './tasks';\nimport { GoalClient } from './goals';\nimport { RuneClient } from './runes';\nimport { AuthClient } from './auth'; // Import AuthClient\n// Import other client modules\nimport { GlossaryClient } from './glossary';\nimport { FileClient } from './files';\nimport { RepositoryClient } from './repositories';\nimport { CalendarClient } from './calendar';\nimport { TemplateClient } from './templates';\nimport { KnowledgeGraphClient } from './knowledgeGraph';\nimport { AnalyticsClient } from './analytics'; // Import AnalyticsClient\nimport { EvolutionClient } from './evolution'; // Import EvolutionClient\nimport { SecurityClient } from './security'; // Import SecurityClient\nimport { NotificationClient } from './notifications'; // Import NotificationClient\n\n\nexport interface JunAiKeyConfig {\n  supabaseUrl: string;\n  supabaseAnonKey: string;\n  // Add other configuration options (e.g., custom API endpoint for your deployed gateway)\n  junaiApiEndpoint?: string; // Optional: Endpoint for your custom API Gateway\n}\n\nexport class JunAiKeySDK {\n  private supabaseClient: SupabaseClient;\n  private apiProxy: ApiProxy; // SDK's internal API proxy\n\n  // Expose client modules\n  public auth: AuthClient; // Expose AuthClient\n  public knowledge: KnowledgeClient;\n  public tasks: TaskClient;\n  public runes: RuneClient; // Client for interacting with runes (public and user-owned)\n  public goals: GoalClient;\n  public glossary: GlossaryClient;\n  public files: FileClient;\n  public repositories: RepositoryClient;\n  public calendar: CalendarClient;\n  public templates: TemplateClient;\n  public knowledgeGraph: KnowledgeGraphClient;\n  public analytics: AnalyticsClient; // Expose AnalyticsClient\n  public evolution: EvolutionClient; // Expose EvolutionClient\n  public security: SecurityClient; // Expose SecurityClient\n  public notifications: NotificationClient; // Expose NotificationClient\n\n\n  constructor(config: JunAiKeyConfig) {\n    if (!config.supabaseUrl || !config.supabaseAnonKey) {\n      throw new Error('Supabase URL and Anon Key are required for the SDK.');\n    }\n\n    this.supabaseClient = new SupabaseClient(config.supabaseUrl, config.supabaseAnonKey);\n\n    // The SDK's ApiProxy might call directly to Supabase or to your custom API Gateway\n    // For simplicity, let's assume it calls directly to Supabase for DB operations\n    // and potentially to a custom endpoint for other actions (like triggering AI analysis)\n    this.apiProxy = new ApiProxy(this.supabaseClient, config.junaiApiEndpoint); // Pass Supabase client and optional custom endpoint\n\n    // Initialize client modules, passing necessary dependencies\n    this.auth = new AuthClient(this.supabaseClient); // Initialize AuthClient\n    this.knowledge = new KnowledgeClient(this.apiProxy);\n    this.tasks = new TaskClient(this.apiProxy);\n    this.runes = new RuneClient(this.apiProxy); // Rune client uses apiProxy\n    this.goals = new GoalClient(this.apiProxy);\n    this.glossary = new GlossaryClient(this.apiProxy);\n    this.files = new FileClient(this.apiProxy);\n    this.repositories = new RepositoryClient(this.apiProxy);\n    this.calendar = new CalendarClient(this.apiProxy);\n    this.templates = new TemplateClient(this.apiProxy);\n    this.knowledgeGraph = new KnowledgeGraphClient(this.apiProxy);\n    this.analytics = new AnalyticsClient(this.apiProxy); // Initialize AnalyticsClient\n    this.evolution = new EvolutionClient(this.apiProxy); // Initialize EvolutionClient\n    this.security = new SecurityClient(this.apiProxy); // Initialize SecurityClient\n    this.notifications = new NotificationClient(this.apiProxy); // Initialize NotificationClient\n  }\n\n  // Expose the underlying Supabase client if needed (optional)\n  public getSupabaseClient(): SupabaseClient {\n    return this.supabaseClient;\n  }\n\n  // Add other top-level SDK methods if needed\n}\n\n// Example Usage:\n// const junai = new JunAiKeySDK({\n//   supabaseUrl: 'YOUR_SUPABASE_URL',\n//   supabaseAnonKey: 'YOUR_SUPABASE_ANON_KEY',\n//   junaiApiEndpoint: 'YOUR_DEPLOYED_API_GATEWAY_URL' // Optional\n// });\n//\n// async function example() {\n//   // Authenticate user\n//   const { user, session } = await junai.auth.signInWithPassword('email', 'password');\n//\n//   // Create a knowledge record\n//   if (user) {\n//     const newRecord = await junai.knowledge.create({\n//       question: 'What is Jun.Ai.Key?',\n//       answer: 'Jun.Ai.Key is a personal AI operating system.',\n//       userId: user.id // Pass user ID for RLS\n//     });\n//     console.log('Created record:', newRecord);\n//   }\n//\n//   // Trigger an action via the API Gateway (if junaiApiEndpoint is configured)\n//   // This assumes your API Gateway has an /analyze endpoint that processes input\n//   if (junai.apiProxy.getApiEndpoint()) {\n//      const analysisResult = await junai.apiProxy.callApi('/api/v1/analyze', 'POST', { text: 'Create a task to buy milk' });\n//      console.log('Analysis result:', analysisResult);\n//   }\n// }\n//\n// example();\n"], ["typescript\n// packages/@junai/sdk/src/index.ts\n// Jun.Ai.Key SDK Entry Point\n\nimport { SupabaseClient } from '@supabase/supabase-js';\nimport { ApiProxy } from './apiProxy'; // Assuming ApiProxy is part of the SDK or used internally\nimport { KnowledgeClient } from './knowledge';\nimport { TaskClient } from './tasks';\nimport { GoalClient } from './goals';\nimport { RuneClient } from './runes';\nimport { AuthClient } from './auth'; // Import AuthClient\n// Import other client modules\nimport { GlossaryClient } from './glossary';\nimport { FileClient } from './files';\nimport { RepositoryClient } from './repositories';\nimport { CalendarClient } from './calendar';\nimport { TemplateClient } from './templates';\nimport { KnowledgeGraphClient } from './knowledgeGraph';\nimport { AnalyticsClient } from './analytics'; // Import AnalyticsClient\nimport { EvolutionClient } from './evolution'; // Import EvolutionClient\nimport { SecurityClient } from './security'; // Import SecurityClient\nimport { NotificationClient } from './notifications'; // Import NotificationClient\n\n\nexport interface JunAiKeyConfig {\n  supabaseUrl: string;\n  supabaseAnonKey: string;\n  // Add other configuration options (e.g., custom API endpoint for your deployed gateway)\n  junaiApiEndpoint?: string; // Optional: Endpoint for your custom API Gateway\n}\n\nexport class JunAiKeySDK {\n  private supabaseClient: SupabaseClient;\n  private apiProxy: ApiProxy; // SDK's internal API proxy\n\n  // Expose client modules\n  public auth: AuthClient; // Expose AuthClient\n  public knowledge: KnowledgeClient;\n  public tasks: TaskClient;\n  public runes: RuneClient; // Client for interacting with runes (public and user-owned)\n  public goals: GoalClient;\n  public glossary: GlossaryClient;\n  public files: FileClient;\n  public repositories: RepositoryClient;\n  public calendar: CalendarClient;\n  public templates: TemplateClient;\n  public knowledgeGraph: KnowledgeGraphClient;\n  public analytics: AnalyticsClient; // Expose AnalyticsClient\n  public evolution: EvolutionClient; // Expose EvolutionClient\n  public security: SecurityClient; // Expose SecurityClient\n  public notifications: NotificationClient; // Expose NotificationClient\n\n\n  constructor(config: JunAiKeyConfig) {\n    if (!config.supabaseUrl || !config.supabaseAnonKey) {\n      throw new Error('Supabase URL and Anon Key are required for the SDK.');\n    }\n\n    this.supabaseClient = new SupabaseClient(config.supabaseUrl, config.supabaseAnonKey);\n\n    // The SDK's ApiProxy might call directly to Supabase or to your custom API Gateway\n    // For simplicity, let's assume it calls directly to Supabase for DB operations\n    // and potentially to a custom endpoint for other actions (like triggering AI analysis)\n    this.apiProxy = new ApiProxy(this.supabaseClient, config.junaiApiEndpoint); // Pass Supabase client and optional custom endpoint\n\n    // Initialize client modules, passing necessary dependencies\n    this.auth = new AuthClient(this.supabaseClient); // Initialize AuthClient\n    this.knowledge = new KnowledgeClient(this.apiProxy);\n    this.tasks = new TaskClient(this.apiProxy);\n    this.runes = new RuneClient(this.apiProxy); // Rune client uses apiProxy\n    this.goals = new GoalClient(this.apiProxy);\n    this.glossary = new GlossaryClient(this.apiProxy);\n    this.files = new FileClient(this.apiProxy);\n    this.repositories = new RepositoryClient(this.apiProxy);\n    this.calendar = new CalendarClient(this.apiProxy);\n    this.templates = new TemplateClient(this.apiProxy);\n    this.knowledgeGraph = new KnowledgeGraphClient(this.apiProxy);\n    this.analytics = new AnalyticsClient(this.apiProxy); // Initialize AnalyticsClient\n    this.evolution = new EvolutionClient(this.apiProxy); // Initialize EvolutionClient\n    this.security = new SecurityClient(this.apiProxy); // Initialize SecurityClient\n    this.notifications = new NotificationClient(this.apiProxy); // Initialize NotificationClient\n  }\n\n  // Expose the underlying Supabase client if needed (optional)\n  public getSupabaseClient(): SupabaseClient {\n    return this.supabaseClient;\n  }\n\n  // Add other top-level SDK methods if needed\n}\n\n// Example Usage:\n// const junai = new JunAiKeySDK({\n//   supabaseUrl: 'YOUR_SUPABASE_URL',\n//   supabaseAnonKey: 'YOUR_SUPABASE_ANON_KEY',\n//   junaiApiEndpoint: 'YOUR_DEPLOYED_API_GATEWAY_URL' // Optional\n// });\n//\n// async function example() {\n//   // Authenticate user\n//   const { user, session } = await junai.auth.signInWithPassword('email', 'password');\n//\n//   // Create a knowledge record\n//   if (user) {\n//     const newRecord = await junai.knowledge.create({\n//       question: 'What is Jun.Ai.Key?',\n//       answer: 'Jun.Ai.Key is a personal AI operating system.',\n//       userId: user.id // Pass user ID for RLS\n//     });\n//     console.log('Created record:', newRecord);\n//   }\n//\n//   // Trigger an action via the API Gateway (if junaiApiEndpoint is configured)\n//   // This assumes your API Gateway has an /analyze endpoint that processes input\n//   if (junai.apiProxy.getApiEndpoint()) {\n//      const analysisResult = await junai.apiProxy.callApi('/api/v1/analyze', 'POST', { text: 'Create a task to buy milk' });\n//      console.log('Analysis result:', analysisResult);\n//   }\n// }\n//\n// example();\n"]))(__makeTemplateObject([""], [""]));
