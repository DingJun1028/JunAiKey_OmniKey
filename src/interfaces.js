var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// src/interfaces.ts\n// Jun.Ai.Key System Interfaces\n// Defines the data structures used throughout the system.\n\n// --- Core Data Pillars ---\nimport { MemoirArchiver } from './core/services/memoirArchiver';\n\n// Long-term Memory (\\u6c38\\u4e45\\u8a18\\u61b6)\nexport interface KnowledgeRecord {\n  id: string;\n  user_id: string; // Link to the user who owns this record\n  question: string; // The question part (or title/summary)\n  answer: string; // The answer part (or content)\n  timestamp: string; // ISO 8601 format\n  source?: string; // e.g., 'manual', 'gemini-chat', 'copilot-insight', 'web-scrape', 'dev-log', 'datafied-log', 'journal', 'visual-reading', 'file-analysis', 'web-analysis'\n  tags?: string[]; // Optional tags for categorization\n  embedding_vector?: number[]; // Vector embedding for semantic search (stored in DB as vector type)\n  dev_log_details?: any; // JSONB for details specific to dev logs or datafication\n  is_starred?: boolean; // Whether the record is starred\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the content\n  // --- End New ---\n}\n\nexport interface KnowledgeCollection {\n  id: string;\n  user_id: string; // Link to the user who owns this collection\n  name: string;\n  description?: string;\n  creation_timestamp: string;\n  last_updated_timestamp: string;\n  // TODO: Add public/private status, cover image, tags, etc.\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Primary language of the collection\n  // --- End New ---\n}\n\nexport interface KnowledgeRelation {\n  id: string;\n  user_id: string; // Link to the user who owns this relation\n  source_record_id: string; // ID of the source knowledge record\n  target_record_id: string; // ID of the target knowledge record\n  relation_type: string; // e.g., 'related', 'prerequisite', 'follow-up', 'contradicts', 'supports', 'example', 'derived_from'\n  details?: any; // Optional JSONB for details about the relation\n  creation_timestamp: string;\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the relation description/details\n  // --- End New ---\n}\n\nexport interface GlossaryTerm {\n  id: string;\n  term: string;\n  definition: string;\n  related_concepts?: string[]; // Array of related term strings\n  pillar_domain?: string; // Which core pillar or domain the term belongs to\n  creation_timestamp: string;\n  last_updated_timestamp: string;\n  user_id?: string; // Optional: User who added/owns the term\n  is_public: boolean; // Whether the term is publicly visible\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the term and definition\n  // --- End New ---\n}\n\n\n// Self-Navigation (\\u81ea\\u6211\\u5c0e\\u822a)\nexport interface Task {\n  id: string;\n  user_id: string; // Link to the user who owns this task\n  description: string;\n  status: 'pending' | 'in-progress' | 'completed' | 'failed' | 'paused' | 'cancelled';\n  current_step_index: number; // Index of the current step being executed\n  creation_timestamp: string;\n  start_timestamp: string | null; // When the task started execution\n  completion_timestamp: string | null; // When the task completed, failed, or was cancelled\n  error?: string; // Error message if status is 'failed'\n  steps: TaskStep[]; // Array of task steps (nested or joined)\n  linked_task_ids?: string[]; // Optional: Link to other tasks (e.g., sub-tasks)\n  linked_kr_id?: string | null; // Optional: Link to a Key Result\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the task description and steps\n  // --- End New ---\n}\n\nexport interface TaskStep {\n  id: string;\n  task_id: string; // Link to the parent task\n  step_order: number; // Order of the step within the task\n  description: string; // Description of the step\n  action: ActionIntent; // The action to perform for this step\n  status: 'pending' | 'in-progress' | 'completed' | 'failed' | 'skipped' | 'waiting_input'; // Status of the step\n  result?: any; // Result of the action execution (JSONB)\n  error?: string; // Error message if status is 'failed'\n  start_timestamp: string | null; // When the step started execution\n  end_timestamp: string | null; // When the step completed or failed\n  // --- New: Add language field (optional, can inherit from task) ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the step description\n  // --- End New ---\n}\n\nexport interface AgenticFlow {\n  id: string;\n  user_id: string; // Link to the user who owns this flow\n  name: string;\n  description?: string;\n  entry_node_id: string; // ID of the starting node in the 'nodes' array\n  status: 'idle' | 'pending' | 'in-progress' | 'completed' | 'failed' | 'paused' | 'cancelled';\n  current_node_id: string | null; // ID of the currently executing node (for in-progress flows)\n  creation_timestamp: string;\n  start_timestamp: string | null;\n  completion_timestamp: string | null;\n  last_execution_result?: any; // JSONB - Stores result/log of the last run\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the flow name, description, nodes, and edges\n  // --- End New ---\n}\n\nexport interface AgenticFlowNode {\n  id: string; // DB UUID\n  flow_id: string; // Link to parent flow\n  node_id_in_flow: string; // The ID used in the flow's nodes/edges definition (e.g., 'start', 'step-1')\n  type: string; // 'task_step', 'decision', 'parallel', 'sub_workflow', 'rune_action', 'ability_execution', 'manual_input'\n  description: string; // Description of the node\n  action?: ActionIntent; // Action configuration for executable nodes\n  decision_logic?: any; // Logic for decision nodes (JSONB)\n  // --- New: Add language field (optional, can inherit from flow) ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the node description\n  // --- End New ---\n}\n\nexport interface AgenticFlowEdge {\n  id: string; // DB UUID\n  flow_id: string; // Link to parent flow\n  edge_id_in_flow?: string; // The ID used in the flow's edges definition (e.g., 'e1') - Optional, can be generated\n  source_node_id: string; // ID of the source node (references node_id_in_flow)\n  target_node_id: string; // ID of the target node (references node_id_in_flow)\n  condition?: any; // Optional condition for conditional edges (JSONB)\n  // --- New: Add language field (optional, can inherit from flow) ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the edge label/description (if any)\n  // --- End New ---\n}\n\nexport interface AgenticFlowExecution {\n  id: string; // DB UUID\n  flow_id: string; // Link to the executed flow\n  user_id: string; // Link to the user who ran the flow\n  status: 'pending' | 'in-progress' | 'completed' | 'failed' | 'paused' | 'cancelled';\n  start_timestamp: string;\n  completion_timestamp: string | null;\n  execution_log_summary?: string; // Summary of the execution log\n  result?: any; // Final result of the execution (JSONB)\n  error?: string; // Error message if failed\n  current_node_id?: string; // ID of the currently executing node (references node_id_in_flow)\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the log summary, result, error\n  // --- End New ---\n}\n\n\n// Authority Forging (\\u6b0a\\u80fd\\u935b\\u9020)\nexport interface UserAction {\n  id: string;\n  timestamp: string; // ISO 8601\n  user_id: string | null; // Link to user (can be null for system actions not tied to a user)\n  type: string; // e.g., 'gui:click', 'cli:command', 'api:call', 'task:execute', 'kb:save', 'ability:run', 'system:processing:failed', 'system:webhook:received:...'\n  details?: any; // Specific details of the action (JSONB)\n  context?: any; // Contextual information (JSONB) (e.g., app name, URL, session ID, platform: 'cli' | 'web' | 'mobile', correlationId)\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the action details/context description\n  // --- End New ---\n}\n\nexport interface ForgedAbility {\n  id: string;\n  name: string;\n  description?: string;\n  script: string; // The code or script to execute (e.g., JavaScript/TypeScript)\n  trigger: AbilityTrigger; // JSONB field for trigger configuration (e.g., { type: 'keyword', value: 'send email' })\n  forged_from_actions?: string[]; // Array of user_action IDs this was forged from\n  creation_timestamp: string;\n  last_used_timestamp?: string; // When the ability was last executed\n  user_id: string | null; // Link to user (null for public abilities)\n  is_public: boolean; // Can this ability be shared?\n  version: string;\n  capacity_cost: number; // Cost in rune capacity units\n  is_enabled: boolean; // Enabled by default\n  // TODO: Add author_id, rating, tags, installation_count, permissions\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the name, description, script comments\n  // --- End New ---\n}\n\nexport interface AbilityTrigger {\n  type: 'manual' | 'keyword' | 'schedule' | 'event' | 'webhook' | 'location' | 'time';\n  // Specific details depend on type, e.g.:\n  // keyword: { value: string }\n  // schedule: { cron: string }\n  // event: { eventType: string, filter?: any }\n  // webhook: { endpoint: string, secret?: string }\n  // location: { latitude: number, longitude: number, radius?: number }\n  // time: { time: string, days?: number[] } // Time of day, days of week\n  // Add other trigger-specific properties\n  // --- New: Add language field (optional, can inherit from ability) ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of keyword or event description\n  // --- End New ---\n}\n\n\n// Wisdom Precipitation (\\u667a\\u6167\\u6c89\\u6fb1)\nexport interface EvolutionaryInsight {\n  id: string;\n  user_id: string; // Link to the user the insight is for\n  type: 'automation_opportunity' | 'task_failure_diagnosis' | 'skill_suggestion' | 'optimization_recommendation' | 'scripting_app_suggestion' | 'dev_workflow_suggestion' | 'novel_combination_suggestion';\n  details: any; // Specific details of the insight (JSONB) (e.g., pattern found, task ID, suggested action)\n  timestamp: string; // ISO 8601\n  dismissed: boolean; // Has the user dismissed this insight? (Deprecated, use status)\n  // --- New: Add status field for insights ---\n  status: 'pending' | 'actioned' | 'dismissed' | 'ignored'; // Status of the insight processing\n  // --- End New ---\n  // TODO: Add action_taken status, related_action_id (if automated/acted upon)\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the insight details/message\n  // --- End New ---\n}\n\n\n// Security Service (\\u5b89\\u5168\\u670d\\u52d9)\nexport interface SystemEvent {\n  id: string;\n  timestamp: string; // ISO 8601\n  user_id: string | null; // User associated with the event (can be null for system-wide events)\n  type: string; // e.g., 'security_event_recorded', 'sync_started', 'task_completed', 'rune_action_executed', 'system_error'\n  payload?: any; // Details of the event (JSONB)\n  context?: any; // Contextual information (JSONB) (e.g., source service, correlationId)\n  severity?: 'info' | 'warning' | 'error'; // Severity level\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the event payload/message\n  // --- End New ---\n}\n\nexport interface SensitiveDataEntry {\n  key: string; // Unique key for the data (e.g., 'openai_api_key', 'github_pat', 'working_copy_key')\n  encrypted_data: string; // The encrypted data\n  timestamp: string; // When the data was last updated\n  // Add other metadata like encryption algorithm, key ID\n  user_id?: string; // Link to user if user-specific sensitive data\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of any descriptive fields (less likely here)\n  // --- End New ---\n}\n\n\n// Notification Service (\\u901a\\u77e5\\u670d\\u52d9)\nexport interface Notification {\n    id: string;\n    user_id?: string; // Target user (can be null for system-wide notifications)\n    type: 'info' | 'warning' | 'error' | 'success';\n    message: string;\n    details?: any; // JSONB for details (e.g., linked task ID, insight ID)\n    timestamp: string; // ISO 8601\n    is_read: boolean;\n    channel: 'ui' | 'email' | 'webhook' | 'push'; // Delivery channel\n    // TODO: Add action links, icon, expiry\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the message and details\n    // --- End New ---\n}\n\n\n// Calendar Service (\\u65e5\\u66c6\\u670d\\u52d9)\nexport interface CalendarEvent {\n  id: string;\n  user_id: string; // Link to user\n  title: string; // Event title\n  description?: string; // Optional description\n  start_timestamp: string; // ISO 8601\n  end_timestamp?: string; // ISO 8601\n  all_day: boolean;\n  location?: string; // Optional location\n  url?: string; // Optional URL related to the event\n  source?: string; // e.g., 'manual', 'extracted_from_image', 'synced_from_google_calendar'\n  tags?: string[]; // Optional tags\n  created_at: string; // ISO 8601\n  updated_at: string; // ISO 8601\n  // TODO: Add recurrence rules, attendees, reminders, status (confirmed, cancelled), linked_task_id, linked_kr_id\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the title, description, location\n  // --- End New ---\n}\n\n\n// Template Service (\\u7bc4\\u672c\\u670d\\u52d9)\nexport interface Template {\n  id: string;\n  user_id: string; // Link to user\n  name: string; // Template name\n  description?: string; // Optional description\n  type: 'knowledge_record' | 'task' | 'agentic_flow' | 'prompt' | 'document' | 'email' | 'report'; // Type of content/workflow the template is for\n  content: any; // The template content (JSONB) - structure depends on type\n  is_public: boolean; // Is this a public template?\n  tags?: string[]; // Optional tags\n  created_at: string; // ISO 8601\n  updated_at: string; // ISO 8601\n  // TODO: Add author_id, rating, usage_count\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the name, description, content\n  // --- End New ---\n}\n\n\n// User Profile (profiles table)\nexport interface User {\n  id: string; // Matches auth.users id\n  email: string;\n  name?: string; // Full name\n  avatarUrl?: string; // URL to avatar image\n  role?: string; // User role (e.g., 'authenticated', 'admin')\n  rune_capacity?: number; // User's total rune capacity\n  created_at?: string; // From auth.users\n  last_sign_in_at?: string; // From auth.users\n  // --- New: Add language preference field ---\n  language_preference?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - User's preferred language\n  // --- End New ---\n  // Add other profile fields here\n}\n\n\n// Sync Service (\\u540c\\u6b65\\u670d\\u52d9)\nexport interface LocalDataChange {\n  id: string; // Unique ID for the change entry\n  dataType: string; // e.g., 'memoryEngine', 'selfNavigationEngine'\n  changeType: 'INSERT' | 'UPDATE' | 'DELETE';\n  recordId?: string; // ID of the record being changed (if applicable)\n  payload: any; // The data payload (e.g., new record, update details, deleted record ID)\n  timestamp: number; // Timestamp when the change occurred locally (milliseconds)\n  userId: string; // User ID associated with the change\n  status: 'pending' | 'processing' | 'completed' | 'failed'; // Status of the change in the queue\n  retryCount: number; // Number of times pushing this change has been retried\n  error?: string; // Last error message if pushing failed\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the data being changed (optional)\n  // --- End New ---\n}\n\nexport interface CloudSyncConfig {\n  enabled: boolean;\n  provider: 'supabase' | 'google_drive' | 'dropbox' | 'onedrive'; // Cloud storage provider\n  // Provider-specific configuration (e.g., bucket name, folder path)\n  supabase?: {\n    // Supabase config is handled by main app config\n  };\n  google_drive?: {\n    folder_id?: string; // Specific folder ID in Google Drive\n  };\n  // Add other provider configs\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language preference for synced data (e.g., if translating)\n  // --- End New ---\n}\n\nexport interface BoostSpaceSyncConfig {\n  enabled: boolean;\n  webhook_url: string; // Boost.space webhook URL\n  api_key?: string; // Boost.space API Key (store securely!)\n  // Mapping configuration: how Jun.Ai.Key data types map to Boost.space modules/items\n  mappings: Array<{\n    junai_type: string; // e.g., 'knowledge_record', 'task'\n    boostspace_module_id: string; // Boost.space module ID\n    field_mapping: Record<string, string>; // Map Jun.Ai.Key fields to Boost.space fields\n    // Add filters, transformation rules\n  }>;\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language preference for data sent to Boost.space\n  // --- End New ---\n}\n\nexport interface SyncStatusUpdatePayload {\n    dataType: string; // The data type or 'system'\n    userId: string;\n    status: 'idle' | 'syncing' | 'error' | 'unknown';\n    step?: string; // Current step message\n    timestamp: number; // Timestamp of the status update\n    queueSize?: number; // Current size of the local change queue (for system status)\n    // Add other relevant status details\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the status/step message\n    // --- End New ---\n}\n\nexport interface SyncResultPayload {\n    dataType: string; // The data type or 'system'\n    userId: string;\n    status: 'success' | 'failed';\n    timestamp: number; // Timestamp of completion/failure\n    direction?: 'up' | 'down' | 'bidirectional'; // Sync direction\n    itemsProcessed?: number; // Number of items successfully processed\n    conflicts?: number; // Number of conflicts encountered\n    errors?: number; // Number of errors encountered\n    duration_ms?: number; // Duration of the sync operation in milliseconds\n    error?: string; // Error message on failure\n    // Add other relevant result details\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the result/error message\n    // --- End New ---\n}\n\nexport interface SyncErrorPayload {\n    dataType: string; // The data type or 'system'\n    userId: string;\n    error: string; // Error message\n    timestamp: number; // Timestamp of the error\n    step?: string; // Step where the error occurred\n    change?: LocalDataChange; // The specific change that failed (if applicable)\n    retryCount?: number; // Retry count for the failed change\n    direction?: 'up' | 'down' | 'bidirectional'; // Sync direction\n    // Add other relevant error details\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the error message\n    // --- End New ---\n}\n\nexport interface WorkingCopySyncStatus {\n    repoName: string;\n    status: 'idle' | 'syncing' | 'error';\n    step?: string; // Current step message (e.g., 'Pulling', 'Pushing', 'Merging')\n    timestamp: number; // Timestamp of the status update\n    error?: string; // Error message on failure\n    // Add other relevant status details (e.g., last commit, current branch)\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the status/step message\n    // --- End New ---\n}\n\nexport interface MobileGitSyncConfig {\n    repo_url: string; // URL of the Git repository\n    branch?: string; // Default branch to sync\n    // Add other config like credentials (store securely!)\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language preference for commit messages, etc.\n    // --- End New ---\n}\n\n\n// Talent Management\nexport interface Talent {\n    id: string;\n    name: string;\n    description: string;\n    levels: TalentLevel[];\n    // Add other talent metadata\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the name, description, level descriptions\n    // --- End New ---\n}\n\nexport interface TalentLevel {\n    level: number;\n    unlock_criteria: any; // JSONB defining criteria (e.g., { type: 'agent_count', value: 5 })\n    effects: TalentEffect[]; // Effects granted at this level\n    unlocked_runes?: string[]; // IDs of runes unlocked at this level\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the level description\n    // --- End New ---\n}\n\nexport interface TalentEffect {\n    type: string; // e.g., 'skill_cooldown_reduction', 'api_latency_reduction', 'auto_error_repair', 'cross_platform_sync_boost', 'realtime_memory_upload', 'passive_skill'\n    value: any; // Value of the effect (e.g., 0.2, true, '\\u5275\\u4e16\\u9810\\u89bd')\n    description: string; // Description of the effect\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the description\n    // --- End New ---\n}\n\n\n// --- New: Add context field to query_knowledge payload ---\ndeclare module './BaseAgent' {\n    interface AgentMessage {\n        type: 'query_knowledge';\n        payload: {\n            query: string;\n            useSemanticSearch?: boolean;\n            language?: string;\n            context?: any; // Add context parameter here\n        };\n        correlationId?: string;\n        sender?: string;\n        recipient?: string;\n    }\n}\n// --- End New ---\n\n\n// Define the structure for ActionIntent (used in TaskStep, AgenticFlowNode, and DecisionAgent output)\nexport interface ActionIntent {\n    action: string; // The type of action (e.g., 'create_task', 'execute_rune', 'search_knowledge', 'answer_via_ai')\n    parameters?: any; // Parameters for the action (JSONB)\n    confidence?: number; // Confidence score (0-1) from intent analysis\n    original_intent?: string; // Original intent if the action is a fallback (e.g., 'answer_via_ai' after a failed generation)\n    original_parameters?: any; // Original parameters if the action is a fallback\n    // Add other metadata about the intent/action\n}\n\n// Define the structure for Webhook Event Payload (received by WebhookAgent)\nexport interface WebhookEventPayload {\n    source: string; // e.g., 'boostspace', 'github', 'makecom'\n    type: string; // e.g., 'item_created', 'push', 'new_message'\n    data: any; // The actual payload from the webhook source\n    timestamp: string; // ISO 8601\n    // Add other metadata like signature, headers\n}\n\n// Define the structure for Knowledge Chunks (used in RAG)\nexport interface KnowledgeChunk {\n    id: string; // Unique ID for the chunk\n    record_id: string; // Link back to the source knowledge record\n    content: string; // The text content of the chunk\n    embedding_vector?: number[]; // Vector embedding for semantic search\n    // Add other metadata like chunk_order, section_title\n}\n\n// Define the structure for User Feedback\nexport interface UserFeedback {\n    id: string;\n    record_id: string; // Link to the knowledge record (AI response)\n    user_id: string; // Link to the user providing feedback\n    feedback_type: 'correct' | 'incorrect'; // Type of feedback\n    comments?: string; // Optional comments from the user\n    timestamp: string; // ISO 8601\n    // Add other metadata like context (e.g., conversation turn ID)\n    // --- New: Add record details to feedback (for analysis) ---\n    record?: KnowledgeRecord; // Include the related knowledge record details\n    // --- End New ---\n}\n\n\n// System Context Interface\n// This interface defines the shape of the central context object\n// that is passed to all core services and agents.\nexport interface SystemContext {\n    // Core Services\n    memoirArchiver: MemoirArchiver; // MemoirArchiver instance\n    apiProxy: any; // ApiProxy instance\n    securityService: any; // SecurityService instance\n    loggingService: any; // LoggingService instance\n    cachingService: any; // CachingService instance\n    eventBus: any; // EventBus instance\n    syncService: any; // SyncService instance\n    memoryEngine: any; // MemoryEngine instance\n    authorityForgingEngine: any; // AuthorityForgingEngine instance\n    selfNavigationEngine: any; // SelfNavigationEngine instance\n    sacredRuneEngraver: any; // SacredRuneEngraver instance\n    wisdomSecretArt: any; // WisdomSecretArt instance\n    evolutionEngine: any; // EvolutionEngine instance\n    analyticsService: any; // AnalyticsService instance\n    goalManagementService: any; // GoalManagementService instance\n    notificationService: any; // NotificationService instance\n    glossaryService: any; // GlossaryService instance\n    fileService: any; // FileService instance\n    repositoryService: any; // RepositoryService instance\n    knowledgeGraphService: any; // KnowledgeGraphService instance\n    scriptSandbox: any; // ScriptSandbox instance\n    calendarService: any; // CalendarService instance\n    templateService: any; // TemplateService instance\n    syllabusGenerator: any; // SyllabusGenerator instance\n\n\n    // Agent System Components\n    messageBus: any; // MessageBus instance\n    agentFactory: any; // AgentFactory instance\n    agentRouter: any; // AgentRouter instance\n\n    // Global State (should be minimal here, prefer state within services/UI)\n    currentUser: User | null; // Currently authenticated user\n    currentFlow?: AgenticFlow | null; // The flow currently being viewed/edited (for editor/detail pages)\n\n    // --- New: Add global language preference (optional, can be stored in User profile) ---\n    // systemLanguage?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Overall system language\n    // --- End New ---\n\n    // Add other global context properties\n    supabaseClient?: SupabaseClient; // Direct Supabase client access (use ApiProxy or specific agents/services where possible)\n}\n"], ["typescript\n// src/interfaces.ts\n// Jun.Ai.Key System Interfaces\n// Defines the data structures used throughout the system.\n\n// --- Core Data Pillars ---\nimport { MemoirArchiver } from './core/services/memoirArchiver';\n\n// Long-term Memory (\\\\u6c38\\\\u4e45\\\\u8a18\\\\u61b6)\nexport interface KnowledgeRecord {\n  id: string;\n  user_id: string; // Link to the user who owns this record\n  question: string; // The question part (or title/summary)\n  answer: string; // The answer part (or content)\n  timestamp: string; // ISO 8601 format\n  source?: string; // e.g., 'manual', 'gemini-chat', 'copilot-insight', 'web-scrape', 'dev-log', 'datafied-log', 'journal', 'visual-reading', 'file-analysis', 'web-analysis'\n  tags?: string[]; // Optional tags for categorization\n  embedding_vector?: number[]; // Vector embedding for semantic search (stored in DB as vector type)\n  dev_log_details?: any; // JSONB for details specific to dev logs or datafication\n  is_starred?: boolean; // Whether the record is starred\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the content\n  // --- End New ---\n}\n\nexport interface KnowledgeCollection {\n  id: string;\n  user_id: string; // Link to the user who owns this collection\n  name: string;\n  description?: string;\n  creation_timestamp: string;\n  last_updated_timestamp: string;\n  // TODO: Add public/private status, cover image, tags, etc.\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Primary language of the collection\n  // --- End New ---\n}\n\nexport interface KnowledgeRelation {\n  id: string;\n  user_id: string; // Link to the user who owns this relation\n  source_record_id: string; // ID of the source knowledge record\n  target_record_id: string; // ID of the target knowledge record\n  relation_type: string; // e.g., 'related', 'prerequisite', 'follow-up', 'contradicts', 'supports', 'example', 'derived_from'\n  details?: any; // Optional JSONB for details about the relation\n  creation_timestamp: string;\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the relation description/details\n  // --- End New ---\n}\n\nexport interface GlossaryTerm {\n  id: string;\n  term: string;\n  definition: string;\n  related_concepts?: string[]; // Array of related term strings\n  pillar_domain?: string; // Which core pillar or domain the term belongs to\n  creation_timestamp: string;\n  last_updated_timestamp: string;\n  user_id?: string; // Optional: User who added/owns the term\n  is_public: boolean; // Whether the term is publicly visible\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the term and definition\n  // --- End New ---\n}\n\n\n// Self-Navigation (\\\\u81ea\\\\u6211\\\\u5c0e\\\\u822a)\nexport interface Task {\n  id: string;\n  user_id: string; // Link to the user who owns this task\n  description: string;\n  status: 'pending' | 'in-progress' | 'completed' | 'failed' | 'paused' | 'cancelled';\n  current_step_index: number; // Index of the current step being executed\n  creation_timestamp: string;\n  start_timestamp: string | null; // When the task started execution\n  completion_timestamp: string | null; // When the task completed, failed, or was cancelled\n  error?: string; // Error message if status is 'failed'\n  steps: TaskStep[]; // Array of task steps (nested or joined)\n  linked_task_ids?: string[]; // Optional: Link to other tasks (e.g., sub-tasks)\n  linked_kr_id?: string | null; // Optional: Link to a Key Result\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the task description and steps\n  // --- End New ---\n}\n\nexport interface TaskStep {\n  id: string;\n  task_id: string; // Link to the parent task\n  step_order: number; // Order of the step within the task\n  description: string; // Description of the step\n  action: ActionIntent; // The action to perform for this step\n  status: 'pending' | 'in-progress' | 'completed' | 'failed' | 'skipped' | 'waiting_input'; // Status of the step\n  result?: any; // Result of the action execution (JSONB)\n  error?: string; // Error message if status is 'failed'\n  start_timestamp: string | null; // When the step started execution\n  end_timestamp: string | null; // When the step completed or failed\n  // --- New: Add language field (optional, can inherit from task) ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the step description\n  // --- End New ---\n}\n\nexport interface AgenticFlow {\n  id: string;\n  user_id: string; // Link to the user who owns this flow\n  name: string;\n  description?: string;\n  entry_node_id: string; // ID of the starting node in the 'nodes' array\n  status: 'idle' | 'pending' | 'in-progress' | 'completed' | 'failed' | 'paused' | 'cancelled';\n  current_node_id: string | null; // ID of the currently executing node (for in-progress flows)\n  creation_timestamp: string;\n  start_timestamp: string | null;\n  completion_timestamp: string | null;\n  last_execution_result?: any; // JSONB - Stores result/log of the last run\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the flow name, description, nodes, and edges\n  // --- End New ---\n}\n\nexport interface AgenticFlowNode {\n  id: string; // DB UUID\n  flow_id: string; // Link to parent flow\n  node_id_in_flow: string; // The ID used in the flow's nodes/edges definition (e.g., 'start', 'step-1')\n  type: string; // 'task_step', 'decision', 'parallel', 'sub_workflow', 'rune_action', 'ability_execution', 'manual_input'\n  description: string; // Description of the node\n  action?: ActionIntent; // Action configuration for executable nodes\n  decision_logic?: any; // Logic for decision nodes (JSONB)\n  // --- New: Add language field (optional, can inherit from flow) ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the node description\n  // --- End New ---\n}\n\nexport interface AgenticFlowEdge {\n  id: string; // DB UUID\n  flow_id: string; // Link to parent flow\n  edge_id_in_flow?: string; // The ID used in the flow's edges definition (e.g., 'e1') - Optional, can be generated\n  source_node_id: string; // ID of the source node (references node_id_in_flow)\n  target_node_id: string; // ID of the target node (references node_id_in_flow)\n  condition?: any; // Optional condition for conditional edges (JSONB)\n  // --- New: Add language field (optional, can inherit from flow) ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the edge label/description (if any)\n  // --- End New ---\n}\n\nexport interface AgenticFlowExecution {\n  id: string; // DB UUID\n  flow_id: string; // Link to the executed flow\n  user_id: string; // Link to the user who ran the flow\n  status: 'pending' | 'in-progress' | 'completed' | 'failed' | 'paused' | 'cancelled';\n  start_timestamp: string;\n  completion_timestamp: string | null;\n  execution_log_summary?: string; // Summary of the execution log\n  result?: any; // Final result of the execution (JSONB)\n  error?: string; // Error message if failed\n  current_node_id?: string; // ID of the currently executing node (references node_id_in_flow)\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the log summary, result, error\n  // --- End New ---\n}\n\n\n// Authority Forging (\\\\u6b0a\\\\u80fd\\\\u935b\\\\u9020)\nexport interface UserAction {\n  id: string;\n  timestamp: string; // ISO 8601\n  user_id: string | null; // Link to user (can be null for system actions not tied to a user)\n  type: string; // e.g., 'gui:click', 'cli:command', 'api:call', 'task:execute', 'kb:save', 'ability:run', 'system:processing:failed', 'system:webhook:received:...'\n  details?: any; // Specific details of the action (JSONB)\n  context?: any; // Contextual information (JSONB) (e.g., app name, URL, session ID, platform: 'cli' | 'web' | 'mobile', correlationId)\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the action details/context description\n  // --- End New ---\n}\n\nexport interface ForgedAbility {\n  id: string;\n  name: string;\n  description?: string;\n  script: string; // The code or script to execute (e.g., JavaScript/TypeScript)\n  trigger: AbilityTrigger; // JSONB field for trigger configuration (e.g., { type: 'keyword', value: 'send email' })\n  forged_from_actions?: string[]; // Array of user_action IDs this was forged from\n  creation_timestamp: string;\n  last_used_timestamp?: string; // When the ability was last executed\n  user_id: string | null; // Link to user (null for public abilities)\n  is_public: boolean; // Can this ability be shared?\n  version: string;\n  capacity_cost: number; // Cost in rune capacity units\n  is_enabled: boolean; // Enabled by default\n  // TODO: Add author_id, rating, tags, installation_count, permissions\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the name, description, script comments\n  // --- End New ---\n}\n\nexport interface AbilityTrigger {\n  type: 'manual' | 'keyword' | 'schedule' | 'event' | 'webhook' | 'location' | 'time';\n  // Specific details depend on type, e.g.:\n  // keyword: { value: string }\n  // schedule: { cron: string }\n  // event: { eventType: string, filter?: any }\n  // webhook: { endpoint: string, secret?: string }\n  // location: { latitude: number, longitude: number, radius?: number }\n  // time: { time: string, days?: number[] } // Time of day, days of week\n  // Add other trigger-specific properties\n  // --- New: Add language field (optional, can inherit from ability) ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of keyword or event description\n  // --- End New ---\n}\n\n\n// Wisdom Precipitation (\\\\u667a\\\\u6167\\\\u6c89\\\\u6fb1)\nexport interface EvolutionaryInsight {\n  id: string;\n  user_id: string; // Link to the user the insight is for\n  type: 'automation_opportunity' | 'task_failure_diagnosis' | 'skill_suggestion' | 'optimization_recommendation' | 'scripting_app_suggestion' | 'dev_workflow_suggestion' | 'novel_combination_suggestion';\n  details: any; // Specific details of the insight (JSONB) (e.g., pattern found, task ID, suggested action)\n  timestamp: string; // ISO 8601\n  dismissed: boolean; // Has the user dismissed this insight? (Deprecated, use status)\n  // --- New: Add status field for insights ---\n  status: 'pending' | 'actioned' | 'dismissed' | 'ignored'; // Status of the insight processing\n  // --- End New ---\n  // TODO: Add action_taken status, related_action_id (if automated/acted upon)\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the insight details/message\n  // --- End New ---\n}\n\n\n// Security Service (\\\\u5b89\\\\u5168\\\\u670d\\\\u52d9)\nexport interface SystemEvent {\n  id: string;\n  timestamp: string; // ISO 8601\n  user_id: string | null; // User associated with the event (can be null for system-wide events)\n  type: string; // e.g., 'security_event_recorded', 'sync_started', 'task_completed', 'rune_action_executed', 'system_error'\n  payload?: any; // Details of the event (JSONB)\n  context?: any; // Contextual information (JSONB) (e.g., source service, correlationId)\n  severity?: 'info' | 'warning' | 'error'; // Severity level\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the event payload/message\n  // --- End New ---\n}\n\nexport interface SensitiveDataEntry {\n  key: string; // Unique key for the data (e.g., 'openai_api_key', 'github_pat', 'working_copy_key')\n  encrypted_data: string; // The encrypted data\n  timestamp: string; // When the data was last updated\n  // Add other metadata like encryption algorithm, key ID\n  user_id?: string; // Link to user if user-specific sensitive data\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of any descriptive fields (less likely here)\n  // --- End New ---\n}\n\n\n// Notification Service (\\\\u901a\\\\u77e5\\\\u670d\\\\u52d9)\nexport interface Notification {\n    id: string;\n    user_id?: string; // Target user (can be null for system-wide notifications)\n    type: 'info' | 'warning' | 'error' | 'success';\n    message: string;\n    details?: any; // JSONB for details (e.g., linked task ID, insight ID)\n    timestamp: string; // ISO 8601\n    is_read: boolean;\n    channel: 'ui' | 'email' | 'webhook' | 'push'; // Delivery channel\n    // TODO: Add action links, icon, expiry\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the message and details\n    // --- End New ---\n}\n\n\n// Calendar Service (\\\\u65e5\\\\u66c6\\\\u670d\\\\u52d9)\nexport interface CalendarEvent {\n  id: string;\n  user_id: string; // Link to user\n  title: string; // Event title\n  description?: string; // Optional description\n  start_timestamp: string; // ISO 8601\n  end_timestamp?: string; // ISO 8601\n  all_day: boolean;\n  location?: string; // Optional location\n  url?: string; // Optional URL related to the event\n  source?: string; // e.g., 'manual', 'extracted_from_image', 'synced_from_google_calendar'\n  tags?: string[]; // Optional tags\n  created_at: string; // ISO 8601\n  updated_at: string; // ISO 8601\n  // TODO: Add recurrence rules, attendees, reminders, status (confirmed, cancelled), linked_task_id, linked_kr_id\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the title, description, location\n  // --- End New ---\n}\n\n\n// Template Service (\\\\u7bc4\\\\u672c\\\\u670d\\\\u52d9)\nexport interface Template {\n  id: string;\n  user_id: string; // Link to user\n  name: string; // Template name\n  description?: string; // Optional description\n  type: 'knowledge_record' | 'task' | 'agentic_flow' | 'prompt' | 'document' | 'email' | 'report'; // Type of content/workflow the template is for\n  content: any; // The template content (JSONB) - structure depends on type\n  is_public: boolean; // Is this a public template?\n  tags?: string[]; // Optional tags\n  created_at: string; // ISO 8601\n  updated_at: string; // ISO 8601\n  // TODO: Add author_id, rating, usage_count\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the name, description, content\n  // --- End New ---\n}\n\n\n// User Profile (profiles table)\nexport interface User {\n  id: string; // Matches auth.users id\n  email: string;\n  name?: string; // Full name\n  avatarUrl?: string; // URL to avatar image\n  role?: string; // User role (e.g., 'authenticated', 'admin')\n  rune_capacity?: number; // User's total rune capacity\n  created_at?: string; // From auth.users\n  last_sign_in_at?: string; // From auth.users\n  // --- New: Add language preference field ---\n  language_preference?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - User's preferred language\n  // --- End New ---\n  // Add other profile fields here\n}\n\n\n// Sync Service (\\\\u540c\\\\u6b65\\\\u670d\\\\u52d9)\nexport interface LocalDataChange {\n  id: string; // Unique ID for the change entry\n  dataType: string; // e.g., 'memoryEngine', 'selfNavigationEngine'\n  changeType: 'INSERT' | 'UPDATE' | 'DELETE';\n  recordId?: string; // ID of the record being changed (if applicable)\n  payload: any; // The data payload (e.g., new record, update details, deleted record ID)\n  timestamp: number; // Timestamp when the change occurred locally (milliseconds)\n  userId: string; // User ID associated with the change\n  status: 'pending' | 'processing' | 'completed' | 'failed'; // Status of the change in the queue\n  retryCount: number; // Number of times pushing this change has been retried\n  error?: string; // Last error message if pushing failed\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the data being changed (optional)\n  // --- End New ---\n}\n\nexport interface CloudSyncConfig {\n  enabled: boolean;\n  provider: 'supabase' | 'google_drive' | 'dropbox' | 'onedrive'; // Cloud storage provider\n  // Provider-specific configuration (e.g., bucket name, folder path)\n  supabase?: {\n    // Supabase config is handled by main app config\n  };\n  google_drive?: {\n    folder_id?: string; // Specific folder ID in Google Drive\n  };\n  // Add other provider configs\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language preference for synced data (e.g., if translating)\n  // --- End New ---\n}\n\nexport interface BoostSpaceSyncConfig {\n  enabled: boolean;\n  webhook_url: string; // Boost.space webhook URL\n  api_key?: string; // Boost.space API Key (store securely!)\n  // Mapping configuration: how Jun.Ai.Key data types map to Boost.space modules/items\n  mappings: Array<{\\n    junai_type: string; // e.g., 'knowledge_record', 'task'\\n    boostspace_module_id: string; // Boost.space module ID\\n    field_mapping: Record<string, string>; // Map Jun.Ai.Key fields to Boost.space fields\\n    // Add filters, transformation rules\\n  }>;\\n  // --- New: Add language field ---\n  language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language preference for data sent to Boost.space\n  // --- End New ---\n}\n\nexport interface SyncStatusUpdatePayload {\n    dataType: string; // The data type or 'system'\n    userId: string;\n    status: 'idle' | 'syncing' | 'error' | 'unknown';\n    step?: string; // Current step message\n    timestamp: number; // Timestamp of the status update\n    queueSize?: number; // Current size of the local change queue (for system status)\n    // Add other relevant status details\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the status/step message\n    // --- End New ---\n}\n\nexport interface SyncResultPayload {\n    dataType: string; // The data type or 'system'\n    userId: string;\n    status: 'success' | 'failed';\n    timestamp: number; // Timestamp of completion/failure\n    direction?: 'up' | 'down' | 'bidirectional'; // Sync direction\n    itemsProcessed?: number; // Number of items successfully processed\n    conflicts?: number; // Number of conflicts encountered\n    errors?: number; // Number of errors encountered\n    duration_ms?: number; // Duration of the sync operation in milliseconds\n    error?: string; // Error message on failure\n    // Add other relevant result details\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the result/error message\n    // --- End New ---\n}\n\nexport interface SyncErrorPayload {\n    dataType: string; // The data type or 'system'\n    userId: string;\n    error: string; // Error message\n    timestamp: number; // Timestamp of the error\n    step?: string; // Step where the error occurred\n    change?: LocalDataChange; // The specific change that failed (if applicable)\n    retryCount?: number; // Retry count for the failed change\n    direction?: 'up' | 'down' | 'bidirectional'; // Sync direction\n    // Add other relevant error details\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the error message\n    // --- End New ---\n}\n\nexport interface WorkingCopySyncStatus {\n    repoName: string;\n    status: 'idle' | 'syncing' | 'error';\n    step?: string; // Current step message (e.g., 'Pulling', 'Pushing', 'Merging')\n    timestamp: number; // Timestamp of the status update\n    error?: string; // Error message on failure\n    // Add other relevant status details (e.g., last commit, current branch)\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the status/step message\n    // --- End New ---\n}\n\nexport interface MobileGitSyncConfig {\n    repo_url: string; // URL of the Git repository\n    branch?: string; // Default branch to sync\n    // Add other config like credentials (store securely!)\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language preference for commit messages, etc.\n    // --- End New ---\n}\n\n\n// Talent Management\nexport interface Talent {\n    id: string;\n    name: string;\n    description: string;\n    levels: TalentLevel[];\n    // Add other talent metadata\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the name, description, level descriptions\n    // --- End New ---\n}\n\nexport interface TalentLevel {\n    level: number;\n    unlock_criteria: any; // JSONB defining criteria (e.g., { type: 'agent_count', value: 5 })\n    effects: TalentEffect[]; // Effects granted at this level\n    unlocked_runes?: string[]; // IDs of runes unlocked at this level\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the level description\n    // --- End New ---\n}\n\nexport interface TalentEffect {\n    type: string; // e.g., 'skill_cooldown_reduction', 'api_latency_reduction', 'auto_error_repair', 'cross_platform_sync_boost', 'realtime_memory_upload', 'passive_skill'\n    value: any; // Value of the effect (e.g., 0.2, true, '\\\\u5275\\\\u4e16\\\\u9810\\\\u89bd')\n    description: string; // Description of the effect\n    // --- New: Add language field ---\n    language?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Language of the description\n    // --- End New ---\n}\n\n\n// --- New: Add context field to query_knowledge payload ---\ndeclare module './BaseAgent' {\n    interface AgentMessage {\n        type: 'query_knowledge';\n        payload: {\n            query: string;\n            useSemanticSearch?: boolean;\n            language?: string;\n            context?: any; // Add context parameter here\n        };\n        correlationId?: string;\n        sender?: string;\n        recipient?: string;\n    }\n}\n// --- End New ---\n\n\n// Define the structure for ActionIntent (used in TaskStep, AgenticFlowNode, and DecisionAgent output)\nexport interface ActionIntent {\n    action: string; // The type of action (e.g., 'create_task', 'execute_rune', 'search_knowledge', 'answer_via_ai')\n    parameters?: any; // Parameters for the action (JSONB)\n    confidence?: number; // Confidence score (0-1) from intent analysis\n    original_intent?: string; // Original intent if the action is a fallback (e.g., 'answer_via_ai' after a failed generation)\n    original_parameters?: any; // Original parameters if the action is a fallback\n    // Add other metadata about the intent/action\n}\n\n// Define the structure for Webhook Event Payload (received by WebhookAgent)\nexport interface WebhookEventPayload {\n    source: string; // e.g., 'boostspace', 'github', 'makecom'\n    type: string; // e.g., 'item_created', 'push', 'new_message'\n    data: any; // The actual payload from the webhook source\n    timestamp: string; // ISO 8601\n    // Add other metadata like signature, headers\n}\n\n// Define the structure for Knowledge Chunks (used in RAG)\nexport interface KnowledgeChunk {\n    id: string; // Unique ID for the chunk\n    record_id: string; // Link back to the source knowledge record\n    content: string; // The text content of the chunk\n    embedding_vector?: number[]; // Vector embedding for semantic search\n    // Add other metadata like chunk_order, section_title\n}\n\n// Define the structure for User Feedback\nexport interface UserFeedback {\n    id: string;\n    record_id: string; // Link to the knowledge record (AI response)\n    user_id: string; // Link to the user providing feedback\n    feedback_type: 'correct' | 'incorrect'; // Type of feedback\n    comments?: string; // Optional comments from the user\n    timestamp: string; // ISO 8601\n    // Add other metadata like context (e.g., conversation turn ID)\n    // --- New: Add record details to feedback (for analysis) ---\n    record?: KnowledgeRecord; // Include the related knowledge record details\n    // --- End New ---\n}\n\n\n// System Context Interface\n// This interface defines the shape of the central context object\n// that is passed to all core services and agents.\nexport interface SystemContext {\n    // Core Services\n    memoirArchiver: MemoirArchiver; // MemoirArchiver instance\n    apiProxy: any; // ApiProxy instance\n    securityService: any; // SecurityService instance\n    loggingService: any; // LoggingService instance\n    cachingService: any; // CachingService instance\n    eventBus: any; // EventBus instance\n    syncService: any; // SyncService instance\n    memoryEngine: any; // MemoryEngine instance\n    authorityForgingEngine: any; // AuthorityForgingEngine instance\n    selfNavigationEngine: any; // SelfNavigationEngine instance\n    sacredRuneEngraver: any; // SacredRuneEngraver instance\n    wisdomSecretArt: any; // WisdomSecretArt instance\n    evolutionEngine: any; // EvolutionEngine instance\n    analyticsService: any; // AnalyticsService instance\n    goalManagementService: any; // GoalManagementService instance\n    notificationService: any; // NotificationService instance\n    glossaryService: any; // GlossaryService instance\n    fileService: any; // FileService instance\n    repositoryService: any; // RepositoryService instance\n    knowledgeGraphService: any; // KnowledgeGraphService instance\n    scriptSandbox: any; // ScriptSandbox instance\n    calendarService: any; // CalendarService instance\n    templateService: any; // TemplateService instance\n    syllabusGenerator: any; // SyllabusGenerator instance\n\n\n    // Agent System Components\n    messageBus: any; // MessageBus instance\n    agentFactory: any; // AgentFactory instance\n    agentRouter: any; // AgentRouter instance\n\n    // Global State (should be minimal here, prefer state within services/UI)\n    currentUser: User | null; // Currently authenticated user\n    currentFlow?: AgenticFlow | null; // The flow currently being viewed/edited (for editor/detail pages)\n\n    // --- New: Add global language preference (optional, can be stored in User profile) ---\n    // systemLanguage?: string; // ISO 639-1 code (e.g., 'en', 'zh', 'fr') - Overall system language\n    // --- End New ---\n\n    // Add other global context properties\n    supabaseClient?: SupabaseClient; // Direct Supabase client access (use ApiProxy or specific agents/services where possible)\n}\n"]))(__makeTemplateObject([""], [""]));
