var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// src/pages/Dashboard.tsx\n// Dashboard Page (\u5100\u8868\u677F)\n// Provides an overview of the system status, including synchronization and recent activity.\n// --- New: Create a page for the Dashboard UI ---\n// --- New: Implement fetching and displaying sync status ---\n// --- New: Add UI for triggering full sync ---\n// --- New: Add UI for simulating Mobile Git sync ---\n// --- Modified: Display more detailed sync status and queue size ---\n// --- Modified: Add UI elements related to conflict resolution and background sync concepts ---\n// --- Modified: Update UI to reflect persistent queue concept ---\n// --- New: Fetch and display recent development logs ---\n// --- New: Add Realtime Updates for sync status and dev logs ---\n\n\nimport React, { useEffect, useState } from 'react';\nimport { SyncService } from '../modules/sync/SyncService';\nimport { AuthorityForgingEngine } from '../core/authority/AuthorityForgingEngine';\nimport { KnowledgeSync } from '../modules/knowledgeSync'; // To fetch dev logs\nimport { KnowledgeRecord } from '../interfaces'; // For dev logs type\nimport { RefreshCcw, GitPullRequest, GitPush, GitMerge, Loader2, Info } from 'lucide-react'; // Import icons\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst syncService: SyncService = window.systemContext?.syncService; // The Sync Service (\u540C\u6B65\u670D\u52D9)\nconst authorityForgingEngine: AuthorityForgingEngine = window.systemContext?.authorityForgingEngine; // The Authority Forging (\u6B0A\u80FD\u935B\u9020) pillar\nconst knowledgeSync: KnowledgeSync = window.systemContext?.knowledgeSync; // The Knowledge Sync (\u77E5\u8B58\u540C\u6B65) module\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\n\n// Define data types relevant to sync status display\nconst SYNCHRONIZABLE_DATA_TYPES = [\n    'memoryEngine', // Knowledge Records\n    'authorityForgingEngine', // User Actions, Abilities\n    'selfNavigationEngine', // Tasks, Task Steps, Agentic Flows\n    'runeEngraftingCenter', // Runes\n    'goalManagementService', // Goals, Key Results\n    'notificationService', // Notifications\n    'analyticsService', // Analytics data (might be derived, sync might push local analytics)\n    // Add other data types managed by services that need syncing\n] as const; // Use 'as const' to create a tuple of literal strings\n\ntype SynchronizableDataType = typeof SYNCHRONIZABLE_DATA_TYPES[number];\ntype SyncStatus = 'idle' | 'syncing' | 'error' | 'unknown'; // Define SyncStatus type\n\n\nconst Dashboard: React.FC = () => {\n  const [overallSyncStatus, setOverallSyncStatus] = useState<SyncStatus>('unknown'); // Use SyncStatus type\n  const [overallSyncStep, setOverallSyncStep] = useState<string | undefined>(undefined); // New state for overall step\n  const [moduleSyncStatuses, setModuleSyncStatuses] = useState<Record<SynchronizableDataType, { status: SyncStatus, step?: string, timestamp?: number | undefined }>>(() => { // Use SyncStatus type, added step\n      const initialStatuses: any = {};\n      SYNCHRONIZABLE_DATA_TYPES.forEach(type => {\n          initialStatuses[type] = { status: 'unknown', step: undefined, timestamp: undefined };\n      });\n      return initialStatuses;\n  });\n  const [localQueueSize, setLocalQueueSize] = useState(0);\n  const [recentDevLogs, setRecentDevLogs] = useState<KnowledgeRecord[]>([]);\n  const [loadingDevLogs, setLoadingDevLogs] = useState(true);\n  const [isSyncingAll, setIsSyncingAll] = useState(false);\n  const [isSimulatingGit, setIsSimulatingGit] = useState(false); // State for simulating Git sync\n  const [error, setError] = useState<string | null>(null);\n\n\n  const updateSyncStatuses = () => {\n      if (syncService) {\n          setOverallSyncStatus(syncService.getSyncStatus('system') || 'unknown');\n          setOverallSyncStep(syncService.getSyncStep('system')); // Get overall step\n          setLocalQueueSize(syncService.getLocalQueueSize()); // Get queue size\n          const updatedModuleStatuses: any = {};\n          SYNCHRONIZABLE_DATA_TYPES.forEach(type => {\n              updatedModuleStatuses[type] = {\n                  status: syncService.getSyncStatus(type) || 'unknown',\n                  step: syncService.getSyncStep(type), // Get module step\n                  timestamp: syncService.getLastSyncTimestamp(type),\n              };\n          });\n          setModuleSyncStatuses(updatedModuleStatuses);\n      } else {\n          setOverallSyncStatus('unknown');\n          setOverallSyncStep(undefined);\n          setLocalQueueSize(0);\n          const updatedModuleStatuses: any = {};\n           SYNCHRONIZABLE_DATA_TYPES.forEach(type => {\n              updatedStatuses[type] = { status: 'unknown', step: undefined, timestamp: undefined };\n          });\n          setModuleSyncStatuses(updatedStatuses);\n      }\n  };\n\n  const fetchRecentDevLogs = async () => {\n      const userId = systemContext?.currentUser?.id;\n      if (!knowledgeSync || !userId) {\n          // setError(\"KnowledgeSync module not initialized or user not logged in.\"); // Don't set error for just logs\n          setLoadingDevLogs(false);\n          return;\n      }\n      setLoadingDevLogs(true);\n      setError(null); // Clear main error when fetching logs\n      try {\n          // Fetch all knowledge records for the user and filter for dev logs\n          const allRecords = await knowledgeSync.getAllKnowledgeForUser(userId); // Pass userId\n          const devLogs = allRecords.filter(record => record.source === 'dev-log');\n          // Sort by timestamp descending\n          devLogs.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n          setRecentDevLogs(devLogs.slice(0, 10)); // Show only the 10 most recent\n      } catch (err: any) {\n          console.error('Error fetching dev logs:', err);\n          // setError("], ["typescript\n// src/pages/Dashboard.tsx\n// Dashboard Page (\\u5100\\u8868\\u677f)\n// Provides an overview of the system status, including synchronization and recent activity.\n// --- New: Create a page for the Dashboard UI ---\n// --- New: Implement fetching and displaying sync status ---\n// --- New: Add UI for triggering full sync ---\n// --- New: Add UI for simulating Mobile Git sync ---\n// --- Modified: Display more detailed sync status and queue size ---\n// --- Modified: Add UI elements related to conflict resolution and background sync concepts ---\n// --- Modified: Update UI to reflect persistent queue concept ---\n// --- New: Fetch and display recent development logs ---\n// --- New: Add Realtime Updates for sync status and dev logs ---\n\n\nimport React, { useEffect, useState } from 'react';\nimport { SyncService } from '../modules/sync/SyncService';\nimport { AuthorityForgingEngine } from '../core/authority/AuthorityForgingEngine';\nimport { KnowledgeSync } from '../modules/knowledgeSync'; // To fetch dev logs\nimport { KnowledgeRecord } from '../interfaces'; // For dev logs type\nimport { RefreshCcw, GitPullRequest, GitPush, GitMerge, Loader2, Info } from 'lucide-react'; // Import icons\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst syncService: SyncService = window.systemContext?.syncService; // The Sync Service (\\u540c\\u6b65\\u670d\\u52d9)\nconst authorityForgingEngine: AuthorityForgingEngine = window.systemContext?.authorityForgingEngine; // The Authority Forging (\\u6b0a\\u80fd\\u935b\\u9020) pillar\nconst knowledgeSync: KnowledgeSync = window.systemContext?.knowledgeSync; // The Knowledge Sync (\\u77e5\\u8b58\\u540c\\u6b65) module\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\n\n// Define data types relevant to sync status display\nconst SYNCHRONIZABLE_DATA_TYPES = [\n    'memoryEngine', // Knowledge Records\n    'authorityForgingEngine', // User Actions, Abilities\n    'selfNavigationEngine', // Tasks, Task Steps, Agentic Flows\n    'runeEngraftingCenter', // Runes\n    'goalManagementService', // Goals, Key Results\n    'notificationService', // Notifications\n    'analyticsService', // Analytics data (might be derived, sync might push local analytics)\n    // Add other data types managed by services that need syncing\n] as const; // Use 'as const' to create a tuple of literal strings\n\ntype SynchronizableDataType = typeof SYNCHRONIZABLE_DATA_TYPES[number];\ntype SyncStatus = 'idle' | 'syncing' | 'error' | 'unknown'; // Define SyncStatus type\n\n\nconst Dashboard: React.FC = () => {\n  const [overallSyncStatus, setOverallSyncStatus] = useState<SyncStatus>('unknown'); // Use SyncStatus type\n  const [overallSyncStep, setOverallSyncStep] = useState<string | undefined>(undefined); // New state for overall step\n  const [moduleSyncStatuses, setModuleSyncStatuses] = useState<Record<SynchronizableDataType, { status: SyncStatus, step?: string, timestamp?: number | undefined }>>(() => { // Use SyncStatus type, added step\n      const initialStatuses: any = {};\n      SYNCHRONIZABLE_DATA_TYPES.forEach(type => {\n          initialStatuses[type] = { status: 'unknown', step: undefined, timestamp: undefined };\n      });\n      return initialStatuses;\n  });\n  const [localQueueSize, setLocalQueueSize] = useState(0);\n  const [recentDevLogs, setRecentDevLogs] = useState<KnowledgeRecord[]>([]);\n  const [loadingDevLogs, setLoadingDevLogs] = useState(true);\n  const [isSyncingAll, setIsSyncingAll] = useState(false);\n  const [isSimulatingGit, setIsSimulatingGit] = useState(false); // State for simulating Git sync\n  const [error, setError] = useState<string | null>(null);\n\n\n  const updateSyncStatuses = () => {\n      if (syncService) {\n          setOverallSyncStatus(syncService.getSyncStatus('system') || 'unknown');\n          setOverallSyncStep(syncService.getSyncStep('system')); // Get overall step\n          setLocalQueueSize(syncService.getLocalQueueSize()); // Get queue size\n          const updatedModuleStatuses: any = {};\n          SYNCHRONIZABLE_DATA_TYPES.forEach(type => {\n              updatedModuleStatuses[type] = {\n                  status: syncService.getSyncStatus(type) || 'unknown',\n                  step: syncService.getSyncStep(type), // Get module step\n                  timestamp: syncService.getLastSyncTimestamp(type),\n              };\n          });\n          setModuleSyncStatuses(updatedModuleStatuses);\n      } else {\n          setOverallSyncStatus('unknown');\n          setOverallSyncStep(undefined);\n          setLocalQueueSize(0);\n          const updatedModuleStatuses: any = {};\n           SYNCHRONIZABLE_DATA_TYPES.forEach(type => {\n              updatedStatuses[type] = { status: 'unknown', step: undefined, timestamp: undefined };\n          });\n          setModuleSyncStatuses(updatedStatuses);\n      }\n  };\n\n  const fetchRecentDevLogs = async () => {\n      const userId = systemContext?.currentUser?.id;\n      if (!knowledgeSync || !userId) {\n          // setError(\\\"KnowledgeSync module not initialized or user not logged in.\\\"); // Don't set error for just logs\n          setLoadingDevLogs(false);\n          return;\n      }\n      setLoadingDevLogs(true);\n      setError(null); // Clear main error when fetching logs\n      try {\n          // Fetch all knowledge records for the user and filter for dev logs\n          const allRecords = await knowledgeSync.getAllKnowledgeForUser(userId); // Pass userId\n          const devLogs = allRecords.filter(record => record.source === 'dev-log');\n          // Sort by timestamp descending\n          devLogs.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n          setRecentDevLogs(devLogs.slice(0, 10)); // Show only the 10 most recent\n      } catch (err: any) {\n          console.error('Error fetching dev logs:', err);\n          // setError("]));
Failed;
to;
load;
development;
logs: $;
{
    err.message;
}
"); // Don't set error for just logs\n          setRecentDevLogs([]); // Clear actions on error\n      } finally {\n          setLoadingDevLogs(false);\n      }\n  };\n\n\n  useEffect(() => {\n    // Fetch initial data and set up listeners when the component mounts or user changes\n    if (systemContext?.currentUser?.id) {\n      updateSyncStatuses(); // Initial sync status check\n      fetchRecentDevLogs(); // Fetch initial dev logs\n\n      // Subscribe to sync status changes\n      let unsubscribeSyncStarted: (() => void) | undefined;\n      let unsubscribeSyncCompleted: (() => void) | undefined;\n      let unsubscribeSyncError: (() => void) | undefined;\n      let unsubscribeSyncStatusUpdate: (() => void) | undefined;\n      let unsubscribeMobileGitSynced: (() => void) | undefined;\n\n\n      if (syncService?.context?.eventBus) {\n          const eventBus = syncService.context.eventBus;\n\n           unsubscribeSyncStarted = eventBus.subscribe('sync_started', (payload: any) => {\n               if (payload.userId === systemContext?.currentUser?.id) {\n                   console.log('Dashboard received sync_started event.');\n                   updateSyncStatuses(); // Update all statuses\n                   // Reset specific sync states if the started event matches\n                   if (payload.dataType === 'system') {\n                       setIsSyncingAll(true);\n                   }\n               }\n           });\n            unsubscribeSyncCompleted = eventBus.subscribe('sync_completed', (payload: any) => {\n               if (payload.userId === systemContext?.currentUser?.id) {\n                   console.log('Dashboard received sync_completed event.');\n                   updateSyncStatuses(); // Update all statuses\n                   // Reset specific sync states if the completed event matches\n                   if (payload.dataType === 'system') {\n                       setIsSyncingAll(false);\n                   }\n                   // If knowledge sync completed, refetch dev logs\n                   if (payload.dataType === 'memoryEngine' || payload.dataType === 'system') {\n                       fetchRecentDevLogs();\n                   }\n               }\n           });\n            unsubscribeSyncError = eventBus.subscribe('sync_error', (payload: any) => {\n               if (payload.userId === systemContext?.currentUser?.id) {\n                   console.log('Dashboard received sync_error event.');\n                   updateSyncStatuses(); // Update all statuses\n                    // Reset specific sync states if the error event matches\n                   if (payload.dataType === 'system') {\n                       setIsSyncingAll(false);\n                       setError(";
Full;
sync;
failed: $;
{
    payload.error;
}
"); // Display overall error\n                   }\n               }\n           });\n            // Listen for detailed status updates (including queue size changes)\n             unsubscribeSyncStatusUpdate = eventBus.subscribe('sync_status_update', (payload: any) => {\n                 if (payload.userId === systemContext?.currentUser?.id) {\n                     console.log('Dashboard received sync_status_update event.');\n                     // Only update specific status/step if needed, or just trigger full status update\n                     updateSyncStatuses(); // Update all statuses including queue size\n                 }\n             });\n\n            // Listen for mobile git sync events specifically to refetch dev logs\n             unsubscribeMobileGitSynced = eventBus.subscribe('mobile_git_synced', (payload: any) => {\n                if (payload.userId === systemContext?.currentUser?.id) {\n                    console.log('Dashboard received mobile_git_synced event.');\n                    fetchRecentDevLogs(); // Refetch dev logs after git sync\n                }\n             });\n\n      }\n\n\n      return () => {\n        // Unsubscribe on component unmount\n        unsubscribeSyncStarted?.();\n        unsubscribeSyncCompleted?.();\n        unsubscribeSyncError?.();\n        unsubscribeSyncStatusUpdate?.();\n        unsubscribeMobileGitSynced?.();\n      };\n\n    } else {\n        // Reset state if user logs out\n        setOverallSyncStatus('unknown');\n        setOverallSyncStep(undefined);\n        setLocalQueueSize(0);\n        const initialStatuses: any = {};\n           SYNCHRONIZABLE_DATA_TYPES.forEach(type => {\n              initialStatuses[type] = { status: 'unknown', step: undefined, timestamp: undefined };\n          });\n        setModuleSyncStatuses(initialStatuses);\n        setRecentDevLogs([]);\n        setLoadingDevLogs(false);\n        setIsSyncingAll(false);\n        setIsSimulatingGit(false);\n        setError(null);\n    }\n\n  }, [systemContext?.currentUser?.id, syncService, knowledgeSync]); // Re-run effect when user ID, syncService, or knowledgeSync changes\n\n\n  const handleSyncAll = async () => {\n      const userId = systemContext?.currentUser?.id;\n      if (!syncService || !userId) {\n          alert(\"SyncService module not initialized or user not logged in.\");\n          return;\n      }\n      console.log(";
Attempting;
to;
sync;
all;
data;
for (user; ; )
    : $;
{
    userId;
}
");\n       // Simulate recording user action (Part of \u516D\u5F0F\u5967\u7FA9: \u89C0\u5BDF)\n        authorityForgingEngine?.recordAction({            type: 'web:dashboard:sync_all',            details: { userId },            context: { platform: 'web', page: 'dashboard' },            user_id: userId, // Associate action with user        });\n\n      setIsSyncingAll(true);\n      setError(null);\n      try {\n          // Trigger full sync (Part of \u96D9\u5410\u540C\u6B65\u9818\u57DF)\n          await syncService.syncAllData(userId); // Pass user ID\n          // Status and logs will be updated by listeners\n      } catch (err: any) {\n          console.error('Error during full sync:', err);\n          // Error is already set by updateSyncStatuses on sync_error event\n          // setError(";
Full;
sync;
failed: $;
{
    err.message;
}
");\n      } finally {\n          // setIsSyncingAll is reset by the sync_completed/sync_error event listeners for 'system'\n      }\n  };\n\n   const handleSimulateGit = async (direction: 'pull' | 'push' | 'bidirectional') => {\n       const userId = systemContext?.currentUser?.id;\n       if (!syncService || !userId) {\n           alert(\"SyncService module not initialized or user not logged in.\");\n           return;\n       }\n       console.log(";
Attempting;
to;
simulate;
Git;
$;
{
    direction;
}
for (user; ; )
    : $;
{
    userId;
}
");\n        // Simulate recording user action (Part of \u516D\u5F0F\u5967\u7FA9: \u89C0\u5BDF)\n        authorityForgingEngine?.recordAction({            type: ";
web: dashboard: simulate_git_$;
{
    direction;
}
",            details: { direction, userId },            context: { platform: 'web', page: 'dashboard' },            user_id: userId, // Associate action with user        });\n\n       setIsSimulatingGit(true); // Use a single state for simplicity, or separate states for pull/push\n       setError(null);\n       try {\n           // Trigger simulated mobile Git sync via SyncService (Part of \u96D9\u5410\u540C\u6B65\u9818\u57DF)\n           // The SyncService will record a dev log in the KB and publish status events\n           await syncService.syncMobileGitRepo(userId, direction, { repoUrl: 'simulated/mobile/repo' }); // Pass user ID and simulated details\n           // Dev logs will be refetched by the listener\n       } catch (err: any) {\n           console.error(";
Error;
simulating;
Git;
$;
{
    direction;
}
", err);\n           setError(";
Simulated;
Git;
$;
{
    direction;
}
failed: $;
{
    err.message;
}
");\n       } finally {\n           setIsSimulatingGit(false);\n       }\n   };\n\n\n  // Ensure user is logged in before rendering content\n  if (!systemContext?.currentUser) {\n       // This case should ideally be handled by ProtectedRoute, but as a fallback:\n       return (\n            <div className=\"container mx-auto p-4 flex justify-center\">\n               <div className=\"bg-neutral-800/50 p-8 rounded-lg shadow-xl w-full max-w-md text-center text-neutral-300\">\n                   <p>Please log in to view the dashboard.</p>\n               </div>\n            </div>\n       );\n  }\n\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <div className=\"bg-neutral-800/50 p-6 rounded-lg shadow-xl\">\n        <h2 className=\"text-3xl font-bold text-blue-400 mb-6\">Dashboard (\u5100\u8868\u677F)</h2>\n        <p className=\"text-neutral-300 mb-8\">Overview of your Jun.Ai.Key system status and recent activity.</p>\n\n        {/* Overall Synchronization Status */}\n        <div className=\"mb-8 p-4 bg-neutral-700/50 rounded-lg flex justify-between items-center\">\n            <div>\n                <h3 className=\"text-xl font-semibold text-blue-300 mb-1\">Overall Synchronization Status</h3>\n                <p className=\"text-neutral-300 text-sm\">\n                    Status: <span className={overallSyncStatus === 'syncing' ? 'text-yellow-400' : overallSyncStatus === 'error' ? 'text-red-400' : overallSyncStatus === 'idle' ? 'text-green-400' : 'text-neutral-400'}>{overallSyncStatus.toUpperCase()}</span>\n                </p>\n                 {overallSyncStep && (\n                     <p className=\"text-neutral-400 text-xs mt-1\">\n                         Step: {overallSyncStep}\n                     </p>\n                 )}\n                 {syncService?.getLastSyncTimestamp('system') && ( // Use system timestamp for overall\n                    <p className=\"text-neutral-400 text-xs mt-1\">\n                        Last Synced: {new Date(syncService.getLastSyncTimestamp('system')!).toLocaleString()}\n                    </p>\n                )}\n                 {/* Display Queue Size */}\n                 <p className=\"text-neutral-400 text-xs mt-1 flex items-center gap-1\">\n                     <Info size={14}/> Local Change Queue: <span className=\"font-mono text-blue-300\">{localQueueSize}</span> pending items (Persistent) {/* Added Persistent */}\n                 </p>\n            </div>\n             <button\n                className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                onClick={handleSyncAll}\n                disabled={isSyncingAll || overallSyncStatus === 'syncing'} // Disable if already syncing\n             >\n                 <RefreshCcw size={18} className={";
inline - block;
mr - 1;
$;
{
    isSyncingAll || overallSyncStatus === 'syncing' ? 'animate-spin' : '';
}
"} />\n                 {isSyncingAll ? 'Syncing All...' : 'Sync All Data Now'}\n             </button>\n        </div>\n\n         {/* Module Synchronization Statuses */}\n         <div className=\"mb-8 p-4 bg-neutral-700/50 rounded-lg\">\n             <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Module Synchronization Statuses</h3>\n             {loading ? (\n                 <p className=\"text-neutral-400\">Loading module statuses...</p>\n             ) : error && overallSyncStatus !== 'error' ? ( // Only show module error if overall is not already error\n                 <p className=\"text-red-400\">Error: {error}</p>\n             ) : (\n                 <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                     {SYNCHRONIZABLE_DATA_TYPES.map(type => (\n                         <div key={type} className=\"p-3 bg-neutral-600/50 rounded-md\">\n                             <p className=\"text-neutral-300 text-sm font-semibold mb-1\">\n                                 {/* Display user-friendly names for data types */}\n                                 {type === 'memoryEngine' ? 'Knowledge Base' :\n                                  type === 'authorityForgingEngine' ? 'Scripts & Abilities' :\n                                  type === 'selfNavigationEngine' ? 'Tasks & Flows' :\n                                  type === 'runeEngraftingCenter' ? 'Agents & Runes' :\n                                  type === 'goalManagementService' ? 'Goals' :\n                                  type === 'notificationService' ? 'Notifications' :\n                                  type === 'analyticsService' ? 'Analytics Data' :\n                                  type}\n                             </p>\n                             <p className=\"text-neutral-400 text-xs\">\n                                 Status: <span className={moduleSyncStatuses[type]?.status === 'syncing' ? 'text-yellow-400' : moduleSyncStatuses[type]?.status === 'error' ? 'text-red-400' : moduleSyncStatuses[type]?.status === 'idle' ? 'text-green-400' : 'text-neutral-400'}>{moduleSyncStatuses[type]?.status.toUpperCase() || 'UNKNOWN'}</span>\n                             </p>\n                              {moduleSyncStatuses[type]?.step && (\n                                 <p className=\"text-neutral-400 text-xs mt-1\">\n                                     Step: {moduleSyncStatuses[type].step}\n                                 </p>\n                             )}\n                             {moduleSyncStatuses[type]?.timestamp && ( // Use optional chaining\n                                 <p className=\"text-neutral-400 text-xs mt-1\">\n                                     Last Synced: {new Date(moduleSyncStatuses[type].timestamp!).toLocaleString()}\n                                 </p>\n                             )}\n                         </div>\n                     ))}\n                 </div>\n             )}\n         </div>\n\n        {/* Simulated Mobile Git Sync */}\n        <div className=\"mb-8 p-4 bg-neutral-700/50 rounded-lg\">\n            <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Simulated Mobile Git Sync</h3>\n            <p className=\"text-neutral-300 text-sm mb-4\">Simulate synchronizing your mobile Git repository. This action is recorded as a development log.</p>\n            <div className=\"flex flex-wrap gap-4\"> {/* Use flex-wrap for smaller screens */}\n                <button\n                    className=\"flex-1 px-6 py-2 bg-purple-600 text-white font-semibold rounded-md hover:bg-purple-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                    onClick={() => handleSimulateGit('pull')}\n                    disabled={isSimulatingGit}\n                >\n                    <GitPullRequest size={18} className={";
inline - block;
mr - 1;
$;
{
    isSimulatingGit ? 'animate-pulse' : '';
}
"} />\n                    {isSimulatingGit ? 'Pulling...' : 'Simulate Git Pull'}\n                </button>\n                 <button\n                    className=\"flex-1 px-6 py-2 bg-purple-600 text-white font-semibold rounded-md hover:bg-purple-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                    onClick={() => handleSimulateGit('push')}\n                    disabled={isSimulatingGit}\n                 >\n                    <GitPush size={18} className={";
inline - block;
mr - 1;
$;
{
    isSimulatingGit ? 'animate-pulse' : '';
}
"} />\n                    {isSimulatingGit ? 'Pushing...' : 'Simulate Git Push'}\n                 </button>\n                 <button\n                    className=\"flex-1 px-6 py-2 bg-purple-600 text-white font-semibold rounded-md hover:bg-purple-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                    onClick={() => handleSimulateGit('bidirectional')}\n                    disabled={isSimulatingGit}\n                 >\n                    <GitMerge size={18} className={";
inline - block;
mr - 1;
$;
{
    isSimulatingGit ? 'animate-pulse' : '';
}
"} />\n                    {isSimulatingGit ? 'Syncing...' : 'Simulate Git Sync'}\n                 </button>\n            </div>\n             {error && isSimulatingGit === false && ( // Show simulation error only after it finishes\n                 <p className=\"text-red-400 text-sm mt-4\">Error: {error}</p>\n             )}\n        </div>\n\n\n        {/* Recent Development Logs */}\n        <div className=\"p-4 bg-neutral-700/50 rounded-lg\">\n            <h3 className=\"text-xl font-semibold text-blue-300 mb-3\">Recent Development Logs</h3>\n            {loadingDevLogs ? (\n                <p className=\"text-neutral-400\">Loading development logs...</p>\n            ) : recentDevLogs.length === 0 ? (\n                <p className=\"text-neutral-400\">No recent development logs found.</p>\n            ) : (\n                <ul className=\"space-y-3\">\n                    {recentDevLogs.map(log => (\n                        <li key={log.id} className=\"bg-neutral-600/50 p-3 rounded-md border-l-4 border-orange-500\">\n                            <p className=\"text-sm font-semibold text-orange-200 mb-1\">{log.question}</p>\n                            <p className=\"text-neutral-300 text-sm\">{log.answer.substring(0, 150)}{log.answer.length > 150 ? '...' : ''}</p>\n                            <small className=\"text-neutral-400 text-xs block mt-1\">\n                                Timestamp: {new Date(log.timestamp).toLocaleString()}\n                                {log.dev_log_details?.type && " | Type;
$;
{
    log.dev_log_details.type;
}
"}\n                                {log.dev_log_details?.repo_url && " | Repo;
$;
{
    log.dev_log_details.repo_url;
}
"}\n                            </small>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </div>\n\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"(__makeTemplateObject([""], [""]));
