var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// src/components/ActionEditor.tsx\n// \u53EF\u91CD\u7528\u7D44\u4EF6 (Reusable Component) - \u52D5\u4F5C\u7DE8\u8F2F\u5668 (Action Editor)\n// Provides a structured UI for editing TaskStep or AgenticFlowNode actions based on action type.\n\nimport React, { useState, useEffect } from 'react';\nimport { TaskStep, Rune, ForgedAbility, Goal, KeyResult } from '../interfaces';\nimport { Loader2, Info } from 'lucide-react';\n\n// Define the props for the ActionEditor component\ninterface ActionEditorProps {\n    action: TaskStep['action']; // The action object to edit\n    onChange: (newAction: TaskStep['action']) => void; // Callback for when the action changes\n    disabled?: boolean; // Whether the editor is disabled\n    // Data needed to populate dropdowns for certain action types\n    availableRunes: Rune[];\n    availableAbilities: ForgedAbility[];\n    availableGoals: Goal[]; // Goals including Key Results\n}\n\nconst ActionEditor: React.FC<ActionEditorProps> = ({\n    action,\n    onChange,\n    disabled = false,\n    availableRunes,\n    availableAbilities,\n    availableGoals,\n}) => {\n    // Internal state for action details, managed as JSON string for simplicity in MVP\n    // A more complex implementation would manage structured state per action type\n    const [detailsJson, setDetailsJson] = useState(JSON.stringify(action.details || {}, null, 2));\n    const [jsonError, setJsonError] = useState<string | null>(null);\n\n    // Update internal JSON state when the action prop changes externally\n    useEffect(() => {\n        try {\n            const jsonString = JSON.stringify(action.details || {}, null, 2);\n            setDetailsJson(jsonString);\n            setJsonError(null); // Clear JSON error on prop change\n        } catch (err: any) {\n            console.error(\"Error stringifying action details for editor:\", err);\n            setDetailsJson(JSON.stringify({ error: \"Failed to display details\" }));\n            setJsonError(\"Error displaying details: Invalid structure.\");\n        }\n    }, [action.details]);\n\n    // Handle changes to the action type dropdown\n    const handleTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const newType = e.target.value as TaskStep['action']['type'];\n        // Reset details when type changes, provide default structure if known\n        let newDetails = {};\n        switch (newType) {\n            case 'log': newDetails = { message: '' }; break;\n            case 'callAPI': newDetails = { url: '', method: 'GET' }; break;\n            case 'runScript': newDetails = { scriptId: '', params: {} }; break;\n            case 'executeRune': newDetails = { runeId: '', action: '', params: {} }; break;\n            case 'waitForUserInput': newDetails = { prompt: '' }; break;\n            case 'syncKnowledge': newDetails = { query: '' }; break;\n            case 'sendNotification': newDetails = { type: 'info', message: '', channel: 'ui' }; break;\n            case 'updateGoalProgress': newDetails = { krId: '', currentValue: 0 }; break;\n            case 'create_agentic_flow': newDetails = { name: '', entry_node_id: '', nodes: [], edges: [] }; break; // Default for create_agentic_flow\n            case 'create_task': newDetails = { description: '', steps: [] }; break; // Default for create_task\n            case 'search_knowledge': newDetails = { query: '', useSemanticSearch: false }; break; // Default for search_knowledge\n            case 'sync_mobile_git': newDetails = { direction: 'bidirectional' }; break; // Default for sync_mobile_git\n            case 'present_suggestion': newDetails = { message: '', suggestionType: 'info' }; break; // Default for present_suggestion\n            // Add other default structures here\n            default: newDetails = {}; break;\n        }\n        const newAction = { type: newType, details: newDetails };\n        onChange(newAction); // Notify parent component\n        setDetailsJson(JSON.stringify(newDetails, null, 2)); // Update internal JSON state\n        setJsonError(null); // Clear JSON error\n    };\n\n    // Handle changes to the JSON textarea for action details\n    const handleDetailsJsonChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const jsonString = e.target.value;\n        setDetailsJson(jsonString);\n        try {\n            const details = JSON.parse(jsonString);\n            onChange({ ...action, details }); // Notify parent component with parsed details\n            setJsonError(null); // Clear error if parsing is successful\n        } catch (parseError: any) {\n            // Do not notify parent if JSON is invalid, just set error state\n            setJsonError("], ["typescript\n// src/components/ActionEditor.tsx\n// \u53EF\u91CD\u7528\u7D44\u4EF6 (Reusable Component) - \u52D5\u4F5C\u7DE8\u8F2F\u5668 (Action Editor)\n// Provides a structured UI for editing TaskStep or AgenticFlowNode actions based on action type.\n\nimport React, { useState, useEffect } from 'react';\nimport { TaskStep, Rune, ForgedAbility, Goal, KeyResult } from '../interfaces';\nimport { Loader2, Info } from 'lucide-react';\n\n// Define the props for the ActionEditor component\ninterface ActionEditorProps {\n    action: TaskStep['action']; // The action object to edit\n    onChange: (newAction: TaskStep['action']) => void; // Callback for when the action changes\n    disabled?: boolean; // Whether the editor is disabled\n    // Data needed to populate dropdowns for certain action types\n    availableRunes: Rune[];\n    availableAbilities: ForgedAbility[];\n    availableGoals: Goal[]; // Goals including Key Results\n}\n\nconst ActionEditor: React.FC<ActionEditorProps> = ({\n    action,\n    onChange,\n    disabled = false,\n    availableRunes,\n    availableAbilities,\n    availableGoals,\n}) => {\n    // Internal state for action details, managed as JSON string for simplicity in MVP\n    // A more complex implementation would manage structured state per action type\n    const [detailsJson, setDetailsJson] = useState(JSON.stringify(action.details || {}, null, 2));\n    const [jsonError, setJsonError] = useState<string | null>(null);\n\n    // Update internal JSON state when the action prop changes externally\n    useEffect(() => {\n        try {\n            const jsonString = JSON.stringify(action.details || {}, null, 2);\n            setDetailsJson(jsonString);\n            setJsonError(null); // Clear JSON error on prop change\n        } catch (err: any) {\n            console.error(\"Error stringifying action details for editor:\", err);\n            setDetailsJson(JSON.stringify({ error: \"Failed to display details\" }));\n            setJsonError(\"Error displaying details: Invalid structure.\");\n        }\n    }, [action.details]);\n\n    // Handle changes to the action type dropdown\n    const handleTypeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const newType = e.target.value as TaskStep['action']['type'];\n        // Reset details when type changes, provide default structure if known\n        let newDetails = {};\n        switch (newType) {\n            case 'log': newDetails = { message: '' }; break;\n            case 'callAPI': newDetails = { url: '', method: 'GET' }; break;\n            case 'runScript': newDetails = { scriptId: '', params: {} }; break;\n            case 'executeRune': newDetails = { runeId: '', action: '', params: {} }; break;\n            case 'waitForUserInput': newDetails = { prompt: '' }; break;\n            case 'syncKnowledge': newDetails = { query: '' }; break;\n            case 'sendNotification': newDetails = { type: 'info', message: '', channel: 'ui' }; break;\n            case 'updateGoalProgress': newDetails = { krId: '', currentValue: 0 }; break;\n            case 'create_agentic_flow': newDetails = { name: '', entry_node_id: '', nodes: [], edges: [] }; break; // Default for create_agentic_flow\n            case 'create_task': newDetails = { description: '', steps: [] }; break; // Default for create_task\n            case 'search_knowledge': newDetails = { query: '', useSemanticSearch: false }; break; // Default for search_knowledge\n            case 'sync_mobile_git': newDetails = { direction: 'bidirectional' }; break; // Default for sync_mobile_git\n            case 'present_suggestion': newDetails = { message: '', suggestionType: 'info' }; break; // Default for present_suggestion\n            // Add other default structures here\n            default: newDetails = {}; break;\n        }\n        const newAction = { type: newType, details: newDetails };\n        onChange(newAction); // Notify parent component\n        setDetailsJson(JSON.stringify(newDetails, null, 2)); // Update internal JSON state\n        setJsonError(null); // Clear JSON error\n    };\n\n    // Handle changes to the JSON textarea for action details\n    const handleDetailsJsonChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const jsonString = e.target.value;\n        setDetailsJson(jsonString);\n        try {\n            const details = JSON.parse(jsonString);\n            onChange({ ...action, details }); // Notify parent component with parsed details\n            setJsonError(null); // Clear error if parsing is successful\n        } catch (parseError: any) {\n            // Do not notify parent if JSON is invalid, just set error state\n            setJsonError("]));
Invalid;
JSON: $;
{
    parseError.message;
}
");\n        }\n    };\n\n    // --- New: Render structured form based on action type (MVP simplified) ---\n    // This function renders specific input fields for known action types\n    const renderStructuredDetails = () => {\n        // Use a unique key for the details state based on action type\n        const detailsKey = ";
action - details - $;
{
    action.type;
}
";\n\n        // For MVP, we'll only implement structured forms for a few key types\n        // and fallback to JSON for others.\n        switch (action.type) {\n            case 'log':\n                return (\n                    <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md\">\n                        <label htmlFor={";
$;
{
    detailsKey;
}
-message(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Message:</label>\n                        <input\n                            id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Message:</label>\n                        <input\n                            id={"]));
$;
{
    detailsKey;
}
-message(__makeTemplateObject(["}\n                            type=\"text\"\n                            className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                            value={action.details?.message || ''}\n                            onChange={(e) => onChange({ ...action, details: { ...action.details, message: e.target.value } })}\n                            placeholder=\"Enter log message\"\n                            disabled={disabled}\n                            required\n                        />\n                    </div>\n                );\n            case 'callAPI':\n                return (\n                    <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md space-y-2\">\n                        <div>\n                            <label htmlFor={"], ["}\n                            type=\"text\"\n                            className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                            value={action.details?.message || ''}\n                            onChange={(e) => onChange({ ...action, details: { ...action.details, message: e.target.value } })}\n                            placeholder=\"Enter log message\"\n                            disabled={disabled}\n                            required\n                        />\n                    </div>\n                );\n            case 'callAPI':\n                return (\n                    <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md space-y-2\">\n                        <div>\n                            <label htmlFor={"]));
$;
{
    detailsKey;
}
-url(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">URL:</label>\n                            <input\n                                id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">URL:</label>\n                            <input\n                                id={"]));
$;
{
    detailsKey;
}
-url(__makeTemplateObject(["}\n                                type=\"url\"\n                                className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                value={action.details?.url || ''}\n                                onChange={(e) => onChange({ ...action, details: { ...action.details, url: e.target.value } })}\n                                placeholder=\"Enter API URL\"\n                                disabled={disabled}\n                                required\n                            />\n                        </div>\n                        <div>\n                            <label htmlFor={"], ["}\n                                type=\"url\"\n                                className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                value={action.details?.url || ''}\n                                onChange={(e) => onChange({ ...action, details: { ...action.details, url: e.target.value } })}\n                                placeholder=\"Enter API URL\"\n                                disabled={disabled}\n                                required\n                            />\n                        </div>\n                        <div>\n                            <label htmlFor={"]));
$;
{
    detailsKey;
}
-method(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Method:</label>\n                            <select\n                                id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Method:</label>\n                            <select\n                                id={"]));
$;
{
    detailsKey;
}
-method(__makeTemplateObject(["}\n                                className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                value={action.details?.method || 'GET'}\n                                onChange={(e) => onChange({ ...action, details: { ...action.details, method: e.target.value } })}\n                                disabled={disabled}\n                                required\n                            >\n                                <option value=\"GET\">GET</option>\n                                <option value=\"POST\">POST</option>\n                                <option value=\"PUT\">PUT</option>\n                                <option value=\"DELETE\">DELETE</option>\n                                <option value=\"PATCH\">PATCH</option>\n                            </select>\n                        </div>\n                        {/* TODO: Add structured input for data/headers based on method */}\n                        {(action.details?.method === 'POST' || action.details?.method === 'PUT' || action.details?.method === 'PATCH') && (\n                             <div className=\"mt-2 p-2 bg-neutral-700/50 rounded-md\">\n                                 <label htmlFor={"], ["}\n                                className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                value={action.details?.method || 'GET'}\n                                onChange={(e) => onChange({ ...action, details: { ...action.details, method: e.target.value } })}\n                                disabled={disabled}\n                                required\n                            >\n                                <option value=\"GET\">GET</option>\n                                <option value=\"POST\">POST</option>\n                                <option value=\"PUT\">PUT</option>\n                                <option value=\"DELETE\">DELETE</option>\n                                <option value=\"PATCH\">PATCH</option>\n                            </select>\n                        </div>\n                        {/* TODO: Add structured input for data/headers based on method */}\n                        {(action.details?.method === 'POST' || action.details?.method === 'PUT' || action.details?.method === 'PATCH') && (\n                             <div className=\"mt-2 p-2 bg-neutral-700/50 rounded-md\">\n                                 <label htmlFor={"]));
$;
{
    detailsKey;
}
-data - json(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Request Body (JSON):</label>\n                                  <textarea\n                                     id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Request Body (JSON):</label>\n                                  <textarea\n                                     id={"]));
$;
{
    detailsKey;
}
-data - json(__makeTemplateObject(["}\n                                     className={"], ["}\n                                     className={"]));
w - full;
p - 1;
rounded - md;
bg - neutral - 800;
text - white;
border;
$;
{
    jsonError ? 'border-red-500' : 'border-neutral-600';
}
focus: outline - none;
focus: ring - 1;
focus: ring - blue - 500;
font - mono;
text - xs(__makeTemplateObject(["}\n                                     value={detailsJson} // Use internal JSON state for editing\n                                     onChange={handleDetailsJsonChange} // Use JSON change handler\n                                     rows={3}\n                                     disabled={disabled}\n                                  />\n                                  {jsonError && <p className=\"text-red-400 text-xs mt-1\">{jsonError}</p>}\n                             </div>\n                         )}\n                         {/* TODO: Add Headers JSON input */}\n                    </div>\n                );\n            case 'runScript':\n                 // Need dropdown for available abilities (scripts)\n                 const availableScripts = availableAbilities.filter(a => a.script); // Filter for abilities with scripts\n\n                 return (\n                     <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md space-y-2\">\n                         <div>\n                             <label htmlFor={"], ["}\n                                     value={detailsJson} // Use internal JSON state for editing\n                                     onChange={handleDetailsJsonChange} // Use JSON change handler\n                                     rows={3}\n                                     disabled={disabled}\n                                  />\n                                  {jsonError && <p className=\"text-red-400 text-xs mt-1\">{jsonError}</p>}\n                             </div>\n                         )}\n                         {/* TODO: Add Headers JSON input */}\n                    </div>\n                );\n            case 'runScript':\n                 // Need dropdown for available abilities (scripts)\n                 const availableScripts = availableAbilities.filter(a => a.script); // Filter for abilities with scripts\n\n                 return (\n                     <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md space-y-2\">\n                         <div>\n                             <label htmlFor={"]));
$;
{
    detailsKey;
}
-scriptId(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Script (Ability):</label>\n                             <select\n                                 id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Script (Ability):</label>\n                             <select\n                                 id={"]));
$;
{
    detailsKey;
}
-scriptId(__makeTemplateObject(["}\n                                 className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                 value={action.details?.scriptId || ''}\n                                 onChange={(e) => onChange({ ...action, details: { scriptId: e.target.value, params: {} } })} // Reset params when script changes\n                                 disabled={disabled}\n                                 required\n                             >\n                                 <option value=\"\">-- Select Script --</option>\n                                 {availableScripts.map(ability => (\n                                     <option key={ability.id} value={ability.id}>{ability.name} ({ability.id})</option>\n                                 ))}                             </select>                         </div>                          {action.details?.scriptId && (                              <div className=\"mt-2 p-2 bg-neutral-700/50 rounded-md\">                                  <label htmlFor={"], ["}\n                                 className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                 value={action.details?.scriptId || ''}\n                                 onChange={(e) => onChange({ ...action, details: { scriptId: e.target.value, params: {} } })} // Reset params when script changes\n                                 disabled={disabled}\n                                 required\n                             >\n                                 <option value=\"\">-- Select Script --</option>\n                                 {availableScripts.map(ability => (\n                                     <option key={ability.id} value={ability.id}>{ability.name} ({ability.id})</option>\n                                 ))}\\\n                             </select>\\\n                         </div>\\\n                          {action.details?.scriptId && (\\\n                              <div className=\"mt-2 p-2 bg-neutral-700/50 rounded-md\">\\\n                                  <label htmlFor={"]));
$;
{
    detailsKey;
}
-params - json(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Parameters (JSON):</label>                                   <textarea                                      id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Parameters (JSON):</label>\\\n                                   <textarea\\\n                                      id={"]));
$;
{
    detailsKey;
}
-params - json(__makeTemplateObject(["}                                      className={"], ["}\\\n                                      className={"]));
w - full;
p - 1;
rounded - md;
bg - neutral - 800;
text - white;
border;
$;
{
    jsonError ? 'border-red-500' : 'border-neutral-600';
}
focus: outline - none;
focus: ring - 1;
focus: ring - blue - 500;
font - mono;
text - xs(__makeTemplateObject(["}                                      value={detailsJson} // Use internal JSON state for editing                                      onChange={handleDetailsJsonChange} // Use JSON change handler                                      rows={3}                                      disabled={disabled}                                   />                                   {jsonError && <p className=\"text-red-400 text-xs mt-1\">{jsonError}</p>}                              </div>                          )}                     </div>                 );            case 'executeRune':\n                 // Need dropdowns for available runes and their actions\n                 const selectedRune = availableRunes.find(r => r.id === action.details?.runeId);\n                 const availableRuneActions = selectedRune?.manifest?.methods ? Object.keys(selectedRune.manifest.methods) : [];\n\n                 return (\n                     <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md space-y-2\">\n                         <div>\n                             <label htmlFor={"], ["}\\\n                                      value={detailsJson} // Use internal JSON state for editing\\\n                                      onChange={handleDetailsJsonChange} // Use JSON change handler\\\n                                      rows={3}\\\n                                      disabled={disabled}\\\n                                   />\\\n                                   {jsonError && <p className=\"text-red-400 text-xs mt-1\">{jsonError}</p>}\\\n                              </div>\\\n                          )}\\\n                     </div>\\\n                 );\\\n            case 'executeRune':\n                 // Need dropdowns for available runes and their actions\n                 const selectedRune = availableRunes.find(r => r.id === action.details?.runeId);\n                 const availableRuneActions = selectedRune?.manifest?.methods ? Object.keys(selectedRune.manifest.methods) : [];\n\n                 return (\n                     <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md space-y-2\">\n                         <div>\n                             <label htmlFor={"]));
$;
{
    detailsKey;
}
-runeId(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Rune:</label>\n                             <select\n                                 id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Rune:</label>\n                             <select\n                                 id={"]));
$;
{
    detailsKey;
}
-runeId(__makeTemplateObject(["}\n                                 className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                 value={action.details?.runeId || ''}\n                                 onChange={(e) => onChange({ ...action, details: { runeId: e.target.value, action: '', params: {} } })} // Reset action/params when rune changes\n                                 disabled={disabled}\n                                 required\n                             >\n                                 <option value=\"\">-- Select Rune --</option>\n                                 {availableRunes.map(rune => (\n                                     <option key={rune.id} value={rune.id}>{rune.name} ({rune.id})</option>\n                                 ))}\n                             </select>\n                         </div>\n                          {action.details?.runeId && (\n                              <div>\n                                  <label htmlFor={"], ["}\n                                 className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                 value={action.details?.runeId || ''}\n                                 onChange={(e) => onChange({ ...action, details: { runeId: e.target.value, action: '', params: {} } })} // Reset action/params when rune changes\n                                 disabled={disabled}\n                                 required\n                             >\n                                 <option value=\"\">-- Select Rune --</option>\n                                 {availableRunes.map(rune => (\n                                     <option key={rune.id} value={rune.id}>{rune.name} ({rune.id})</option>\n                                 ))}\n                             </select>\n                         </div>\n                          {action.details?.runeId && (\n                              <div>\n                                  <label htmlFor={"]));
$;
{
    detailsKey;
}
-action(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Action:</label>\n                                  <select\n                                      id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Action:</label>\n                                  <select\n                                      id={"]));
$;
{
    detailsKey;
}
-action(__makeTemplateObject(["}\n                                      className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                      value={action.details?.action || ''}\n                                      onChange={(e) => onChange({ ...action, details: { ...action.details, action: e.target.value, params: {} } })} // Reset params when action changes\n                                      disabled={disabled || availableRuneActions.length === 0}\n                                      required\n                                  >\n                                      <option value=\"\">-- Select Action --</option>\n                                      {availableRuneActions.map(actionName => (\n                                          <option key={actionName} value={actionName}>{actionName}</option>\n                                      ))}\n                                  </select>\n                              </div>\n                          )}\n                          {action.details?.action && (\n                              <div className=\"mt-2 p-2 bg-neutral-700/50 rounded-md\">\n                                  <label htmlFor={"], ["}\n                                      className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                      value={action.details?.action || ''}\n                                      onChange={(e) => onChange({ ...action, details: { ...action.details, action: e.target.value, params: {} } })} // Reset params when action changes\n                                      disabled={disabled || availableRuneActions.length === 0}\n                                      required\n                                  >\n                                      <option value=\"\">-- Select Action --</option>\n                                      {availableRuneActions.map(actionName => (\n                                          <option key={actionName} value={actionName}>{actionName}</option>\n                                      ))}\n                                  </select>\n                              </div>\n                          )}\n                          {action.details?.action && (\n                              <div className=\"mt-2 p-2 bg-neutral-700/50 rounded-md\">\n                                  <label htmlFor={"]));
$;
{
    detailsKey;
}
-params - json(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Parameters (JSON):</label>\n                                   <textarea\n                                      id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Parameters (JSON):</label>\n                                   <textarea\n                                      id={"]));
$;
{
    detailsKey;
}
-params - json(__makeTemplateObject(["}\n                                      className={"], ["}\n                                      className={"]));
w - full;
p - 1;
rounded - md;
bg - neutral - 800;
text - white;
border;
$;
{
    jsonError ? 'border-red-500' : 'border-neutral-600';
}
focus: outline - none;
focus: ring - 1;
focus: ring - blue - 500;
font - mono;
text - xs(__makeTemplateObject(["}\n                                      value={detailsJson} // Use internal JSON state for editing\n                                      onChange={handleDetailsJsonChange} // Use JSON change handler\n                                      rows={3}\n                                      disabled={disabled}\n                                   />\n                                   {jsonError && <p className=\"text-red-400 text-xs mt-1\">{jsonError}</p>}\n                              </div>\n                          )}\n                     </div>\n                 );\n            case 'waitForUserInput':\n                return (\n                    <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md\">\n                        <label htmlFor={"], ["}\n                                      value={detailsJson} // Use internal JSON state for editing\n                                      onChange={handleDetailsJsonChange} // Use JSON change handler\n                                      rows={3}\n                                      disabled={disabled}\n                                   />\n                                   {jsonError && <p className=\"text-red-400 text-xs mt-1\">{jsonError}</p>}\n                              </div>\n                          )}\n                     </div>\n                 );\n            case 'waitForUserInput':\n                return (\n                    <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md\">\n                        <label htmlFor={"]));
$;
{
    detailsKey;
}
-prompt(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Prompt:</label>\n                        <input\n                            id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Prompt:</label>\n                        <input\n                            id={"]));
$;
{
    detailsKey;
}
-prompt(__makeTemplateObject(["}\n                            type=\"text\"\n                            className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                            value={action.details?.prompt || ''}\n                            onChange={(e) => onChange({ ...action, details: { ...action.details, prompt: e.target.value } })}\n                            placeholder=\"Enter prompt for user input\"\n                            disabled={disabled}\n                            required\n                        />\n                    </div>\n                );\n            case 'syncKnowledge':\n                return (\n                    <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md\">\n                        <label htmlFor={"], ["}\n                            type=\"text\"\n                            className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                            value={action.details?.prompt || ''}\n                            onChange={(e) => onChange({ ...action, details: { ...action.details, prompt: e.target.value } })}\n                            placeholder=\"Enter prompt for user input\"\n                            disabled={disabled}\n                            required\n                        />\n                    </div>\n                );\n            case 'syncKnowledge':\n                return (\n                    <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md\">\n                        <label htmlFor={"]));
$;
{
    detailsKey;
}
-query(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Query (Optional):</label>\n                        <input\n                            id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Query (Optional):</label>\n                        <input\n                            id={"]));
$;
{
    detailsKey;
}
-query(__makeTemplateObject(["}\n                            type=\"text\"\n                            className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                            value={action.details?.query || ''}\n                            onChange={(e) => onChange({ ...action, details: { ...action.details, query: e.target.value } })}\n                            placeholder=\"Enter query for specific sync\"\n                            disabled={disabled}\n                        />\n                         <small className=\"text-neutral-400 text-xs mt-1 block\">Leave empty for full knowledge sync.</small>\n                    </div>\n                );\n            case 'sendNotification':\n                return (\n                    <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md space-y-2\">\n                        <div>\n                            <label htmlFor={"], ["}\n                            type=\"text\"\n                            className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                            value={action.details?.query || ''}\n                            onChange={(e) => onChange({ ...action, details: { ...action.details, query: e.target.value } })}\n                            placeholder=\"Enter query for specific sync\"\n                            disabled={disabled}\n                        />\n                         <small className=\"text-neutral-400 text-xs mt-1 block\">Leave empty for full knowledge sync.</small>\n                    </div>\n                );\n            case 'sendNotification':\n                return (\n                    <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md space-y-2\">\n                        <div>\n                            <label htmlFor={"]));
$;
{
    detailsKey;
}
-notif - type(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Type:</label>\n                            <select\n                                id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Type:</label>\n                            <select\n                                id={"]));
$;
{
    detailsKey;
}
-notif - type(__makeTemplateObject(["}\n                                className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                value={action.details?.type || 'info'}\n                                onChange={(e) => onChange({ ...action, details: { ...action.details, type: e.target.value } })}\n                                disabled={disabled}\n                                required\n                            >\n                                <option value=\"info\">Info</option>\n                                <option value=\"warning\">Warning</option>\n                                <option value=\"error\">Error</option>\n                                <option value=\"success\">Success</option>\n                            </select>\n                        </div>\n                        <div>\n                            <label htmlFor={"], ["}\n                                className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                value={action.details?.type || 'info'}\n                                onChange={(e) => onChange({ ...action, details: { ...action.details, type: e.target.value } })}\n                                disabled={disabled}\n                                required\n                            >\n                                <option value=\"info\">Info</option>\n                                <option value=\"warning\">Warning</option>\n                                <option value=\"error\">Error</option>\n                                <option value=\"success\">Success</option>\n                            </select>\n                        </div>\n                        <div>\n                            <label htmlFor={"]));
$;
{
    detailsKey;
}
-notif - message(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Message:</label>\n                            <input\n                                id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Message:</label>\n                            <input\n                                id={"]));
$;
{
    detailsKey;
}
-notif - message(__makeTemplateObject(["}\n                                type=\"text\"\n                                className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                value={action.details?.message || ''}\n                                onChange={(e) => onChange({ ...action, details: { ...action.details, message: e.target.value } })}\n                                placeholder=\"Enter notification message\"\n                                disabled={disabled}\n                                required\n                            />\n                        </div>\n                         <div>\n                            <label htmlFor={"], ["}\n                                type=\"text\"\n                                className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                value={action.details?.message || ''}\n                                onChange={(e) => onChange({ ...action, details: { ...action.details, message: e.target.value } })}\n                                placeholder=\"Enter notification message\"\n                                disabled={disabled}\n                                required\n                            />\n                        </div>\n                         <div>\n                            <label htmlFor={"]));
$;
{
    detailsKey;
}
-notif - channel(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Channel:</label>\n                            <select\n                                id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Channel:</label>\n                            <select\n                                id={"]));
$;
{
    detailsKey;
}
-notif - channel(__makeTemplateObject(["}\n                                className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                value={action.details?.channel || 'ui'}\n                                onChange={(e) => onChange({ ...action, details: { ...action.details, channel: e.target.value } })}\n                                disabled={disabled}\n                                required\n                            >\n                                <option value=\"ui\">UI</option>\n                                <option value=\"email\">Email (Simulated)</option>\n                                <option value=\"webhook\">Webhook (Simulated)</option>\n                                <option value=\"push\">Push (Simulated)</option>\n                            </select>\n                        </div>\n                         {/* TODO: Add details JSON input */}\n                    </div>\n                );\n            case 'updateGoalProgress':\n                 // Need dropdowns for available goals and their key results\n                 const selectedGoal = availableGoals.find(g => g.id === action.details?.goalId); // Assuming goalId might be in details\n                 const availableKrs = selectedGoal?.key_results || [];\n\n                 return (\n                     <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md space-y-2\">\n                         <div>\n                             <label htmlFor={"], ["}\n                                className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                value={action.details?.channel || 'ui'}\n                                onChange={(e) => onChange({ ...action, details: { ...action.details, channel: e.target.value } })}\n                                disabled={disabled}\n                                required\n                            >\n                                <option value=\"ui\">UI</option>\n                                <option value=\"email\">Email (Simulated)</option>\n                                <option value=\"webhook\">Webhook (Simulated)</option>\n                                <option value=\"push\">Push (Simulated)</option>\n                            </select>\n                        </div>\n                         {/* TODO: Add details JSON input */}\n                    </div>\n                );\n            case 'updateGoalProgress':\n                 // Need dropdowns for available goals and their key results\n                 const selectedGoal = availableGoals.find(g => g.id === action.details?.goalId); // Assuming goalId might be in details\n                 const availableKrs = selectedGoal?.key_results || [];\n\n                 return (\n                     <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md space-y-2\">\n                         <div>\n                             <label htmlFor={"]));
$;
{
    detailsKey;
}
-goalId(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Goal:</label>\n                             <select\n                                 id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Goal:</label>\n                             <select\n                                 id={"]));
$;
{
    detailsKey;
}
-goalId(__makeTemplateObject(["}\n                                 className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                 value={action.details?.goalId || ''}\n                                 onChange={(e) => onChange({ ...action, details: { ...action.details, goalId: e.target.value, krId: '' } })} // Reset KR when goal changes\n                                 disabled={disabled}\n                             >\n                                 <option value=\"\">-- Select Goal --</option>\n                                 {availableGoals.map(goal => (\n                                     <option key={goal.id} value={goal.id}>{goal.description}</option>\n                                 ))}\n                             </select>\n                         </div>\n                          {action.details?.goalId && (\n                              <div>\n                                  <label htmlFor={"], ["}\n                                 className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                 value={action.details?.goalId || ''}\n                                 onChange={(e) => onChange({ ...action, details: { ...action.details, goalId: e.target.value, krId: '' } })} // Reset KR when goal changes\n                                 disabled={disabled}\n                             >\n                                 <option value=\"\">-- Select Goal --</option>\n                                 {availableGoals.map(goal => (\n                                     <option key={goal.id} value={goal.id}>{goal.description}</option>\n                                 ))}\n                             </select>\n                         </div>\n                          {action.details?.goalId && (\n                              <div>\n                                  <label htmlFor={"]));
$;
{
    detailsKey;
}
-krId(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Key Result:</label>\n                                  <select\n                                      id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Key Result:</label>\n                                  <select\n                                      id={"]));
$;
{
    detailsKey;
}
-krId(__makeTemplateObject(["}\n                                      className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                      value={action.details?.krId || ''}\n                                      onChange={(e) => onChange({ ...action, details: { ...action.details, krId: e.target.value } })}\n                                      disabled={disabled || availableKrs.length === 0}\n                                      required\n                                  >\n                                      <option value=\"\">-- Select Key Result --</option>\n                                      {availableKrs.map(kr => (\n                                          <option key={kr.id} value={kr.id}>{kr.description} ({kr.current_value}/{kr.target_value} {kr.unit})</option>\n                                      ))}                                  </select>                              </div>                          )}                          {action.details?.krId && (                              <div>                                  <label htmlFor={"], ["}\n                                      className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                      value={action.details?.krId || ''}\n                                      onChange={(e) => onChange({ ...action, details: { ...action.details, krId: e.target.value } })}\n                                      disabled={disabled || availableKrs.length === 0}\n                                      required\n                                  >\n                                      <option value=\"\">-- Select Key Result --</option>\n                                      {availableKrs.map(kr => (\n                                          <option key={kr.id} value={kr.id}>{kr.description} ({kr.current_value}/{kr.target_value} {kr.unit})</option>\n                                      ))}\\\n                                  </select>\\\n                              </div>\\\n                          )}\\\n                          {action.details?.krId && (\\\n                              <div>\\\n                                  <label htmlFor={"]));
$;
{
    detailsKey;
}
-currentValue(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Current Value:</label>                                  <input                                      id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Current Value:</label>\\\n                                  <input\\\n                                      id={"]));
$;
{
    detailsKey;
}
-currentValue(__makeTemplateObject(["}                                      type=\"number\"                                      step=\"0.1\"                                      className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"                                      value={action.details?.currentValue || 0}                                      onChange={(e) => onChange({ ...action, details: { ...action.details, currentValue: parseFloat(e.target.value) } })}                                      disabled={disabled}                                      required                                  />                              </div>                          )}                     </div>                 );            // Add more cases for other action types with structured forms            // case 'callAPI': ...            // case 'sendNotification': ...            // case 'waitForUserInput': ...            // case 'syncKnowledge': ...\n            default:\n                // Fallback to generic JSON textarea for unknown or unimplemented types\n                return (\n                     <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md\">\n                         <label htmlFor={"], ["}\\\n                                      type=\"number\"\\\n                                      step=\"0.1\"\\\n                                      className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\\\n                                      value={action.details?.currentValue || 0}\\\n                                      onChange={(e) => onChange({ ...action, details: { ...action.details, currentValue: parseFloat(e.target.value) } })}\\\n                                      disabled={disabled}\\\n                                      required\\\n                                  />\\\n                              </div>\\\n                          )}\\\n                     </div>\\\n                 );\\\n            // Add more cases for other action types with structured forms\\\n            // case 'callAPI': ...\\\n            // case 'sendNotification': ...\\\n            // case 'waitForUserInput': ...\\\n            // case 'syncKnowledge': ...\\\n\n            default:\n                // Fallback to generic JSON textarea for unknown or unimplemented types\n                return (\n                     <div className=\"mt-2 p-2 bg-neutral-600/50 rounded-md\">\n                         <label htmlFor={"]));
$;
{
    detailsKey;
}
-json(__makeTemplateObject(["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Action Details (JSON):</label>\n                         <textarea\n                             id={"], ["} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Action Details (JSON):</label>\n                         <textarea\n                             id={"]));
$;
{
    detailsKey;
}
-json(__makeTemplateObject(["}\n                             className={"], ["}\n                             className={"]));
w - full;
p - 1;
rounded - md;
bg - neutral - 800;
text - white;
border;
$;
{
    jsonError ? 'border-red-500' : 'border-neutral-600';
}
focus: outline - none;
focus: ring - 1;
focus: ring - blue - 500;
font - mono;
text - xs(__makeTemplateObject(["}\n                             value={detailsJson} // Use internal JSON state for editing\n                             onChange={handleDetailsJsonChange} // Use JSON change handler\n                             rows={4}\n                             disabled={disabled}\n                             required\n                          />\n                          {jsonError && <p className=\"text-red-400 text-xs mt-1\">{jsonError}</p>}\n                     </div>\n                );\n        }\n    };\n    // --- End New ---\n\n\n    return (\n        <div className=\"space-y-2\">\n            {/* Action Type Dropdown */}\n            <div>\n                <label htmlFor={"], ["}\n                             value={detailsJson} // Use internal JSON state for editing\n                             onChange={handleDetailsJsonChange} // Use JSON change handler\n                             rows={4}\n                             disabled={disabled}\n                             required\n                          />\n                          {jsonError && <p className=\"text-red-400 text-xs mt-1\">{jsonError}</p>}\n                     </div>\n                );\n        }\n    };\n    // --- End New ---\n\n\n    return (\n        <div className=\"space-y-2\">\n            {/* Action Type Dropdown */}\n            <div>\n                <label htmlFor={"]));
action - type - $;
{
    action.id;
}
"} className=\"block text-neutral-400 text-xs font-semibold mb-1\">Action Type:</label>\n                <select\n                    id={";
action - type - $;
{
    action.id;
}
"}\n                    className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                    value={action.type}\n                    onChange={handleTypeChange}\n                    disabled={disabled}\n                    required\n                >\n                    <option value=\"log\">log</option>\n                    <option value=\"callAPI\">callAPI</option>\n                    <option value=\"runScript\">runScript</option>\n                    <option value=\"executeRune\">executeRune</option>\n                    <option value=\"waitForUserInput\">waitForUserInput</option>\n                    <option value=\"syncKnowledge\">syncKnowledge</option>\n                    <option value=\"sendNotification\">sendNotification</option>\n                    <option value=\"updateGoalProgress\">updateGoalProgress</option>\n                    {/* Add other action types as needed */}\n                    <option value=\"create_agentic_flow\">create_agentic_flow</option>\n                    <option value=\"create_task\">create_task</option>\n                    <option value=\"search_knowledge\">search_knowledge</option>\n                    <option value=\"sync_mobile_git\">sync_mobile_git</option>\n                    <option value=\"present_suggestion\">present_suggestion</option>\n                </select>\n            </div>\n\n            {/* Action Details Input (Structured or JSON fallback) */}\n            {renderStructuredDetails()}\n\n        </div>\n    );\n};\n\nexport default ActionEditor;\n"(__makeTemplateObject([""], [""]));
