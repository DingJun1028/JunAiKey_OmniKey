var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// src/pages/Settings.tsx\n// Settings Page\n// Allows users to view and manage their personal settings.\n// --- New: Add UI for viewing and managing user settings ---// --- New: Add Structured Editing for API Keys, Sync, and Notification Settings ---// --- New: Add UI for managing Integrations ---// --- New: Enhance Integrations UI with Unlink button and state management ---// --- New: Add UI for managing Boost.Space Sync Configuration ---// --- New: Refine Boost.Space Sync UI with Table ID inputs and Field Mapping placeholder ---// --- New: Add Realtime Updates for Settings and Integrations ---// --- New: Add UI for User Data Reset ---// --- New: Add UI for Codex Backup ---// --- New: Add UI for Codex Guardian (Data Integrity Check) ---// --- New: Add UI for Codex Restricted Zone (Secure Storage) ---// --- New: Add UI for Defense Aura (Security Monitoring) ---// --- Modified: Add UI for Working Copy Integration ---// --- Modified: Add UI for Sensitive Data Management ---// --- Modified: Add UI for Data Integrity Check ---// --- Modified: Add UI for Security Monitoring Scan ---// --- New: Add note about local filesystem and iCloud limitations ---// --- Modified: Add UI for Codex Backup ---import React, { useEffect, useState } from 'react';import { SecurityService } from '../core/security/SecurityService';import { SyncService } from '../modules/sync/SyncService';import { NotificationService } from '../modules/notifications/NotificationService';import { RuneEngraftingCenter } from '../core/rune-engrafting/SacredRuneEngraver';import { User, CloudSyncConfig, BoostSpaceSyncConfig, SensitiveDataEntry } from '../interfaces'; // Import CloudSyncConfig, BoostSpaceSyncConfig, SensitiveDataEntryimport { Settings as SettingsIcon, Key, Cloud, Bell, Zap, Link as LinkIcon, Unlink, Edit, Save, XCircle, Trash2, Loader2, Info, AlertTriangle, DatabaseBackup, Shield, PlusCircle, MinusCircle, Eye, EyeOff, MonitorDot, User as UserIcon } from 'lucide-react'; // Import icons including MonitorDot, UserIcon// Access core modules from the global window object (for MVP simplicity)// In a real app, use React Context or dependency injectiondeclare const window: any;const securityService: SecurityService = window.systemContext?.securityService; // The Security Service (\\u5b89\\u5168\\u670d\\u52d9) pillarconst syncService: SyncService = window.systemContext?.syncService; // The Sync Service (\\u540c\\u6b65\\u670d\\u52d9) moduleconst notificationService: NotificationService = window.systemContext?.notificationService; // The Notification Service (\\u901a\\u77e5\\u670d\\u52d9) moduleconst runeEngraftingCenter: RuneEngraftingCenter = window.systemContext?.sacredRuneEngraver; // The Rune Engrafting (\\u7b26\\u6587\\u5d4c\\u5408) pillarconst authorityForgingEngine: any = window.systemContext?.authorityForgingEngine; // Use any for action recording (\\u6b0a\\u80fd\\u935b\\u9020)const systemContext: any = window.systemContext; // Access the full context for currentUserconst Settings: React.FC = () => {  const [currentUser, setCurrentUser] = useState<User | null>(systemContext?.currentUser);  const [loading, setLoading] = useState(true);  const [error, setError] = useState<string | null>(null);  // --- State for API Keys ---  const [apiKeys, setApiKeys] = useState<Record<string, string>>({});  const [isEditingApiKeys, setIsEditingApiKeys] = useState(false);  const [isSavingApiKeys, setIsSavingApiKeys] = useState(false);  // --- State for Sync Config ---  const [syncConfig, setSyncConfig] = useState<CloudSyncConfig | null>(null);  const [isEditingSyncConfig, setIsEditingSyncConfig] = useState(false);  const [isSavingSyncConfig, setIsSavingSyncConfig] = useState(false);  const [syncConfigError, setSyncConfigError] = useState<string | null>(null); // Error specific to sync config editing  // --- State for Notification Settings ---  // TODO: Implement state and UI for notification settings  // --- State for Integrations ---  const [linkedIntegrations, setLinkedIntegrations] = useState<Record<string, { status: 'linked' | 'unlinked' | 'error', details?: any }>>({});  const [isLinkingIntegration, setIsLinkingIntegration] = useState<string | null>(null); // Track which integration is linking  const [isUnlinkingIntegration, setIsUnlinkingIntegration] = useState<string | null>(null); // Track which integration is unlinking  const [integrationError, setIntegrationError] = useState<string | null>(null); // Error specific to integration linking/unlinking  // --- New: State for Working Copy Integration Modal ---  const [showWorkingCopyModal, setShowWorkingCopyModal] = useState(false);  const [workingCopyKey, setWorkingCopyKey] = useState('');  const [isSavingWorkingCopyKey, setIsSavingWorkingCopyKey] = useState(false);  const [workingCopyKeyError, setWorkingCopyKeyError] = useState<string | null>(null);  // --- End New ---  // --- State for User Data Reset ---  const [isResettingData, setIsResettingData] = useState(false);  const [resetError, setResetError] = useState<string | null>(null);  // --- New: State for Codex Backup ---  const [isBackingUp, setIsBackingUp] = useState(false);  const [backupError, setBackupError] = useState<string | null>(null);  // --- New: State for Codex Guardian (Data Integrity Check) ---  const [isCheckingIntegrity, setIsCheckingIntegrity] = useState(false);  const [integrityCheckResult, setIntegrityCheckResult] = useState<any>(null);  const [integrityCheckError, setIntegrityCheckError] = useState<string | null>(null);  const [showIntegrityResultModal, setShowIntegrityResultModal] = useState(false);  // --- End New ---  // --- New: State for Codex Restricted Zone (Secure Storage) ---  const [sensitiveDataKeys, setSensitiveDataKeys] = useState<string[]>([]); // List of keys stored  const [isAddingSensitiveData, setIsAddingSensitiveData] = useState(false);  const [newSensitiveDataKey, setNewSensitiveDataKey] = useState('');  const [newSensitiveDataValue, setNewSensitiveDataValue] = useState(''); // Store as string for input  const [isSavingSensitiveData, setIsSavingSensitiveData] = useState(false);  const [sensitiveDataError, setSensitiveDataError] = useState<string | null>(null);  // --- End New ---  // --- New: State for Defense Aura (Security Monitoring) ---  const [isMonitoring, setIsMonitoring] = useState(false); // State for manual scan  const [securityScanResult, setSecurityScanResult] = useState<any>(null);  const [securityScanError, setSecurityScanError] = useState<string | null>(null);  const [showSecurityResultModal, setShowSecurityResultModal] = useState(false);  // --- End New ---  const fetchSettings = async () => {       const userId = systemContext?.currentUser?.id;       if (!securityService || !userId) {            setError(\"SecurityService module not initialized or user not logged in.\");            setLoading(false);            return;        }      setLoading(true);      setError(null); // Clear main error when fetching      try {          // Fetch API Keys (Simulated)          // TODO: Implement getApiKeys method in SecurityService          // const userApiKeys = await securityService.getApiKeys(userId); // Pass userId          // setApiKeys(userApiKeys);          setApiKeys({ simulated_api_key: '********', another_key: '********' }); // Simulated data          // Fetch Sync Config (Simulated)          const userSyncConfig = await securityService.getSyncConfig(userId); // Pass userId          setSyncConfig(userSyncConfig || null); // Ensure it's null if undefined          // Fetch Linked Integrations (Simulated)          const userLinkedIntegrations = await securityService.getLinkedIntegrations(userId); // Pass userId          setLinkedIntegrations(userLinkedIntegrations);          // TODO: Fetch Notification Settings          // --- New: Fetch list of sensitive data keys (Simulated) ---          // In a real app, you would fetch a list of keys from the secure storage table,          // without fetching the encrypted data itself.          // Let's simulate this by accessing the internal map keys for MVP.          const storedKeys = await securityService.getSensitiveDataKeys(userId); // Use the service method          setSensitiveDataKeys(storedKeys);          // --- End New ---      } catch (err: any) {          console.error('Error fetching settings:', err);          setError("], ["typescript\n// src/pages/Settings.tsx\n// Settings Page\n// Allows users to view and manage their personal settings.\n// --- New: Add UI for viewing and managing user settings ---\\\n// --- New: Add Structured Editing for API Keys, Sync, and Notification Settings ---\\\n// --- New: Add UI for managing Integrations ---\\\n// --- New: Enhance Integrations UI with Unlink button and state management ---\\\n// --- New: Add UI for managing Boost.Space Sync Configuration ---\\\n// --- New: Refine Boost.Space Sync UI with Table ID inputs and Field Mapping placeholder ---\\\n// --- New: Add Realtime Updates for Settings and Integrations ---\\\n// --- New: Add UI for User Data Reset ---\\\n// --- New: Add UI for Codex Backup ---\\\n// --- New: Add UI for Codex Guardian (Data Integrity Check) ---\\\n// --- New: Add UI for Codex Restricted Zone (Secure Storage) ---\\\n// --- New: Add UI for Defense Aura (Security Monitoring) ---\\\n// --- Modified: Add UI for Working Copy Integration ---\\\n// --- Modified: Add UI for Sensitive Data Management ---\\\n// --- Modified: Add UI for Data Integrity Check ---\\\n// --- Modified: Add UI for Security Monitoring Scan ---\\\n// --- New: Add note about local filesystem and iCloud limitations ---\\\n// --- Modified: Add UI for Codex Backup ---\\\n\\\n\\\nimport React, { useEffect, useState } from 'react';\\\nimport { SecurityService } from '../core/security/SecurityService';\\\nimport { SyncService } from '../modules/sync/SyncService';\\\nimport { NotificationService } from '../modules/notifications/NotificationService';\\\nimport { RuneEngraftingCenter } from '../core/rune-engrafting/SacredRuneEngraver';\\\nimport { User, CloudSyncConfig, BoostSpaceSyncConfig, SensitiveDataEntry } from '../interfaces'; // Import CloudSyncConfig, BoostSpaceSyncConfig, SensitiveDataEntry\\\nimport { Settings as SettingsIcon, Key, Cloud, Bell, Zap, Link as LinkIcon, Unlink, Edit, Save, XCircle, Trash2, Loader2, Info, AlertTriangle, DatabaseBackup, Shield, PlusCircle, MinusCircle, Eye, EyeOff, MonitorDot, User as UserIcon } from 'lucide-react'; // Import icons including MonitorDot, UserIcon\\\n\\\n\\\n// Access core modules from the global window object (for MVP simplicity)\\\n// In a real app, use React Context or dependency injection\\\ndeclare const window: any;\\\nconst securityService: SecurityService = window.systemContext?.securityService; // The Security Service (\\\\u5b89\\\\u5168\\\\u670d\\\\u52d9) pillar\\\nconst syncService: SyncService = window.systemContext?.syncService; // The Sync Service (\\\\u540c\\\\u6b65\\\\u670d\\\\u52d9) module\\\nconst notificationService: NotificationService = window.systemContext?.notificationService; // The Notification Service (\\\\u901a\\\\u77e5\\\\u670d\\\\u52d9) module\\\nconst runeEngraftingCenter: RuneEngraftingCenter = window.systemContext?.sacredRuneEngraver; // The Rune Engrafting (\\\\u7b26\\\\u6587\\\\u5d4c\\\\u5408) pillar\\\nconst authorityForgingEngine: any = window.systemContext?.authorityForgingEngine; // Use any for action recording (\\\\u6b0a\\\\u80fd\\\\u935b\\\\u9020)\\\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\\\n\\\n\\\nconst Settings: React.FC = () => {\\\n  const [currentUser, setCurrentUser] = useState<User | null>(systemContext?.currentUser);\\\n  const [loading, setLoading] = useState(true);\\\n  const [error, setError] = useState<string | null>(null);\\\n\\\n  // --- State for API Keys ---\\\n  const [apiKeys, setApiKeys] = useState<Record<string, string>>({});\\\n  const [isEditingApiKeys, setIsEditingApiKeys] = useState(false);\\\n  const [isSavingApiKeys, setIsSavingApiKeys] = useState(false);\\\n\\\n  // --- State for Sync Config ---\\\n  const [syncConfig, setSyncConfig] = useState<CloudSyncConfig | null>(null);\\\n  const [isEditingSyncConfig, setIsEditingSyncConfig] = useState(false);\\\n  const [isSavingSyncConfig, setIsSavingSyncConfig] = useState(false);\\\n  const [syncConfigError, setSyncConfigError] = useState<string | null>(null); // Error specific to sync config editing\\\n\\\n  // --- State for Notification Settings ---\\\n  // TODO: Implement state and UI for notification settings\\\n\\\n  // --- State for Integrations ---\\\n  const [linkedIntegrations, setLinkedIntegrations] = useState<Record<string, { status: 'linked' | 'unlinked' | 'error', details?: any }>>({});\\\n  const [isLinkingIntegration, setIsLinkingIntegration] = useState<string | null>(null); // Track which integration is linking\\\n  const [isUnlinkingIntegration, setIsUnlinkingIntegration] = useState<string | null>(null); // Track which integration is unlinking\\\n  const [integrationError, setIntegrationError] = useState<string | null>(null); // Error specific to integration linking/unlinking\\\n\\\n  // --- New: State for Working Copy Integration Modal ---\\\n  const [showWorkingCopyModal, setShowWorkingCopyModal] = useState(false);\\\n  const [workingCopyKey, setWorkingCopyKey] = useState('');\\\n  const [isSavingWorkingCopyKey, setIsSavingWorkingCopyKey] = useState(false);\\\n  const [workingCopyKeyError, setWorkingCopyKeyError] = useState<string | null>(null);\\\n  // --- End New ---\\\n\\\n  // --- State for User Data Reset ---\\\n  const [isResettingData, setIsResettingData] = useState(false);\\\n  const [resetError, setResetError] = useState<string | null>(null);\\\n\\\n  // --- New: State for Codex Backup ---\\\n  const [isBackingUp, setIsBackingUp] = useState(false);\\\n  const [backupError, setBackupError] = useState<string | null>(null);\\\n\\\n  // --- New: State for Codex Guardian (Data Integrity Check) ---\\\n  const [isCheckingIntegrity, setIsCheckingIntegrity] = useState(false);\\\n  const [integrityCheckResult, setIntegrityCheckResult] = useState<any>(null);\\\n  const [integrityCheckError, setIntegrityCheckError] = useState<string | null>(null);\\\n  const [showIntegrityResultModal, setShowIntegrityResultModal] = useState(false);\\\n  // --- End New ---\\\n\\\n  // --- New: State for Codex Restricted Zone (Secure Storage) ---\\\n  const [sensitiveDataKeys, setSensitiveDataKeys] = useState<string[]>([]); // List of keys stored\\\n  const [isAddingSensitiveData, setIsAddingSensitiveData] = useState(false);\\\n  const [newSensitiveDataKey, setNewSensitiveDataKey] = useState('');\\\n  const [newSensitiveDataValue, setNewSensitiveDataValue] = useState(''); // Store as string for input\\\n  const [isSavingSensitiveData, setIsSavingSensitiveData] = useState(false);\\\n  const [sensitiveDataError, setSensitiveDataError] = useState<string | null>(null);\\\n  // --- End New ---\\\n\\\n  // --- New: State for Defense Aura (Security Monitoring) ---\\\n  const [isMonitoring, setIsMonitoring] = useState(false); // State for manual scan\\\n  const [securityScanResult, setSecurityScanResult] = useState<any>(null);\\\n  const [securityScanError, setSecurityScanError] = useState<string | null>(null);\\\n  const [showSecurityResultModal, setShowSecurityResultModal] = useState(false);\\\n  // --- End New ---\\\n\\\n\\\n  const fetchSettings = async () => {\\\n       const userId = systemContext?.currentUser?.id;\\\n       if (!securityService || !userId) {\\\n            setError(\\\"SecurityService module not initialized or user not logged in.\\\");\\\n            setLoading(false);\\\n            return;\\\n        }\\\n      setLoading(true);\\\n      setError(null); // Clear main error when fetching\\\n      try {\\\n          // Fetch API Keys (Simulated)\\\n          // TODO: Implement getApiKeys method in SecurityService\\\n          // const userApiKeys = await securityService.getApiKeys(userId); // Pass userId\\\n          // setApiKeys(userApiKeys);\\\n          setApiKeys({ simulated_api_key: '********', another_key: '********' }); // Simulated data\\\n\\\n          // Fetch Sync Config (Simulated)\\\n          const userSyncConfig = await securityService.getSyncConfig(userId); // Pass userId\\\n          setSyncConfig(userSyncConfig || null); // Ensure it's null if undefined\\\n\\\n          // Fetch Linked Integrations (Simulated)\\\n          const userLinkedIntegrations = await securityService.getLinkedIntegrations(userId); // Pass userId\\\n          setLinkedIntegrations(userLinkedIntegrations);\\\n\\\n          // TODO: Fetch Notification Settings\\\n\\\n          // --- New: Fetch list of sensitive data keys (Simulated) ---\\\n          // In a real app, you would fetch a list of keys from the secure storage table,\\\n          // without fetching the encrypted data itself.\\\n          // Let's simulate this by accessing the internal map keys for MVP.\\\n          const storedKeys = await securityService.getSensitiveDataKeys(userId); // Use the service method\\\n          setSensitiveDataKeys(storedKeys);\\\n          // --- End New ---\\\n\\\n\\\n      } catch (err: any) {\\\n          console.error('Error fetching settings:', err);\\\n          setError("]));
Failed;
to;
load;
settings: $;
{
    err.message;
}
");      } finally {          setLoading(false);      }  };  useEffect(() => {    // Fetch data when the component mounts or when the user changes    if (systemContext?.currentUser?.id) {        setCurrentUser(systemContext.currentUser); // Update currentUser state        fetchSettings(); // Fetch all settings on initial load    }    // --- New: Subscribe to realtime updates for profiles, sync_configs, linked_integrations ---    // Note: Supabase RLS on auth.users and profiles should ensure user only sees their own data.    // Sync configs and linked integrations would ideally be in user-specific tables.    // For MVP, we rely on SecurityService's in-memory state and refetching.    // A more robust approach would involve Realtime subscriptions to user-specific tables.    // Let's add listeners for events published by SecurityService for state changes    let unsubscribeAuth: (() => void) | undefined;    let unsubscribeSyncConfigLoaded: (() => void) | undefined;    let unsubscribeSyncConfigUpdated: (() => void) | undefined;    let unsubscribeIntegrationLinked: (() => void) | undefined;    let unsubscribeIntegrationLinkingFailed: (() => void) | undefined;    let unsubscribeIntegrationUnlinked: (() => void) | undefined;    let unsubscribeUserDataReset: (() => void) | undefined; // New: Subscribe to user data reset event    // --- New: Subscribe to backup events ---    let unsubscribeBackupStarted: (() => void) | undefined;    let unsubscribeBackupCompleted: (() => void) | undefined;    // --- End New ---    // --- New: Subscribe to integrity check events ---    let unsubscribeIntegrityCheckStarted: (() => void) | undefined;    let unsubscribeIntegrityCheckCompleted: (() => void) | undefined;    // --- End New ---    // --- New: Subscribe to security scan events ---    let unsubscribeSecurityScanStarted: (() => void) | undefined;    let unsubscribeSecurityScanCompleted: (() => void) | undefined;    // --- End New ---    if (systemContext?.eventBus) { // Check if EventBus is available        const eventBus = systemContext.eventBus;        const userId = systemContext?.currentUser?.id;        // Subscribe to auth state changes to update currentUser state        if (securityService) {             unsubscribeAuth = securityService.onAuthStateChange((user: User | null) => {                 setCurrentUser(user);                 // Fetch settings on login (handled by the main useEffect)                 // Clear state on logout (handled by the main useEffect else block)             });        }        // Subscribe to sync config events        unsubscribeSyncConfigLoaded = eventBus.subscribe('sync_config_loaded', (payload: { userId: string, config: CloudSyncConfig }) => {            if (payload.userId === userId) {                console.log('Settings page received sync_config_loaded event:', payload);                setSyncConfig(payload.config);            }        });         unsubscribeSyncConfigUpdated = eventBus.subscribe('sync_config_updated', (payload: { userId: string, config: CloudSyncConfig }) => {             if (payload.userId === userId) {                 console.log('Settings page received sync_config_updated event:', payload);                 setSyncConfig(payload.config);             }         });        // Subscribe to integration events        unsubscribeIntegrationLinked = eventBus.subscribe('integration_linked', (payload: { userId: string, integrationId: string }) => {             if (payload.userId === userId) {                 console.log('Settings page received integration_linked event:', payload);                 // Refetch linked integrations to update the list                 securityService.getLinkedIntegrations(userId).then(setLinkedIntegrations).catch(err => console.error('Error refetching integrations:', err));                 alert(";
Integration;
$;
{
    payload.integrationId;
}
linked;
successfully(__makeTemplateObject([");             }         });         unsubscribeIntegrationLinkingFailed = eventBus.subscribe('integration_linking_failed', (payload: { userId: string, integrationId: string, error: string }) => {             if (payload.userId === userId) {                 console.log('Settings page received integration_linking_failed event:', payload);                 // Refetch linked integrations to update the list (status might be 'error')                 securityService.getLinkedIntegrations(userId).then(setLinkedIntegrations).catch(err => console.error('Error refetching integrations:', err));                 alert("], [");\\\n             }\\\n         });\\\n         unsubscribeIntegrationLinkingFailed = eventBus.subscribe('integration_linking_failed', (payload: { userId: string, integrationId: string, error: string }) => {\\\n             if (payload.userId === userId) {\\\n                 console.log('Settings page received integration_linking_failed event:', payload);\\\n                 // Refetch linked integrations to update the list (status might be 'error')\\\n                 securityService.getLinkedIntegrations(userId).then(setLinkedIntegrations).catch(err => console.error('Error refetching integrations:', err));\\\n                 alert("]));
Integration;
$;
{
    payload.integrationId;
}
linking;
failed: $;
{
    payload.error;
}
");             }         });          unsubscribeIntegrationUnlinked = eventBus.subscribe('integration_unlinked', (payload: { userId: string, integrationId: string }) => {             if (payload.userId === userId) {                 console.log('Settings page received integration_unlinked event:', payload);                 // Refetch linked integrations to update the list                 securityService.getLinkedIntegrations(userId).then(setLinkedIntegrations).catch(err => console.error('Error refetching integrations:', err));                 alert(";
Integration;
$;
{
    payload.integrationId;
}
unlinked;
successfully(__makeTemplateObject([");             }         });        // New: Subscribe to user data reset event        unsubscribeUserDataReset = eventBus.subscribe('user_data_reset', (payload: { userId: string }) => {            if (payload.userId === userId) {                console.log('Settings page received user_data_reset event.');                // The securityService.resetUserData method logs out the user after reset,                // which triggers the auth state change listener to clear state and navigate.                // No need for explicit state clearing here.                alert('Your data has been reset.');            }        });        // --- New: Subscribe to backup events ---        unsubscribeBackupStarted = eventBus.subscribe('backup_started', (payload: { userId: string }) => {            if (payload.userId === userId) {                console.log('Settings page received backup_started event.');                setIsBackingUp(true);                setBackupError(null); // Clear previous errors            }        });         unsubscribeBackupCompleted = eventBus.subscribe('backup_completed', (payload: { userId: string, status: 'success' | 'failed', error?: string }) => {             if (payload.userId === userId) {                 console.log('Settings page received backup_completed event:', payload);                 setIsBackingUp(false);                 if (payload.status === 'success') {                     alert('Data backup completed successfully!');                 } else {                     setBackupError("], [");\\\n             }\\\n         });\\\n\\\n        // New: Subscribe to user data reset event\\\n        unsubscribeUserDataReset = eventBus.subscribe('user_data_reset', (payload: { userId: string }) => {\\\n            if (payload.userId === userId) {\\\n                console.log('Settings page received user_data_reset event.');\\\n                // The securityService.resetUserData method logs out the user after reset,\\\n                // which triggers the auth state change listener to clear state and navigate.\\\n                // No need for explicit state clearing here.\\\n                alert('Your data has been reset.');\\\n            }\\\n        });\\\n\\\n        // --- New: Subscribe to backup events ---\\\n        unsubscribeBackupStarted = eventBus.subscribe('backup_started', (payload: { userId: string }) => {\\\n            if (payload.userId === userId) {\\\n                console.log('Settings page received backup_started event.');\\\n                setIsBackingUp(true);\\\n                setBackupError(null); // Clear previous errors\\\n            }\\\n        });\\\n         unsubscribeBackupCompleted = eventBus.subscribe('backup_completed', (payload: { userId: string, status: 'success' | 'failed', error?: string }) => {\\\n             if (payload.userId === userId) {\\\n                 console.log('Settings page received backup_completed event:', payload);\\\n                 setIsBackingUp(false);\\\n                 if (payload.status === 'success') {\\\n                     alert('Data backup completed successfully!');\\\n                 } else {\\\n                     setBackupError("]));
Data;
backup;
failed: $;
{
    payload.error;
}
");                     alert(";
Data;
backup;
failed: $;
{
    payload.error;
}
");                 }             }         });        // --- End New ---        // --- New: Subscribe to integrity check events ---        unsubscribeIntegrityCheckStarted = eventBus.subscribe('data_integrity_check_started', (payload: { userId: string }) => {            if (payload.userId === userId) {                console.log('Settings page received data_integrity_check_started event.');                setIsCheckingIntegrity(true);                setIntegrityCheckResult(null);                setIntegrityCheckError(null);                setShowIntegrityResultModal(false);            }        });         unsubscribeIntegrityCheckCompleted = eventBus.subscribe('data_integrity_check_completed', (payload: { userId: string, results: any }) => {             if (payload.userId === userId) {                 console.log('Settings page received data_integrity_check_completed event:', payload);                 setIsCheckingIntegrity(false);                 setIntegrityCheckResult(payload.results);                 setIntegrityCheckError(payload.results?.status === 'error' ? payload.results.message : null);                 setShowIntegrityResultModal(true);             }         });        // --- End New ---        // --- New: Subscribe to security scan events ---        unsubscribeSecurityScanStarted = eventBus.subscribe('security_scan_started', (payload: { userId: string }) => {            if (payload.userId === userId) {                console.log('Settings page received security_scan_started event.');                setIsMonitoring(true);                setSecurityScanResult(null);                setSecurityScanError(null);                setShowSecurityResultModal(false);            }        });         unsubscribeSecurityScanCompleted = eventBus.subscribe('security_scan_completed', (payload: { userId: string, results: any }) => {             if (payload.userId === userId) {                 console.log('Settings page received security_scan_completed event:', payload);                 setIsMonitoring(false);                 setSecurityScanResult(payload.results);                 setSecurityScanError(payload.results?.status === 'error' ? payload.results.message : null);                 setShowSecurityResultModal(true);             }         });        // --- End New ---    }    return () => {        // Unsubscribe on component unmount        unsubscribeAuth?.();        unsubscribeSyncConfigLoaded?.();        unsubscribeSyncConfigUpdated?.();        unsubscribeIntegrationLinked?.();        unsubscribeIntegrationLinkingFailed?.();        unsubscribeIntegrationUnlinked?.();        unsubscribeUserDataReset?.(); // Unsubscribe from reset event        // --- New: Unsubscribe from backup events ---        unsubscribeBackupStarted?.();        unsubscribeBackupCompleted?.();        // --- End New ---        // --- New: Unsubscribe from integrity check events ---        unsubscribeIntegrityCheckStarted?.();        unsubscribeIntegrityCheckCompleted?.();        // --- End New ---        // --- New: Unsubscribe from security scan events ---        unsubscribeSecurityScanStarted?.();        unsubscribeSecurityScanCompleted?.();        // --- End New ---    };  }, [systemContext?.currentUser?.id, securityService, syncService, notificationService, runeEngraftingCenter]); // Re-run effect when user ID or relevant services change    // --- New: Handle API Key Save ---    const handleSaveApiKeys = async (e: React.FormEvent) => {        e.preventDefault();        const userId = systemContext?.currentUser?.id;        if (!securityService || !userId) {            alert(\\\"SecurityService module not initialized or user not logged in.\\\");            return;        }        setIsSavingApiKeys(true);        setError(null); // Clear main error        try {            // Parse the JSON input            const newApiKeys = JSON.parse(JSON.stringify(apiKeys)); // Simple copy            // Call the service method to update API keys (Simulated)            // TODO: Implement updateApiKeys method in SecurityService            // await securityService.updateApiKeys(userId, newApiKeys); // Pass userId and new keys            console.log('Simulating saving API Keys:', newApiKeys);            await new Promise(resolve => setTimeout(resolve, 500)); // Simulate save time            setApiKeys(newApiKeys); // Update state with saved keys (simulated)             // Simulate recording user action (Part of \\u6b0a\\u80fd\\u935b\\u9020 / \\u516d\\u5f0f\\u5967\\u7fa9: \\u89c0\\u6e2c)            authorityForgingEngine?.recordAction({                type: 'web:settings:update_api_keys',                details: { updatedKeys: Object.keys(newApiKeys) },                context: { platform: 'web', page: 'settings' },                user_id: userId, // Associate action with user            });        } catch (err: any) {            console.error('Error updating API keys:', err);            setError(";
Failed;
to;
update;
API;
keys: $;
{
    err.message;
}
");        } finally {            setIsSavingApiKeys(false);        }    };    // --- End New ---    // --- New: Handle Sync Config Save ---    const handleSaveSyncConfig = async (e: React.FormEvent) => {        e.preventDefault();        const userId = systemContext?.currentUser?.id;        if (!securityService || !userId || !syncConfig) {            alert(\\\"SecurityService module not initialized, user not logged in, or sync config not loaded.\\\");            return;        }        setIsSavingSyncConfig(true);        setSyncConfigError(null); // Clear specific error        try {            // Call the service method to update sync config (Simulated)            const updatedConfig = await securityService.updateSyncConfig(userId, syncConfig); // Pass userId and new config            if (updatedConfig) {                 alert('Sync Configuration updated successfully!');                 setIsEditingSyncConfig(false); // Close edit form                 // State update handled by realtime listener ('sync_config_updated' event)                  // Simulate recording user action                authorityForgingEngine?.recordAction({                    type: 'web:settings:update_sync_config',                    details: { config: updatedConfig },                    context: { platform: 'web', page: 'settings' },                    user_id: userId, // Associate action with user                });\n            } else {\n                 setSyncConfigError('Failed to update sync configuration.');\n            }\n        } catch (err: any) {\n            console.error('Error updating sync config:', err);\n            setSyncConfigError(";
Failed;
to;
update;
sync;
configuration: $;
{
    err.message;
}
");\n        } finally {\n            setIsSavingSyncConfig(false);\n        }\n    };\n    // --- End New ---\n\n    // --- New: Handle Integration Linking ---\n    const handleLinkIntegration = async (integrationId: string) => {\n        const userId = systemContext?.currentUser?.id;\n        if (!securityService || !userId) {\n            alert(\\\"SecurityService module not initialized or user not logged in.\\\");\n            return;\n        }\n        console.log(";
Attempting;
to;
link;
integration: $;
{
    integrationId;
}
");\n         // Simulate recording user action\n        authorityForgingEngine?.recordAction({\n            type: 'web:settings:link_integration',\n            details: { integrationId },\n            context: { platform: 'web', page: 'settings' },\n            user_id: userId, // Associate action with user\n        });\n\n        setIsLinkingIntegration(integrationId); // Indicate this integration is linking\n        setIntegrationError(null); // Clear previous errors\n        try {\n            // Call the service method to link the integration (Simulated)\n            // For MVP, we don't need to collect credentials via UI, just simulate the link.\n            // Special case for Working Copy: Open modal to get key\n            if (integrationId === 'workingcopy') {\n                 setShowWorkingCopyModal(true);\n                 setWorkingCopyKey(''); // Clear previous key\n                 setWorkingCopyKeyError(null);\n                 // The actual linking happens when the key is saved in the modal\n            } else {\n                 // For other integrations, simulate linking directly\n                 await securityService.linkIntegration(userId, integrationId); // Pass userId and integrationId\n                 // State update and alert handled by event listeners ('integration_linked' or 'integration_linking_failed')\n            }\n\n        } catch (err: any) {\n            console.error(";
Error;
linking;
integration;
$;
{
    integrationId;
}
", err);\n            // Error and alert handled by event listener (except for Working Copy modal)\n            if (integrationId !== 'workingcopy') {\n                 setIntegrationError(";
Failed;
to;
link;
integration: $;
{
    err.message;
}
");\n                 alert(";
Failed;
to;
link;
integration: $;
{
    err.message;
}
");\n            }\n        } finally {\n            // setIsLinkingIntegration is reset by the event listener for non-Working Copy integrations\n            if (integrationId !== 'workingcopy') {\n                 setIsLinkingIntegration(null);\n            }\n        }\n    };\n    // --- End New ---\n\n    // --- New: Handle Integration Unlinking ---\n    const handleUnlinkIntegration = async (integrationId: string) => {\n        const userId = systemContext?.currentUser?.id;\n        if (!securityService || !userId) {\n            alert(\\\"SecurityService module not initialized or user not logged in.\\\");\n            return;\n        }\n        if (!confirm(";
Are;
you;
sure;
you;
want;
to;
unlink;
$;
{
    integrationId;
}
")) return;\n\n        console.log(";
Attempting;
to;
unlink;
integration: $;
{
    integrationId;
}
");\n         // Simulate recording user action\n        authorityForgingEngine?.recordAction({\n            type: 'web:settings:unlink_integration',\n            details: { integrationId },\n            context: { platform: 'web', page: 'settings' },\n            user_id: userId, // Associate action with user\n        });\n\n        setIsUnlinkingIntegration(integrationId); // Indicate this integration is unlinking\n        setIntegrationError(null); // Clear previous errors\n        try {\n            // Call the service method to unlink the integration (Simulated)\n            await securityService.unlinkIntegration(userId, integrationId); // Pass userId and integrationId\n            // State update and alert handled by event listener ('integration_unlinked')\n        } catch (err: any) {\n            console.error(";
Error;
unlinking;
integration;
$;
{
    integrationId;
}
", err);\n            setIntegrationError(";
Failed;
to;
unlink;
integration: $;
{
    err.message;
}
");\n            alert(";
Failed;
to;
unlink;
integration: $;
{
    err.message;
}
");\n        } finally {\n            setIsUnlinkingIntegration(null); // Reset unlinking state\n        }\n    };\n    // --- End New ---\n\n    // --- New: Handle User Data Reset ---\n    const handleResetUserData = async () => {\n        const userId = systemContext?.currentUser?.id;\n        if (!securityService || !userId) {\n            alert(\\\"SecurityService module not initialized or user not logged in.\\\");\n            return;\n        }\n\n        // Double confirmation for destructive action\n        if (!confirm(\\\"WARNING: This will delete ALL your data (Knowledge Base, Tasks, Goals, Insights, Runes, etc.). This action cannot be undone.\\\\n\\\\nAre you absolutely sure you want to proceed?\\\")) {\n            return;\n        }\n         if (!confirm(\\\"FINAL CONFIRMATION: Are you REALLY sure? This is your last chance to cancel.\\\")) {\n            return;\n        }\n\n        console.log(";
Attempting;
to;
reset;
user;
data;
for (user; ; )
    : $;
{
    userId;
}
");\n         // Simulate recording user action\n        authorityForgingEngine?.recordAction({\n            type: 'web:settings:reset_data',\n            details: { userId },\n            context: { platform: 'web', page: 'settings' },\n            user_id: userId, // Associate action with user\n        });\n\n\n        setIsResettingData(true);\n        setResetError(null); // Clear previous errors\n        try {\n            // Call the securityService method to reset user data\n            // This method is expected to log out the user upon success\n            await securityService.resetUserData(userId); // Pass userId\n            // The 'user_data_reset' event listener and auth state change listener will handle UI updates and navigation.\n        } catch (err: any) {\n            console.error('Error resetting user data:', err);\n            setResetError(";
Failed;
to;
reset;
data: $;
{
    err.message;
}
");\n            alert(";
Failed;
to;
reset;
data: $;
{
    err.message;
}
");\n        } finally {\n            // setIsResettingData is reset by the auth state change listener after logout\n            // or explicitly here on error if logout doesn't happen\n            if (!systemContext?.currentUser) { // If user is no longer logged in (successful reset)\n                 setIsResettingData(false);\n            } else { // If user is still logged in (reset failed)\n                 setIsResettingData(false);\n            }\n        }\n    };\n    // --- End New ---\n\n    // --- New: Handle Codex Backup ---\n    const handleCodexBackup = async () => {\n        const userId = systemContext?.currentUser?.id;\n        if (!syncService || !userId) {\n            alert(\\\"SyncService module not initialized or user not logged in.\\\");\n            return;\n        }\n\n        // Optional confirmation for backup\n        if (!confirm(\\\"Initiate a full backup of your data?\\\")) {\n            return;\n        }\n\n        console.log(";
Attempting;
to;
backup;
data;
for (user; ; )
    : $;
{
    userId;
}
");\n         // Simulate recording user action\n        authorityForgingEngine?.recordAction({\n            type: 'web:settings:codex_backup',\n            details: { userId },\n            context: { platform: 'web', page: 'settings' },\n            user_id: userId, // Associate action with user\n        });\n\n        setIsBackingUp(true); // State updated by event listener\n        setBackupError(null); // Clear previous errors\n        try {\n            // Call the SyncAgent via MessageBus to trigger backup\n            // The SyncAgent handles the delegation to SyncService\n            // Use requestAgent if we need a direct response, but for fire-and-forget, sendMessage is fine.\n            // Let's use sendMessage to trigger the agent asynchronously.\n            systemContext.messageBus.sendMessage({\n                type: 'trigger_backup', // Message type for SyncAgent\n                payload: { userId: userId, destination: 'local_file' }, // Pass user ID and destination\n                recipient: 'sync', // Target the SyncAgent\n                // No correlationId needed as we rely on event listeners for status\n            });\n\n            // Status and outcome handled by event listeners ('backup_started', 'backup_completed')\n        } catch (err: any) {\n            console.error('Error triggering backup:', err);\n            // Error handled by event listener\n            // setBackupError(";
Failed;
to;
trigger;
backup: $;
{
    err.message;
}
");\n        } finally {\n            // setIsBackingUp is reset by the event listener\n        }\n    };\n    // --- End New ---\n\n    // --- New: Handle Codex Guardian (Data Integrity Check) ---\n    const handleCheckIntegrity = async () => {\n        const userId = systemContext?.currentUser?.id;\n        if (!securityService || !userId) {\n            alert(\\\"SecurityService module not initialized or user not logged in.\\\");\n            return;\n        }\n\n        console.log(";
Attempting;
data;
integrity;
check;
for (user; ; )
    : $;
{
    userId;
}
");\n         // Simulate recording user action\n        authorityForgingEngine?.recordAction({\n            type: 'web:settings:check_integrity',\n            details: { userId },\n            context: { platform: 'web', page: 'settings' },\n            user_id: userId, // Associate action with user\n        });\n\n        setIsCheckingIntegrity(true); // State updated by event listener\n        setIntegrityCheckResult(null);\n        setIntegrityCheckError(null);\n        setShowIntegrityResultModal(false);\n        try {\n            // Call the SecurityService method to trigger integrity check\n            await securityService.checkDataIntegrity(userId); // Pass userId\n            // Status and outcome handled by event listeners ('data_integrity_check_started', 'data_integrity_check_completed')\n        } catch (err: any) {\n            console.error('Error triggering integrity check:', err);\n            // Error handled by event listener\n            // setIntegrityCheckError(";
Failed;
to;
trigger;
integrity;
check: $;
{
    err.message;
}
");\n        } finally {\n            // setIsCheckingIntegrity is reset by the event listener\n        }\n    };\n    // --- End New ---\n\n    // --- New: Handle Codex Restricted Zone (Secure Storage) ---\n    const handleAddSensitiveData = async (e: React.FormEvent) => {\n        e.preventDefault();\n        const userId = systemContext?.currentUser?.id;\n        if (!securityService || !userId || !newSensitiveDataKey.trim() || newSensitiveDataValue === '') {\n            setSensitiveDataError(\\\"SecurityService module not initialized, user not logged in, or key/value is empty.\\\");\n            return;\n        }\n\n        setIsSavingSensitiveData(true);\n        setSensitiveDataError(null);\n        try {\n            // Attempt to parse the value as JSON if it looks like JSON\n            let dataToStore: any = newSensitiveDataValue;\n            try {\n                 dataToStore = JSON.parse(newSensitiveDataValue);\n                 console.log('Parsed sensitive data as JSON.');\n            } catch (parseError) {\n                 console.log('Sensitive data is not JSON, storing as string.');\n                 // Keep as string if not valid JSON\n            }\n\n            // Call the SecurityService method to store the sensitive data\n            await securityService.storeSensitiveData(userId, newSensitiveDataKey.trim(), dataToStore); // Pass userId, key, data\n\n            alert(";
Sensitive;
data;
for (key; ; )
    ;
"${newSensitiveDataKey}\\\\\\\" stored successfully!`);\n            console.log('Stored sensitive data for key:', newSensitiveDataKey);\n            // Reset form and refetch keys\n            setIsAddingSensitiveData(false);\n            setNewSensitiveDataKey('');\n            setNewSensitiveDataValue('');\n            fetchSettings(); // Refetch settings to update the list of keys\n             // Simulate recording user action\n            authorityForgingEngine?.recordAction({\n                type: 'web:settings:store_sensitive_data',\n                details: { key: newSensitiveDataKey.trim() },\n                context: { platform: 'web', page: 'settings' },\n                user_id: userId, // Associate action with user\n            });\n        } catch (err: any) {\n            console.error('Error storing sensitive data:', err);\n            setSensitiveDataError(`Failed to store sensitive data: ${err.message}`);\n        } finally {\n            setIsSavingSensitiveData(false);\n        }\n    };\n\n    const handleDeleteSensitiveData = async (key: string) => {\n        const userId = systemContext?.currentUser?.id;\n        if (!securityService || !userId) {\n            alert(\\\"SecurityService module not initialized or user not logged in.\\\");\n            return;\n        }\n        if (!confirm(`Are you sure you want to delete sensitive data for key \\\\\\\"${key}\\\\\\\"? This action cannot be undone.`)) return;\n\n        setSensitiveDataError(null);\n        try {\n            // Call the SecurityService method to delete the sensitive data\n            const success = await securityService.deleteSensitiveData(userId, key); // Pass userId, key\n\n            if (success) {\n                 alert(`Sensitive data for key \\\\\\\"${key}\\\\\\\" deleted successfully!`);\n                 console.log('Deleted sensitive data for key:', key);\n                 // Refetch keys\n                 fetchSettings();\n                  // Simulate recording user action\n                authorityForgingEngine?.recordAction({\n                    type: 'web:settings:delete_sensitive_data',\n                    details: { key },\n                    context: { platform: 'web', page: 'settings' },\n                    user_id: userId, // Associate action with user\n                });\n            } else {\n                 setError('Failed to delete sensitive data: Data not found.');\n                 alert('Failed to delete sensitive data: Data not found.');\n            }\n\n        } catch (err: any) {\n            console.error('Error deleting sensitive data:', err);\n            setSensitiveDataError(`Failed to delete sensitive data: ${err.message}`);\n            alert(`Failed to delete sensitive data: ${err.message}`);\n        }\n    };\n    // --- End New ---\n\n    // --- New: Security Monitoring (Defense Aura) ---\n    const handleMonitorSecurityEvents = async () => {\n        const userId = systemContext?.currentUser?.id;\n        if (!securityService || !userId) {\n            alert(\\\"SecurityService module not initialized or user not logged in.\\\");\n            return;\n        }\n\n        console.log(`Attempting manual security monitoring scan for user: ${userId}`);\n         // Simulate recording user action\n        authorityForgingEngine?.recordAction({\n            type: 'web:settings:security_scan',\n            details: { userId },\n            context: { platform: 'web', page: 'settings' },\n            user_id: userId, // Associate action with user\n        });\n\n        setIsMonitoring(true); // State updated by event listener\n        setSecurityScanResult(null);\n        setSecurityScanError(null);\n        setShowSecurityResultModal(false);\n        try {\n            // Call the SecurityService method to trigger the scan\n            await securityService.monitorSecurityEvents(userId); // Pass userId\n            // Status and outcome handled by event listeners ('security_scan_started', 'security_scan_completed')\n        } catch (err: any) {\n            console.error('Error triggering security scan:', err);\n            // Error handled by event listener\n            // setSecurityScanError(`Failed to trigger security scan: ${err.message}`);\n        } finally {\n            // setIsMonitoring is reset by the event listener\n        }\n    };\n    // --- End New ---\n\n    // --- New: Handle Working Copy Integration Save ---\n    const handleSaveWorkingCopyKey = async (e: React.FormEvent) => {\n        e.preventDefault();\n        const userId = systemContext?.currentUser?.id;\n        if (!securityService || !userId || !workingCopyKey.trim()) {\n            setWorkingCopyKeyError(\\\"SecurityService module not initialized, user not logged in, or key is empty.\\\");\n            return;\n        }\n\n        setIsSavingWorkingCopyKey(true);\n        setWorkingCopyKeyError(null);\n        try {\n            // Store the Working Copy key securely using SecurityService\n            await securityService.storeSensitiveData(userId, 'working_copy_key', workingCopyKey.trim()); // Use a specific key name\n\n            alert('Working Copy key stored successfully! Integration linked.');\n            console.log('Working Copy key stored.');\n            // Close modal and refetch settings to update integration status\n            setShowWorkingCopyModal(false);\n            setWorkingCopyKey('');\n            fetchSettings(); // Refetch settings to update the linked integrations list\n             // Simulate recording user action\n            authorityForgingEngine?.recordAction({\n                type: 'web:settings:link_working_copy',\n                details: { userId },\n                context: { platform: 'web', page: 'settings' },\n                user_id: userId, // Associate action with user\n            });\n\n        } catch (err: any) {\n            console.error('Error storing Working Copy key:', err);\n            setWorkingCopyKeyError(`Failed to store key: ${err.message}`);\n        } finally {\n            setIsSavingWorkingCopyKey(false);\n        }\n    };\n    // --- End New ---\n\n\n   // Ensure user is logged in before rendering content\n  if (!currentUser) {\n       // This case should ideally be handled by ProtectedRoute, but as a fallback:\n       return (\n            <div className=\"container mx-auto p-4 flex justify-center\">\n               <div className=\"bg-neutral-800/50 p-8 rounded-lg shadow-xl w-full max-w-md text-center text-neutral-300\">\n                   <p>Please log in to view your settings.</p>\n               </div>\n            </div>\n       );\n  }\n\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <div className=\"bg-neutral-800/50 p-6 rounded-lg shadow-xl\">\n        <h2 className=\"text-3xl font-bold text-blue-400 mb-6\">Settings (\\u5b89\\u5168\\u670d\\u52d9)</h2>\n        <p className=\"text-neutral-300 mb-8\">Manage your personal settings, API keys, sync configurations, and integrations.</p>\n\n        {loading ? (\n          <p className=\"text-neutral-400\">Loading settings...</p>\n        ) : error ? (\n             <p className=\"text-red-400\">Error: {error}</p>\n        ) : (\n            <div className=\"space-y-8\">\n                {/* User Profile Section (Placeholder) */}\n                <div className=\"p-4 bg-neutral-700/50 rounded-lg\">\n                    <h3 className=\"text-xl font-semibold text-blue-300 mb-3 flex items-center gap-2\\\"><UserIcon size={20}/> User Profile</h3>\n                    <p className=\"text-neutral-300 text-sm mb-2\">Email: {currentUser.email}</p>\n                    <p className=\"text-neutral-300 text-sm mb-2\">User ID: {currentUser.id}</p>\n                    <p className=\"text-neutral-300 text-sm mb-2\">Name: {currentUser.name || 'Not set'}</p>\n                    {currentUser.rune_capacity !== undefined && (\n                         <p className=\"text-neutral-300 text-sm mb-2 flex items-center gap-1\">\n                             <Zap size={16} className=\"text-purple-400\"/>\n                             Rune Capacity: <span className=\"font-mono text-purple-300\">{currentUser.rune_capacity}</span> units\n                         </p>\n                    )}\n                    {/* TODO: Add Edit Profile button */}\n                </div>\n\n                {/* API Keys Section */}\n                <div className=\"p-4 bg-neutral-700/50 rounded-lg\">\n                    <h3 className=\"text-xl font-semibold text-blue-300 mb-3 flex items-center gap-2\\\"><Key size={20}/> API Keys</h3>\n                    <p className=\"text-neutral-300 text-sm mb-4\">Manage your API keys for external service integrations. These are stored securely.</p>\n                    {!isEditingApiKeys ? (\n                        <>\n                            <div className=\"bg-neutral-800 p-3 rounded-md text-neutral-200 text-xs font-mono overflow-x-auto max-h-48 scrollbar-thin scrollbar-thumb-neutral-600\">\n                                <pre>{JSON.stringify(apiKeys, null, 2)}</pre>\n                            </div>\n                            <button\n                                className=\"mt-4 px-6 py-2 bg-yellow-600 text-white font-semibold rounded-md hover:bg-yellow-700 transition\"\n                                onClick={() => setIsEditingApiKeys(true)}\n                            >\n                                <Edit size={18} className=\"inline-block mr-2\"/> Edit API Keys\n                            </button>\n                        </>\n                    ) : (\n                        <form onSubmit={handleSaveApiKeys}>\n                            <div className=\"mb-4\">\n                                <label htmlFor=\"apiKeysJson\" className=\"block text-neutral-300 text-sm font-semibold mb-2\">API Keys (JSON):</label>\n                                <textarea\n                                    id=\"apiKeysJson\"\n                                    className=\"w-full p-2 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-xs\"\n                                    value={JSON.stringify(apiKeys, null, 2)}\n                                    onChange={(e) => {\n                                        try {\n                                            setApiKeys(JSON.parse(e.target.value));\n                                            setError(null); // Clear error if JSON is valid\n                                        } catch (err: any) {\n                                            setError(`Invalid JSON: ${err.message}`);\n                                        }\n                                    }}\n                                    rows={10}\n                                    disabled={isSavingApiKeys}\n                                    required\n                                />\n                            </div>\n                            {error && <p className=\"text-red-400 text-sm mb-4\">Error: {error}</p>}\n                            <div className=\"flex gap-4\">\n                                <button\n                                    type=\"submit\"\n                                    className=\"px-6 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                    disabled={isSavingApiKeys || !!error} // Disable if saving or JSON is invalid\n                                >\n                                    {isSavingApiKeys ? 'Saving...' : 'Save Changes'}\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    onClick={() => { setIsEditingApiKeys(false); setError(null); fetchSettings(); }} // Cancel and refetch original settings\n                                    className=\"px-6 py-2 bg-neutral-600 text-white font-semibold rounded-md hover:bg-neutral-700 transition\"\n                                    disabled={isSavingApiKeys}\n                                >\n                                    Cancel\n                                </button>\n                            </div>\n                        </form>\n                    )}\n                </div>\n\n                {/* Sync Configuration Section */}\n                <div className=\"p-4 bg-neutral-700/50 rounded-lg\">\n                    <h3 className=\"text-xl font-semibold text-blue-300 mb-3 flex items-center gap-2\\\"><Cloud size={20}/> Sync Configuration</h3>\n                    <p className=\"text-neutral-300 text-sm mb-4\">Configure how your data synchronizes across devices and platforms.</p>\n                     {!isEditingSyncConfig ? (\n                        <>\n                            <div className=\"bg-neutral-800 p-3 rounded-md text-neutral-200 text-xs font-mono overflow-x-auto max-h-48 scrollbar-thin scrollbar-thumb-neutral-600\">\n                                <pre>{JSON.stringify(syncConfig || {}, null, 2)}</pre>\n                            </div>\n                            <button\n                                className=\"mt-4 px-6 py-2 bg-yellow-600 text-white font-semibold rounded-md hover:bg-yellow-700 transition\"\n                                onClick={() => setIsEditingSyncConfig(true)}\n                            >\n                                <Edit size={18} className=\"inline-block mr-2\"/> Edit Sync Config\n                            </button>\n                        </>\n                    ) : (\n                         <form onSubmit={handleSaveSyncConfig}>\n                            <div className=\"mb-4\">\n                                <label htmlFor=\"syncConfigJson\" className=\"block text-neutral-300 text-sm font-semibold mb-2\">Sync Configuration (JSON):</label>\n                                <textarea\n                                    id=\"syncConfigJson\"\n                                    className=\"w-full p-2 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-xs\"\n                                    value={JSON.stringify(syncConfig || {}, null, 2)}\n                                    onChange={(e) => {\n                                        try {\n                                            setSyncConfig(JSON.parse(e.target.value));\n                                            setSyncConfigError(null); // Clear error if JSON is valid\n                                        } catch (err: any) {\n                                            setSyncConfigError(`Invalid JSON: ${err.message}`);\n                                        }\n                                    }}\n                                    rows={10}\n                                    disabled={isSavingSyncConfig}\n                                    required\n                                />\n                            </div>\n                            {syncConfigError && <p className=\"text-red-400 text-sm mb-4\">Error: {syncConfigError}</p>}\n                            <div className=\"flex gap-4\">\n                                <button\n                                    type=\"submit\"\n                                    className=\"px-6 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                    disabled={isSavingSyncConfig || !!syncConfigError} // Disable if saving or JSON is invalid\n                                >\n                                    {isSavingSyncConfig ? 'Saving...' : 'Save Changes'}\n                                </button>\n                                <button\n                                    type=\"button\"\n                                    onClick={() => { setIsEditingSyncConfig(false); setSyncConfigError(null); fetchSettings(); }} // Cancel and refetch original settings\n                                    className=\"px-6 py-2 bg-neutral-600 text-white font-semibold rounded-md hover:bg-neutral-700 transition\"\n                                    disabled={isSavingSyncConfig}\n                                >\n                                    Cancel\n                                </button>\n                            </div>\n                        </form>\n                    )}\n                </div>\n\n                {/* Integrations Section */}\n                <div className=\"p-4 bg-neutral-700/50 rounded-lg\">\n                    <h3 className=\"text-xl font-semibold text-blue-300 mb-3 flex items-center gap-2\\\"><LinkIcon size={20}/> Integrations</h3>\n                    <p className=\"text-neutral-300 text-sm mb-4\">Link your Jun.Ai.Key account with external services.</p>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {/* Example Integrations (Simulated) */}\n                        {['github', 'google', 'boostspace', 'capacities', 'aitableai', 'straico', 'taskade', 'mymemoai', 'bindai', 'notex', 'iifrspace', 'chatx', 'pollinations', 'workingcopy'].map(integrationId => {\n                            const status = linkedIntegrations[integrationId]?.status || 'unlinked';\n                            const details = linkedIntegrations[integrationId]?.details;\n                            const isLinking = isLinkingIntegration === integrationId;\n                            const isUnlinking = isUnlinkingIntegration === integrationId;\n\n                            return (\n                                <div key={integrationId} className={`p-3 rounded-md border-l-4 ${status === 'linked' ? 'border-green-500' : status === 'error' ? 'border-red-500' : 'border-neutral-500'} bg-neutral-600/50 flex justify-between items-center`}>\n                                    <div>\n                                        <p className=\"text-neutral-300 text-sm font-semibold\">{integrationId.charAt(0).toUpperCase() + integrationId.slice(1)}</p>\n                                        <p className={`text-xs ${status === 'linked' ? 'text-green-400' : status === 'error' ? 'text-red-400' : 'text-neutral-400'}`}>Status: {status.toUpperCase()}</p>\n                                        {status === 'error' && details?.error && <p className=\"text-red-400 text-xs\">Error: {details.error}</p>}\n                                    </div>\n                                    <div>\n                                        {status === 'unlinked' || status === 'error' ? (\n                                            <button\n                                                className=\"px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                                onClick={() => handleLinkIntegration(integrationId)}\n                                                disabled={isLinking || isUnlinking}\n                                            >\n                                                {isLinking ? <Loader2 size={16} className=\"inline-block mr-1 animate-spin\"/> : <LinkIcon size={16} className=\"inline-block mr-1\"/>)}\n                                                {isLinking ? 'Linking...' : 'Link'}\n                                            </button>\n                                        ) : (\n                                            <button\n                                                className=\"px-3 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                                onClick={() => handleUnlinkIntegration(integrationId)}\n                                                disabled={isLinking || isUnlinking}\n                                            >\n                                                {isUnlinking ? <Loader2 size={16} className=\"inline-block mr-1 animate-spin\"/> : <Unlink size={16} className=\"inline-block mr-1\"/>)}\n                                                {isUnlinking ? 'Unlinking...' : 'Unlink'}\n                                            </button>\n                                        )}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                     {integrationError && <p className=\"text-red-400 text-sm mt-4\">Error: {integrationError}</p>}\n                </div>\n\n                {/* Notification Settings Section (Placeholder) */}\n                <div className=\"p-4 bg-neutral-700/50 rounded-lg\">\n                    <h3 className=\"text-xl font-semibold text-blue-300 mb-3 flex items-center gap-2\\\"><Bell size={20}/> Notification Settings</h3>\n                    <p className=\"text-neutral-400 text-sm\">Notification settings UI coming soon...</p>\n                    {/* TODO: Add UI for managing notification channels and types */}\n                </div>\n\n                {/* New: Codex Restricted Zone (Secure Storage) */}\n                <div className=\"p-4 bg-blue-800/30 rounded-lg border border-blue-600\">\n                    <h3 className=\"text-xl font-semibold text-blue-300 mb-3 flex items-center gap-2\\\"><Shield size={20}/> Codex Restricted Zone (\\u8056\\u5178\\u7981\\u5340)</h3>\n                    <p className=\"text-blue-200 text-sm mb-4\">Manage sensitive data stored securely.</p>\n\n                    {/* List of Stored Sensitive Data Keys */}\n                    <div className=\"mb-4\">\n                        <h4 className=\"text-blue-200 text-lg font-semibold mb-2\">Stored Sensitive Data Keys</h4>\n                        {sensitiveDataKeys.length === 0 ? (\n                            <p className=\"text-neutral-400 text-sm\">No sensitive data keys stored yet.</p>\n                        ) : (\n                            <ul className=\"space-y-2\">\n                                {sensitiveDataKeys.map(key => (\n                                    <li key={key} className=\"bg-neutral-600/50 p-2 rounded-md flex justify-between items-center\">\n                                        <span className=\"text-neutral-300 text-sm font-mono\">{key}</span>\n                                        <button\n                                            className=\"px-3 py-1 text-xs bg-red-600 text-white rounded hover:bg-red-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                            onClick={() => handleDeleteSensitiveData(key)}\n                                            disabled={isSavingSensitiveData} // Disable while saving/deleting any data\n                                        >\n                                            <Trash2 size={14} className=\"inline-block mr-1\"/> Delete\n                                        </button>\n                                    </li>\n                                ))}\n                            </ul>\n                        )}\n                    </div>\n\n                    {/* Form to Add New Sensitive Data */}\n                    {!isAddingSensitiveData ? (\n                         <button\n                             className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition disabled:opacity-50\"\n                             onClick={() => { setIsAddingSensitiveData(true); setSensitiveDataError(null); }}\n                             disabled={isSavingSensitiveData}\n                         >\n                             <PlusCircle size={20} className=\"inline-block mr-2\"/> Add Sensitive Data\n                         </button>\n                    ) : (\n                         <form onSubmit={handleAddSensitiveData} className=\"mt-4 p-3 bg-neutral-600/50 rounded-md\">\n                             <h4 className=\"text-neutral-300 text-sm font-semibold mb-2\">Add New Sensitive Data</h4>\n                             <div className=\"mb-2\">\n                                 <label htmlFor=\"newSensitiveDataKey\" className=\"block text-neutral-400 text-xs font-semibold mb-1\">Key:</label>\n                                 <input\n                                     id=\"newSensitiveDataKey\"\n                                     type=\"text\"\n                                     className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 text-sm\"\n                                     value={newSensitiveDataKey}\n                                     onChange={(e) => setNewSensitiveDataKey(e.target.value)}\n                                     placeholder=\"Enter a unique key (e.g., my_api_secret)\"\n                                     disabled={isSavingSensitiveData}\n                                     required\n                                 />\n                             </div>\n                              <div className=\"mb-2\">\n                                 <label htmlFor=\"newSensitiveDataValue\" className=\"block text-neutral-400 text-xs font-semibold mb-1\">Value:</label>\n                                  <textarea\n                                     id=\"newSensitiveDataValue\"\n                                     className=\"w-full p-1 rounded-md bg-neutral-800 text-white border border-neutral-600 focus:outline-none focus:ring-1 focus:ring-blue-500 font-mono text-xs\"\n                                     value={newSensitiveDataValue}\n                                     onChange={(e) => setNewSensitiveDataValue(e.target.value)}\n                                     placeholder=\"Enter the sensitive data (e.g., API key, password, JSON config)\"\n                                     rows={4}\n                                     disabled={isSavingSensitiveData}\n                                  />\n                             </div>\n                             {sensitiveDataError && <p className=\"text-red-400 text-sm mb-4\">Error: {sensitiveDataError}</p>}\n                             <div className=\"flex gap-4\">\n                                 <button\n                                     type=\"submit\"\n                                     className=\"px-6 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                     disabled={isSavingSensitiveData || !newSensitiveDataKey.trim() || newSensitiveDataValue === ''}\n                                 >\n                                     {isSavingSensitiveData ? 'Storing...' : 'Store Data'}\n                                 </button>\n                                  <button\n                                     type=\"button\"\n                                     onClick={() => { setIsAddingSensitiveData(false); setNewSensitiveDataKey(''); setNewSensitiveDataValue(''); setSensitiveDataError(null); }}\n                                     className=\"px-6 py-2 bg-neutral-600 text-white font-semibold rounded-md hover:bg-neutral-700 transition\"\n                                     disabled={isSavingSensitiveData}\n                                 >\n                                     Cancel\n                                 </button>\n                             </div>\n                         </form>\n                    )}\n\n                </div>\n                {/* End New */}\n\n                {/* Backup & Restore Section */}\n                <div className=\"p-4 bg-blue-800/30 rounded-lg border border-blue-600 mt-8\"> {/* Added mt-8 for spacing */}\n                    <h3 className=\"text-xl font-semibold text-blue-300 mb-3 flex items-center gap-2\\\"><DatabaseBackup size={20}/> Codex Backup (\\u8056\\u5178\\u5099\\u4efd)</h3> {/* Added title */}\n                    <p className=\"text-blue-200 text-sm mb-4\">Manage backups of your Jun.Ai.Key data.</p>\n\n                    {/* Codex Backup Button */}\n                    <div className=\"mb-4\">\n                        <h4 className=\"text-blue-200 text-lg font-semibold mb-2\">Backup All My Data</h4>\n                        <p className=\"text-blue-100 text-sm mb-4\">This will create a backup of all your data (Knowledge Base, Tasks, Goals, etc.).</p>\n                        <button\n                            className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                            onClick={handleCodexBackup}\n                            disabled={isBackingUp}\n                        >\n                            {isBackingUp ? <Loader2 size={18} className=\"inline-block mr-2 animate-spin\"/> : <DatabaseBackup size={18} className=\"inline-block mr-2\"/>)}\n                            {isBackingUp ? 'Backing Up...' : 'Backup All Data Now'}\n                        </button>\n                         {backupError && <p className=\"text-red-400 text-sm mt-4\">Error: {backupError}</p>}\n                    </div>\n\n                    {/* TODO: Add Restore from Backup button */}\n                </div>\n\n                {/* New: Codex Guardian (Data Integrity Check) */}\n                <div className=\"p-4 bg-yellow-800/30 rounded-lg border border-yellow-600 mt-8\"> {/* Added mt-8 for spacing */}\n                    <h3 className=\"text-xl font-semibold text-yellow-300 mb-3 flex items-center gap-2\\\"><Shield size={20}/> Codex Guardian (\\u8056\\u5178\\u5b88\\u885b)</h3>\n                    <p className=\"text-yellow-200 text-sm mb-4\">Check the integrity of your core data.</p>\n\n                    {/* Data Integrity Check Button */}\n                    <div className=\"mb-4\">\n                        <h4 className=\"text-yellow-200 text-lg font-semibold mb-2\">Run Integrity Check</h4>\n                        <p className=\"text-yellow-100 text-sm mb-4\">This will perform checks on your data to identify potential inconsistencies or issues.</p>\n                        <button\n                            className=\"px-6 py-2 bg-yellow-600 text-white font-semibold rounded-md hover:bg-yellow-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                            onClick={handleCheckIntegrity}\n                            disabled={isCheckingIntegrity}\n                        >\n                            {isCheckingIntegrity ? <Loader2 size={18} className=\"inline-block mr-2 animate-spin\"/> : <Shield size={18} className=\"inline-block mr-2\"/>)}\n                            {isCheckingIntegrity ? 'Checking Integrity...' : 'Run Integrity Check'}\n                        </button>\n                         {integrityCheckError && !isCheckingIntegrity && ( // Show error only after it finishes\n                             <p className=\"text-red-400 text-sm mt-4\">Error: {integrityCheckError}</p>\n                         )}\n                    </div>\n\n                    {/* Integrity Check Result Modal */}\n                    {showIntegrityResultModal && integrityCheckResult && (\n                         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\">\n                             <div className=\"bg-neutral-800 p-8 rounded-lg shadow-xl w-full max-w-md\">\n                                 <div className=\"flex justify-between items-center mb-4\">\n                                     <h3 className=\"text-xl font-semibold text-blue-300\">Integrity Check Result</h3>\n                                     <button\n                                         type=\"button\"\n                                         onClick={() => setShowIntegrityResultModal(false)}\n                                         className=\"text-neutral-400 hover:text-white transition\"\n                                     >\n                                         <XCircle size={24} />\n                                     </button>\n                                 </div>\n                                 <div className=\"space-y-4 text-neutral-300 text-sm\">\n                                     <p className={`font-semibold ${integrityCheckResult.status === 'success' ? 'text-green-400' : integrityCheckResult.status === 'warning' ? 'text-yellow-400' : 'text-red-400'}`}>Status: {integrityCheckResult.status.toUpperCase()}</p>\n                                     <p>{integrityCheckResult.message}</p>\n                                     {integrityCheckResult.counts && (\n                                         <div>\n                                             <h4 className=\"font-semibold mb-1\">Counts:</h4>\n                                             <pre className=\"bg-neutral-900 p-2 rounded-md text-neutral-200 text-xs font-mono overflow-x-auto max-h-24 scrollbar-thin scrollbar-thumb-neutral-700\">\n                                                 {JSON.stringify(integrityCheckResult.counts, null, 2)}\n                                             </pre>\n                                         </div>\n                                     )}\n                                      {integrityCheckResult.issues && integrityCheckResult.issues.length > 0 && (\n                                         <div>\n                                             <h4 className=\"font-semibold mb-1 text-red-400\">Issues Found:</h4>\n                                             <ul className=\"space-y-1 text-xs text-red-300 max-h-24 overflow-y-auto scrollbar-thin scrollbar-thumb-neutral-700\">\n                                                 {integrityCheckResult.issues.map((issue: any, index: number) => (\n                                                     <li key={index}>- [{issue.type}] {issue.message}</li>\n                                                 ))}\n                                             </ul>\n                                         </div>\n                                      )}\n                                 </div>\n                                 <div className=\"flex justify-end mt-6\">\n                                     <button\n                                         type=\"button\"\n                                         onClick={() => setShowIntegrityResultModal(false)}\n                                         className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition\"\n                                     >\n                                         Close\n                                     </button>\n                                 </div>\n                             </div>\n                         </div>\n                    )}\n                </div>\n                {/* End New */}\n\n                {/* New: Defense Aura (Security Monitoring) */}\n                <div className=\"p-4 bg-teal-800/30 rounded-lg border border-teal-600 mt-8\"> {/* Added mt-8 for spacing */}\n                    <h3 className=\"text-xl font-semibold text-teal-300 mb-3 flex items-center gap-2\\\"><MonitorDot size={20}/> Defense Aura (\\u9632\\u79a6\\u5149\\u5708)</h3>\n                    <p className=\"text-teal-200 text-sm mb-4\">Trigger a manual security monitoring scan for potential issues.</p>\n\n                    {/* Security Monitoring Scan Button */}\n                    <div className=\"mb-4\">\n                        <h4 className=\"text-teal-200 text-lg font-semibold mb-2\">Run Security Scan</h4>\n                        <p className=\"text-teal-100 text-sm mb-4\">This will analyze recent system events and user actions for suspicious patterns.</p>\n                        <button\n                            className=\"px-6 py-2 bg-teal-600 text-white font-semibold rounded-md hover:bg-teal-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                            onClick={handleMonitorSecurityEvents}\n                            disabled={isMonitoring}\n                        >\n                            {isMonitoring ? <Loader2 size={18} className=\"inline-block mr-2 animate-spin\"/> : <MonitorDot size={18} className=\"inline-block mr-2\"/>)}\n                            {isMonitoring ? 'Running Scan...' : 'Run Security Scan'}\n                        </button>\n                         {securityScanError && !isMonitoring && ( // Show error only after it finishes\n                             <p className=\"text-red-400 text-sm mt-4\">Error: {securityScanError}</p>\n                         )}\n                    </div>\n\n                    {/* Security Scan Result Modal */}\n                    {showSecurityResultModal && securityScanResult && (\n                         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\">\n                             <div className=\"bg-neutral-800 p-8 rounded-lg shadow-xl w-full max-w-md\">\n                                 <div className=\"flex justify-between items-center mb-4\">\n                                     <h3 className=\"text-xl font-semibold text-blue-300\">Security Scan Result</h3>\n                                     <button\n                                         type=\"button\"\n                                         onClick={() => setShowSecurityResultModal(false)}\n                                         className=\"text-neutral-400 hover:text-white transition\"\n                                     >\n                                         <XCircle size={24} />\n                                     </button>\n                                 </div>\n                                 <div className=\"space-y-4 text-neutral-300 text-sm\">\n                                     <p className={`font-semibold ${securityScanResult.status === 'success' ? 'text-green-400' : securityScanResult.status === 'warning' ? 'text-yellow-400' : 'text-red-400'}`}>Status: {securityScanResult.status.toUpperCase()}</p>\n                                     <p>{securityScanResult.message}</p>\n                                      {securityScanResult.issues && securityScanResult.issues.length > 0 && (\n                                         <div>\n                                             <h4 className=\"font-semibold mb-1 text-red-400\">Issues Found:</h4>\n                                             <ul className=\"space-y-1 text-xs text-red-300 max-h-24 overflow-y-auto scrollbar-thin scrollbar-thumb-neutral-700\">\n                                                 {securityScanResult.issues.map((issue: any, index: number) => (\n                                                     <li key={index}>- [{issue.type}] {issue.message}</li>\n                                                 ))}\n                                             </ul>\n                                         </div>\n                                      )}\n                                 </div>\n                                 <div className=\"flex justify-end mt-6\">\n                                     <button\n                                         type=\"button\"\n                                         onClick={() => setShowSecurityResultModal(false)}\n                                         className=\"px-6 py-2 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 transition\"\n                                     >\n                                         Close\n                                     </button>\n                                 </div>\n                             </div>\n                         </div>\n                    )}\n                </div>\n                {/* End New */}\n\n                {/* Danger Zone Section */}\n                <div className=\"p-4 bg-red-800/30 rounded-lg border border-red-600 mt-8\"> {/* Added mt-8 for spacing */}\n                    <h3 className=\"text-xl font-semibold text-red-300 mb-3 flex items-center gap-2\\\"><AlertTriangle size={20}/> Danger Zone</h3>\n                    <p className=\"text-red-200 text-sm mb-4\">These actions are irreversible and should be used with extreme caution.</p>\n\n                    {/* User Data Reset Button */}\n                    <div className=\"mb-4\">\n                        <h4 className=\"text-red-200 text-lg font-semibold mb-2\">Reset All My Data</h4>\n                        <p className=\"text-red-100 text-sm mb-4\">This will delete all your personal data stored in Jun.Ai.Key, including Knowledge Base records, Tasks, Goals, Insights, user-owned Runes, Agentic Flows, Glossary terms, and User Actions.</p>\n                        <button\n                            className=\"px-6 py-2 bg-red-600 text-white font-semibold rounded-md hover:bg-red-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                            onClick={handleResetUserData}\n                            disabled={isResettingData}\n                        >\n                            {isResettingData ? <Loader2 size={18} className=\"inline-block mr-2 animate-spin\"/> : <Trash2 size={18} className=\"inline-block mr-2\"/>)}\n                            {isResettingData ? 'Resetting Data...' : 'Reset All My Data'}\n                        </button>\n                         {resetError && <p className=\"text-red-400 text-sm mt-4\">Error: {resetError}</p>}\n                    </div>\n                    {/* End New */}\n\n                    {/* TODO: Add other dangerous actions like Delete Account */}\n                </div>\n\n                {/* New: Note about local filesystem and iCloud */}\n                <div className=\"p-4 bg-neutral-700/50 rounded-lg mt-8\"> {/* Added mt-8 for spacing */}\n                    <h3 className=\"text-xl font-semibold text-blue-300 mb-3 flex items-center gap-2\\\"><Info size={20}/> Local Filesystem & iCloud</h3>\n                    <p className=\"text-neutral-300 text-sm mb-4\">Jun.Ai.Key currently uses a simulated filesystem within your browser's environment (WebContainer). Files and repositories managed here are stored locally in your browser's temporary storage and are NOT automatically synced to your device's native filesystem or iCloud Drive.</p>\n                    <p className=\"text-neutral-300 text-sm\">Direct integration with iCloud or native filesystems requires a dedicated native application (iOS/macOS). The Working Copy integration simulates interaction with a native Git client, but does not provide direct filesystem access from this web interface.</p>\n                </div>\n                {/* End New */}\n\n            </div>\n        )}\n\n        {/* New: Working Copy Key Modal */}\n        {showWorkingCopyModal && (\n             <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50\">\n                 <div className=\"bg-neutral-800 p-8 rounded-lg shadow-xl w-full max-w-md\">\n                     <div className=\"flex justify-between items-center mb-4\">\n                         <h3 className=\"text-xl font-semibold text-blue-300\">Link Working Copy</h3>\n                         <button\n                             type=\"button\"\n                             onClick={() => { setShowWorkingCopyModal(false); setWorkingCopyKey(''); setWorkingCopyKeyError(null); setIsLinkingIntegration(null); }} // Close modal and reset state\n                             className=\"text-neutral-400 hover:text-white transition\"\n                             disabled={isSavingWorkingCopyKey}\n                         >\n                             <XCircle size={24} />\n                         </button>\n                     </div>\n                     <p className=\"text-neutral-300 text-sm mb-4\">Please enter your Working Copy x-callback-url Key. This key is stored securely.</p>\n                     <form onSubmit={handleSaveWorkingCopyKey}>\n                         <div className=\"mb-4\">\n                             <label htmlFor=\"workingCopyKey\" className=\"block text-neutral-300 text-sm font-semibold mb-2\">Working Copy Key:</label>\n                             <input\n                                 id=\"workingCopyKey\"\n                                 type=\"text\"\n                                 className=\"w-full p-2 rounded-md bg-neutral-900 text-white border border-neutral-700 focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-xs\"\n                                 value={workingCopyKey}\n                                 onChange={(e) => setWorkingCopyKey(e.target.value)}\n                                 placeholder=\"Enter your Working Copy Key\"\n                                 disabled={isSavingWorkingCopyKey}\n                                 required\n                             />\n                         </div>\n                         {workingCopyKeyError && (\n                             <p className=\"text-red-400 text-sm mb-4\">Error: {workingCopyKeyError}</p>\n                         )}\n                         <div className=\"flex gap-4 justify-end\">\n                             <button\n                                 type=\"button\"\n                                 onClick={() => { setShowWorkingCopyModal(false); setWorkingCopyKey(''); setWorkingCopyKeyError(null); setIsLinkingIntegration(null); }} // Close modal and reset state\n                                 className=\"px-6 py-2 bg-neutral-600 text-white font-semibold rounded-md hover:bg-neutral-700 transition\"\n                                 disabled={isSavingWorkingCopyKey}\n                             >\n                                 Cancel\n                             </button>\n                             <button\n                                 type=\"submit\"\n                                 className=\"px-6 py-2 bg-green-600 text-white font-semibold rounded-md hover:bg-green-700 transition disabled:opacity-50 disabled:cursor-not-allowed\"\n                                 disabled={isSavingWorkingCopyKey || !workingCopyKey.trim()}\n                             >\n                                 {isSavingWorkingCopyKey ? 'Storing...' : 'Store Key & Link'}\n                             </button>\n                         </div>\n                     </form>\n                 </div>\n             </div>\n        )}\n        {/* End New */}\n\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;\n```;
