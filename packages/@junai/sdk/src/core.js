var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// packages/@junai/sdk/src/core.ts\n// Example Core Module Client for SDK\n// This file is a placeholder demonstrating how SDK clients for core modules might be structured.\n\nimport { ApiProxy } from './apiProxy';\n// Import interfaces for data types managed by this core module\n\nexport class CoreClient {\n  private apiProxy: ApiProxy;\n\n  constructor(apiProxy: ApiProxy) {\n    this.apiProxy = apiProxy;\n  }\n\n  // Add methods for interacting with the core module's functionality\n  // These methods would call the API Gateway or Supabase directly via apiProxy\n\n  /**\n   * Example method: Get system status.\n   * Assumes your API Gateway has an endpoint like GET /api/v1/status\n   * that delegates to a system status service.\n   * @returns Promise<any> The system status.\n   */\n  async getSystemStatus(): Promise<any> {\n    if (this.apiProxy.getApiEndpoint()) {\n        const result = await this.apiProxy.callApi('/api/v1/status', 'GET');\n        return result;\n    } else {\n        // Fallback is not possible for all API calls.\n        // For MVP, just simulate or throw error if API is required.\n        console.warn('SDK: Custom API endpoint not configured. Simulating getSystemStatus.');\n        await new Promise(resolve => setTimeout(resolve, 200));\n        return { status: 'simulated_idle', message: 'Simulated system is idle.' };\n    }\n  }\n\n  // Add other core module methods (e.g., triggerEvolutionCycle, getAuditLogs)\n}\n"], ["typescript\n// packages/@junai/sdk/src/core.ts\n// Example Core Module Client for SDK\n// This file is a placeholder demonstrating how SDK clients for core modules might be structured.\n\nimport { ApiProxy } from './apiProxy';\n// Import interfaces for data types managed by this core module\n\nexport class CoreClient {\n  private apiProxy: ApiProxy;\n\n  constructor(apiProxy: ApiProxy) {\n    this.apiProxy = apiProxy;\n  }\n\n  // Add methods for interacting with the core module's functionality\n  // These methods would call the API Gateway or Supabase directly via apiProxy\n\n  /**\n   * Example method: Get system status.\n   * Assumes your API Gateway has an endpoint like GET /api/v1/status\n   * that delegates to a system status service.\n   * @returns Promise<any> The system status.\n   */\n  async getSystemStatus(): Promise<any> {\n    if (this.apiProxy.getApiEndpoint()) {\n        const result = await this.apiProxy.callApi('/api/v1/status', 'GET');\n        return result;\n    } else {\n        // Fallback is not possible for all API calls.\n        // For MVP, just simulate or throw error if API is required.\n        console.warn('SDK: Custom API endpoint not configured. Simulating getSystemStatus.');\n        await new Promise(resolve => setTimeout(resolve, 200));\n        return { status: 'simulated_idle', message: 'Simulated system is idle.' };\n    }\n  }\n\n  // Add other core module methods (e.g., triggerEvolutionCycle, getAuditLogs)\n}\n"]))(__makeTemplateObject([""], [""]));
