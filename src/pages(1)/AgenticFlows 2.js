var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
""(__makeTemplateObject(["typescript\n// src/pages/AgenticFlows.tsx\n// Agentic Flows Page (\u81EA\u6211\u4EA4\u4ED8)\n// Displays and manages user-defined Agentic Flows (Dynamic DAG Workflows).\n// --- New: Create a page for Agentic Flows UI ---// --- New: Implement fetching and listing Agentic Flows ---// --- New: Add placeholder UI for actions (view, run, edit, delete) ---// --- New: Add Realtime Updates for Agentic Flows ---// --- Modified: Add Edit Button linking to Editor page ---// --- New: Implement Create New Flow UI (Modal Form) ---// --- Modified: Implement Delete Button functionality ---// --- Modified: Implement Start, Pause, Resume, Cancel button handlers ---// --- New: Add placeholder UI for \"Deep Thinking\" modes/templates ---\nimport React, { useEffect, useState, useCallback } from 'react'; // Import useCallback\nimport { SelfNavigationEngine } from '../core/self-navigation/SelfNavigationEngine';\nimport { AuthorityForgingEngine } from '../core/authority/AuthorityForgingEngine'; // Use for action recording\nimport { AgenticFlow, AgenticFlowNode, AgenticFlowEdge, AgenticFlowExecution } from '../interfaces'; // Import AgenticFlow type\nimport { Workflow, ChevronDown, ChevronUp, Trash2, Edit, PlusCircle, Play, Loader2, Info, XCircle, Save, Pause, RotateCcw, Lightbulb } from 'lucide-react'; // Import icons including Pause, RotateCcw, Lightbulb\nimport { Link, useNavigate } from 'react-router-dom'; // Import Link and useNavigate for navigation\n\n\n// Access core modules from the global window object (for MVP simplicity)\n// In a real app, use React Context or dependency injection\ndeclare const window: any;\nconst selfNavigationEngine: SelfNavigationEngine = window.systemContext?.selfNavigationEngine; // The Self-Navigation (\u81EA\u6211\u5C0E\u822A) pillar\nconst authorityForgingEngine: any = window.systemContext?.authorityForgingEngine; // Use any for action recording (\u6B0A\u80FD\u935B\u9020)\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\n\n\nconst AgenticFlows: React.FC = () => {\n  const navigate = useNavigate(); // Hook for navigation\n\n  const [flows, setFlows] = useState<AgenticFlow[]>([]); // State to hold Agentic Flows\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [expandedFlows, setExpandedFlows] = useState<Record<string, boolean>>({}); // State to track expanded flows\n\n  // --- New: State for creating new flow ---\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [newFlowName, setNewFlowName] = useState('');\n  const [newFlowDescription, setNewFlowDescription] = useState('');\n  const [isCreatingFlow, setIsCreatingFlow] = useState(false);\n  const [createError, setCreateError] = useState<string | null>(null); // Error specific to creation\n  // --- End New ---\n\n  // --- New: State for triggering actions ---\n  const [isStarting, setIsStarting] = useState<string | null>(null); // Track which flow is starting\n  const [isPausing, setIsPausing] = useState<string | null>(null); // Track which flow is pausing\n  const [isResuming, setIsResuming] = useState<string | null>(null); // Track which flow is resuming\n  const [isCancelling, setIsCancelling] = useState<string | null>(null); // Track which flow is cancelling\n  const [isDeleting, setIsDeleting] = useState<string | null>(null); // Track which flow is being deleted\n  // --- End New ---\n\n\n  const fetchFlows = async () => {\n       const userId = systemContext?.currentUser?.id;\n       if (!selfNavigationEngine || !userId) {\n            setError(\"SelfNavigationEngine module not initialized or user not logged in.\");\n            setLoading(false);\n            return;\n        }\n      setLoading(true);\n      setError(null); // Clear main error when fetching\n      try {\n          // Fetch Agentic Flows for the current user from SelfNavigationEngine (Part of \u81EA\u6211\u5C0E\u822A / \u96D9\u5410\u540C\u6B65\u9818\u57DF)\n          const userFlows = await selfNavigationEngine.getAgenticFlows(userId); // Pass user ID\n          setFlows(userFlows);\n      } catch (err: any) {\n          console.error('Error fetching Agentic Flows:', err);\n          setError("], ["typescript\n// src/pages/AgenticFlows.tsx\n// Agentic Flows Page (\\u81ea\\u6211\\u4ea4\\u4ed8)\n// Displays and manages user-defined Agentic Flows (Dynamic DAG Workflows).\n// --- New: Create a page for Agentic Flows UI ---\\\n// --- New: Implement fetching and listing Agentic Flows ---\\\n// --- New: Add placeholder UI for actions (view, run, edit, delete) ---\\\n// --- New: Add Realtime Updates for Agentic Flows ---\\\n// --- Modified: Add Edit Button linking to Editor page ---\\\n// --- New: Implement Create New Flow UI (Modal Form) ---\\\n// --- Modified: Implement Delete Button functionality ---\\\n// --- Modified: Implement Start, Pause, Resume, Cancel button handlers ---\\\n// --- New: Add placeholder UI for \"Deep Thinking\" modes/templates ---\\\n\\nimport React, { useEffect, useState, useCallback } from 'react'; // Import useCallback\\nimport { SelfNavigationEngine } from '../core/self-navigation/SelfNavigationEngine';\\nimport { AuthorityForgingEngine } from '../core/authority/AuthorityForgingEngine'; // Use for action recording\\nimport { AgenticFlow, AgenticFlowNode, AgenticFlowEdge, AgenticFlowExecution } from '../interfaces'; // Import AgenticFlow type\\nimport { Workflow, ChevronDown, ChevronUp, Trash2, Edit, PlusCircle, Play, Loader2, Info, XCircle, Save, Pause, RotateCcw, Lightbulb } from 'lucide-react'; // Import icons including Pause, RotateCcw, Lightbulb\\nimport { Link, useNavigate } from 'react-router-dom'; // Import Link and useNavigate for navigation\\n\\n\\n// Access core modules from the global window object (for MVP simplicity)\\n// In a real app, use React Context or dependency injection\\ndeclare const window: any;\\nconst selfNavigationEngine: SelfNavigationEngine = window.systemContext?.selfNavigationEngine; // The Self-Navigation (\\u81ea\\u6211\\u5c0e\\u822a) pillar\\nconst authorityForgingEngine: any = window.systemContext?.authorityForgingEngine; // Use any for action recording (\\u6b0a\\u80fd\\u935b\\u9020)\\nconst systemContext: any = window.systemContext; // Access the full context for currentUser\\n\\n\\nconst AgenticFlows: React.FC = () => {\\n  const navigate = useNavigate(); // Hook for navigation\\n\\n  const [flows, setFlows] = useState<AgenticFlow[]>([]); // State to hold Agentic Flows\\n  const [loading, setLoading] = useState(true);\\n  const [error, setError] = useState<string | null>(null);\\n  const [expandedFlows, setExpandedFlows] = useState<Record<string, boolean>>({}); // State to track expanded flows\\n\\n  // --- New: State for creating new flow ---\\n  const [showCreateModal, setShowCreateModal] = useState(false);\\n  const [newFlowName, setNewFlowName] = useState('');\\n  const [newFlowDescription, setNewFlowDescription] = useState('');\\n  const [isCreatingFlow, setIsCreatingFlow] = useState(false);\\n  const [createError, setCreateError] = useState<string | null>(null); // Error specific to creation\\n  // --- End New ---\\n\\n  // --- New: State for triggering actions ---\\n  const [isStarting, setIsStarting] = useState<string | null>(null); // Track which flow is starting\\n  const [isPausing, setIsPausing] = useState<string | null>(null); // Track which flow is pausing\\n  const [isResuming, setIsResuming] = useState<string | null>(null); // Track which flow is resuming\\n  const [isCancelling, setIsCancelling] = useState<string | null>(null); // Track which flow is cancelling\\n  const [isDeleting, setIsDeleting] = useState<string | null>(null); // Track which flow is being deleted\\n  // --- End New ---\\n\\n\\n  const fetchFlows = async () => {\\n       const userId = systemContext?.currentUser?.id;\\n       if (!selfNavigationEngine || !userId) {\\n            setError(\\\"SelfNavigationEngine module not initialized or user not logged in.\\\");\\n            setLoading(false);\\n            return;\\n        }\\n      setLoading(true);\\n      setError(null); // Clear main error when fetching\\n      try {\\n          // Fetch Agentic Flows for the current user from SelfNavigationEngine (Part of \\u81ea\\u6211\\u5c0e\\u822a / \\u96d9\\u5410\\u540c\\u6b65\\u9818\\u57df)\\n          const userFlows = await selfNavigationEngine.getAgenticFlows(userId); // Pass user ID\\n          setFlows(userFlows);\\n      } catch (err: any) {\\n          console.error('Error fetching Agentic Flows:', err);\\n          setError("]));
Failed;
to;
load;
Agentic;
Flows: $;
{
    err.message;
}
");\n      } finally {\n          setLoading(false);\n      }\n  };\n\n  useEffect(() => {\n    // Fetch data when the component mounts or when the user changes or flowId changes\n    if (systemContext?.currentUser?.id) {\n        fetchFlows(); // Fetch all flows on initial load\n    }\n\n    // --- New: Subscribe to realtime updates for agentic_flows, agentic_flow_nodes, agentic_flow_edges ---\n    // Note: SelfNavigationEngine subscribes to general agentic_flow, node, edge events and publishes them via EventBus.\n    // We need to listen to those events here and refetch if they are for the current flow.\n    let unsubscribeFlowInsert: (() => void) | undefined;\n    let unsubscribeFlowUpdate: (() => void) | undefined;\n    let unsubscribeFlowDelete: (() => void) | undefined;\n    let unsubscribeFlowNodeInsert: (() => void) | undefined;\n    let unsubscribeFlowNodeUpdate: (() => void) | undefined;\n    let unsubscribeFlowNodeDelete: (() => void) | undefined;\n    let unsubscribeFlowEdgeInsert: (() => void) | undefined;\n    let unsubscribeFlowEdgeUpdate: (() => void) | undefined;\n    let unsubscribeFlowEdgeDelete: (() => void) | undefined;\n\n    // --- New: Subscribe to flow execution status events ---\n    // These events are published by SelfNavigationEngine.executeAgenticFlow\n    let unsubscribeFlowStarted: (() => void) | undefined;\n    let unsubscribeFlowCompleted: (() => void) | undefined;\n    let unsubscribeFlowFailed: (() => void) | undefined;\n    let unsubscribeFlowPaused: (() => void) | undefined;\n    let unsubscribeFlowResumed: (() => void) | undefined;\n    let unsubscribeFlowCancelled: (() => void) | undefined;\n    // --- New: Subscribe to execution record updates ---\n    let unsubscribeExecutionInsert: (() => void) | undefined;\n    let unsubscribeExecutionUpdate: (() => void) | undefined;\n    let unsubscribeExecutionDelete: (() => void) | undefined;\n    // --- End New ---\n\n\n    if (selfNavigationEngine?.context?.eventBus) { // Check if SelfNavigationEngine and its EventBus are available\n        const eventBus = selfNavigationEngine.context.eventBus;\n        const userId = systemContext?.currentUser?.id;\n\n        // Subscribe to flow insert events\n        unsubscribeFlowInsert = eventBus.subscribe('agentic_flow_insert', (payload: AgenticFlow) => {\n            if (payload.user_id === userId) {\n                console.log('AgenticFlows page received agentic_flow_insert event:', payload);\n                // Add the new flow and keep sorted by creation timestamp (newest first)\n                setFlows(prevFlows => [payload, ...prevFlows].sort((a, b) => new Date(b.creation_timestamp).getTime() - new Date(a.creation_timestamp).getTime()));\n            }\n        });\n         // Subscribe to flow update events\n         unsubscribeFlowUpdate = eventBus.subscribe('agentic_flow_update', (payload: AgenticFlow) => {\n             if (payload.user_id === userId) {\n                 console.log('AgenticFlows page received agentic_flow_update event:', payload);\n                 // Update the specific flow in the state\n                 setFlows(prevFlows => prevFlows.map(flow => flow.id === payload.id ? payload : flow));\n             }\n         });\n          // Subscribe to flow delete events\n          unsubscribeFlowDelete = eventBus.subscribe('agentic_flow_delete', (payload: { flowId: string, userId: string }) => {\n             if (payload.userId === userId) {\n                 console.log('AgenticFlows page received agentic_flow_delete event:', payload);\n                 // Remove the deleted flow from the state\n                 setFlows(prevFlows => prevFlows.filter(flow => flow.id !== payload.flowId));\n             }\n         });\n\n        // Subscribe to node insert/update/delete events (refetch the flow to update nodes list)\n        unsubscribeFlowNodeInsert = eventBus.subscribe('agentic_flow_node_insert', (payload: any) => { // Payload includes flow_id\n             if (payload.user_id === userId) {\n                 console.log('AgenticFlows page received agentic_flow_node_insert event:', payload);\n                 fetchFlows(); // Refetch data to update nodes list\n             }\n         });\n         unsubscribeFlowNodeUpdate = eventBus.subscribe('agentic_flow_node_update', (payload: any) => { // Payload includes flow_id\n             if (payload.user_id === userId) {\n                 console.log('AgenticFlows page received agentic_flow_node_update event:', payload);\n                 fetchFlows(); // Refetch data to update node details\n             }\n         });\n          unsubscribeFlowNodeDelete = eventBus.subscribe('agentic_flow_node_delete', (payload: any) => { // Payload includes flow_id\n             if (payload.userId === userId) {\n                 console.log('AgenticFlows page received agentic_flow_node_delete event:', payload);\n                 fetchFlows(); // Refetch data to remove node\n             }\n         });\n\n        // Subscribe to edge insert/update/delete events (refetch the flow to update edges list)\n        unsubscribeFlowEdgeInsert = eventBus.subscribe('agentic_flow_edge_insert', (payload: any) => { // Payload includes flow_id\n             if (payload.user_id === userId) {\n                 console.log('AgenticFlows page received agentic_flow_edge_insert event:', payload);\n                 fetchFlows(); // Refetch data to include new edge\n             }\n         });\n         unsubscribeFlowEdgeUpdate = eventBus.subscribe('agentic_flow_edge_update', (payload: any) => { // Payload includes flow_id\n             if (payload.user_id === userId) {\n                 console.log('AgenticFlows page received agentic_flow_edge_update event:', payload);\n                 fetchFlows(); // Refetch data to update edge details\n             }\n         });\n          unsubscribeFlowEdgeDelete = eventBus.subscribe('agentic_flow_edge_delete', (payload: any) => { // Payload includes flow_id\n             if (payload.userId === userId) {\n                 console.log('AgenticFlows page received agentic_flow_edge_delete event:', payload);\n                 fetchFlows(); // Refetch data to remove edge\n             }\n         });\n\n        // --- New: Subscribe to flow execution status events ---\n        // These events are published by SelfNavigationEngine.executeAgenticFlow\n        // They trigger a refetch of the flow data to update the overall flow status displayed on the page\n        unsubscribeFlowStarted = eventBus.subscribe('agentic_flow_started', (payload: { flowId: string, userId: string, executionId: string }) => { // Added executionId\n             if (payload.flowId === flowId && payload.userId === userId) {\n                 console.log('AgenticFlows page received agentic_flow_started event:', payload);\n                 fetchFlows(); // Refetch to update overall status\n             }\n         });\n         unsubscribeFlowCompleted = eventBus.subscribe('agentic_flow_completed', (payload: { flowId: string, userId: string, executionId: string, lastNodeResult: any }) => { // Added executionId\n             if (payload.flowId === flowId && payload.userId === userId) {\n                 console.log('AgenticFlows page received agentic_flow_completed event:', payload);\n                 fetchFlows(); // Refetch to update overall status/timestamps/result\n             }\n         });\n          unsubscribeFlowFailed = eventBus.subscribe('agentic_flow_failed', (payload: { flowId: string, userId: string, executionId: string, error: string }) => { // Added executionId\n             if (payload.flowId === flowId && payload.userId === userId) {\n                 console.log('AgenticFlows page received agentic_flow_failed event:', payload);\n                 fetchFlows(); // Refetch to update overall status/timestamps/error\n             }\n         });\n          unsubscribeFlowPaused = eventBus.subscribe('agentic_flow_paused', (payload: { flowId: string, userId: string, executionId: string }) => { // Added executionId\n             if (payload.userId === userId) {\n                 console.log('AgenticFlows page received agentic_flow_paused event:', payload);\n                 fetchFlows(); // Refetch to update overall status\n             }\n         });\n          unsubscribeFlowResumed = eventBus.subscribe('agentic_flow_resumed', (payload: { flowId: string, userId: string, executionId: string }) => { // Added executionId\n             if (payload.userId === userId) {\n                 console.log('AgenticFlows page received agentic_flow_resumed event:', payload);\n                 fetchFlows(); // Refetch to update overall status\n             }\n         });\n          unsubscribeFlowCancelled = eventBus.subscribe('agentic_flow_cancelled', (payload: { flowId: string, userId: string, executionId: string }) => {\n             if (payload.userId === userId) {\n                 console.log('AgenticFlows page received agentic_flow_cancelled event:', payload);\n                 fetchFlows(); // Refetch to update overall status\n             }\n         });\n        // --- End New ---\n\n        // --- New: Subscribe to execution record updates ---\n        // Note: These events are primarily for the detail page, but could trigger a refetch here if needed\n        // to show execution counts or latest status summary on the list page.\n        // For MVP, let's skip refetching on these events on the list page to avoid excessive updates.\n        // unsubscribeExecutionInsert = eventBus.subscribe('agentic_flow_execution_insert', (payload: AgenticFlowExecution) => { ... });\n        // unsubscribeExecutionUpdate = eventBus.subscribe('agentic_flow_execution_update', (payload: AgenticFlowExecution) => { ... });\n        // unsubscribeExecutionDelete = eventBus.subscribe('agentic_flow_execution_delete', (payload: { executionId: string, flowId: string, userId: string }) => { ... });\n        // --- End New ---\n\n\n    }\n    // --- End New ---\n\n\n    return () => {\n        // Unsubscribe on component unmount\n        unsubscribeFlowInsert?.();\n        unsubscribeFlowUpdate?.();\n        unsubscribeFlowDelete?.();\n        unsubscribeFlowNodeInsert?.();\n        unsubscribeFlowNodeUpdate?.();\n        unsubscribeFlowNodeDelete?.();\n        unsubscribeFlowEdgeInsert?.();\n        unsubscribeFlowEdgeUpdate?.();\n        unsubscribeFlowEdgeDelete?.();\n        // --- New: Unsubscribe from flow execution status events ---\n        unsubscribeFlowStarted?.();\n        unsubscribeFlowCompleted?.();\n        unsubscribeFlowFailed?.();\n        unsubscribeFlowPaused?.();\n        unsubscribeFlowResumed?.();\n        unsubscribeFlowCancelled?.();\n        // --- End New ---\n    };\n\n  }, [systemContext?.currentUser?.id, selfNavigationEngine]); // Re-run effect when user ID or service changes\n\n\n\n    const toggleExpandFlow = (flowId: string) => {\n        setExpandedFlows(prevState => ({\n            ...prevState,\n            [flowId]: !prevState[flowId]\n        }));\n    };\n\n    const getFlowStatusColor = (status: AgenticFlow['status'] | AgenticFlowExecution['status']) => { // Added AgenticFlowExecution status\n        switch (status) {\n            case 'completed': return 'text-green-400';\n            case 'failed': return 'text-red-400';\n            case 'in-progress': return 'text-blue-400';\n            case 'paused': return 'text-yellow-400';\n            case 'cancelled': return 'text-neutral-400';\n            case 'idle': return 'text-neutral-300';\n            case 'pending': return 'text-neutral-300';\n            default: return 'text-neutral-300';\n        }\n    };\n\n    // --- New: Handle Create Flow ---\n    const handleCreateFlow = async (e: React.FormEvent) => {\n        e.preventDefault();\n        const userId = systemContext?.currentUser?.id;\n        if (!selfNavigationEngine || !userId || !newFlowName.trim()) {\n            alert(\"SelfNavigationEngine module not initialized, user not logged in, or flow name is empty.\");\n            return;\n        }\n\n        setIsCreatingFlow(true);\n        setCreateError(null); // Clear specific error\n        try {\n            // Define a simple initial structure for the new flow: a single log node\n            const entryNodeId = 'start';\n            const initialNodes: Omit<AgenticFlowNode, 'id' | 'flow_id'>[] = [\n                {\n"(__makeTemplateObject([""], [""]));
